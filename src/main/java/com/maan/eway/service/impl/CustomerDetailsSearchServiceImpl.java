/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.service.impl;


import java.lang.reflect.Type;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.CustomerDetails;
import com.maan.eway.bean.HomePositionMaster;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.req.CustomerDetailsSearchReq;
import com.maan.eway.res.CustomerDetailsCriteriaRes;
import com.maan.eway.res.CustomerDetailsSearchRes;
import com.maan.eway.service.CustomerDetailsSearchService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>ReferalMasterServiceimpl</h2>
*/
@Service
@Transactional
public class CustomerDetailsSearchServiceImpl implements CustomerDetailsSearchService {

@PersistenceContext
private EntityManager em;

Gson json = new Gson();

private Logger log=LogManager.getLogger(CustomerDetailsSearchServiceImpl.class);

@Override
public List<CustomerDetailsSearchRes> searchCustDetails(CustomerDetailsSearchReq req) {
	List<CustomerDetailsSearchRes> resList = new ArrayList<CustomerDetailsSearchRes>();
	List<CustomerDetailsCriteriaRes> list = new ArrayList<CustomerDetailsCriteriaRes>();
	ModelMapper mapper = new ModelMapper(); 
	//List<CustomerDetails> cusDetails = new ArrayList<CustomerDetails>();
	try {	
		
		Date today = new Date();
		
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CustomerDetailsCriteriaRes> query = cb.createQuery(CustomerDetailsCriteriaRes.class);
		
		Root<CustomerDetails> c = query.from(CustomerDetails.class);
		
		// Select Company Name SubQuery for Effective Date Max Filter 
		Subquery<Timestamp> insEff = query.subquery(Timestamp.class);
		Root<InsuranceCompanyMaster> i = insEff.from(InsuranceCompanyMaster.class);
		Subquery<Long> company = query.subquery(Long.class);
		Root<InsuranceCompanyMaster> ins = company.from(InsuranceCompanyMaster.class);
		
		insEff.select( cb.greatest(i.get("effectiveDateStart")) );
		Predicate i1 = cb.equal(ins.get("companyId"), i.get("companyId"));
		Predicate i2 = cb.lessThanOrEqualTo(i.get("effectiveDateStart") , today);
		insEff.where(i1,i2);
		
		company.select( ins.get("companyName")) ;
		Predicate ins1 = cb.equal(ins.get("companyId"), c.get("companyId"));
		Predicate ins2  = cb.equal(ins.get("effectiveDateStart"),insEff);
		Predicate ins3  = cb.equal(ins.get("status"),"Y");
		company.where(ins1,ins2,ins3);
		
		// Select Branch Name SubQuery for Effective Date Max Filter 
		Subquery<Timestamp> bmEff = query.subquery(Timestamp.class);
		Root<BranchMaster> b = bmEff.from(BranchMaster.class);
		Subquery<Long> branch = query.subquery(Long.class);
		Root<BranchMaster> bm = branch.from(BranchMaster.class);
		
		bmEff.select( cb.greatest(b.get("effectiveDateStart")) );
		Predicate b1 = cb.equal(bm.get("branchCode"), b.get("branchCode"));
		Predicate b2 = cb.lessThanOrEqualTo(b.get("effectiveDateStart") , today);
		bmEff.where(b1,b2);
		
		branch.select( bm.get("branchName")) ;
		Predicate bm1 = cb.equal(bm.get("branchCode"), c.get("branchCode"));
		Predicate bm2  = cb.equal(bm.get("effectiveDateStart"),bmEff);
		Predicate bm3  = cb.equal(bm.get("status"),"Y");
		branch.where(bm1,bm2,bm3); 
		
		// Get userType from Login Master
		Subquery<Long> usertype = query.subquery(Long.class);
		Root<LoginMaster> lm = usertype.from(LoginMaster.class);
		
		usertype.select(lm.get("userType"));
		Predicate lp1 = cb.equal(lm.get("loginId"), c.get("createdBy"));
		usertype.where(lp1);
		
		// Get subUserType from Login Master
		Subquery<Long> subUsertype = query.subquery(Long.class);
		Root<LoginMaster> lm2 = subUsertype.from(LoginMaster.class);
		
		subUsertype.select(lm2.get("subUserType"));
		Predicate lp2 = cb.equal(lm2.get("loginId"), c.get("createdBy"));
		subUsertype.where(lp2); 
		
		// Product Count
		Subquery<Long> productCount = query.subquery(Long.class);
		Root<HomePositionMaster> hm= productCount.from(HomePositionMaster.class);
		
		productCount.select( cb.countDistinct(hm.get("productId")) );
		Predicate hm1 = cb.equal(hm.get("loginId"), c.get("createdBy"));
		Predicate hm2 = cb.equal(hm.get("customerId"), c.get("customerId"));
		productCount.where(hm1,hm2); 
		
		query.multiselect(
				 c.get("customerId").alias("customerId")
				,c.get("titleDesc").alias("titleDesc")
				,c.get("clientName").alias("clientName")
				,c.get("entryDate").alias("entryDate")
				,c.get("companyId").alias("companyId")
				,company.alias("companyName")
				,c.get("branchCode").alias("branchCode")
				,branch.alias("branchName")
				,c.get("createdBy").alias("createdBy")
				,usertype.alias("userType"),subUsertype.alias("subUserType"),
				productCount.alias("productCount")
				);
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
	    orderList.add(cb.asc(c.get("customerId")));
	
		// Where GST NO
		Predicate c1 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate c2 = cb.equal(c.get("gstNo"), req.getGstNo());
		query.where(c1,c2).orderBy(orderList);
		
		// Get Result
		TypedQuery<CustomerDetailsCriteriaRes> result = em.createQuery(query);
		list = result.getResultList();
		
	    Type listType = new TypeToken<List<CustomerDetailsSearchRes>>(){}.getType();
		resList = mapper.map(list ,listType);

	}catch (Exception e) {
		e.printStackTrace();
		log.info("Exception Error", e.getMessage());
		return null;
	}
	return resList;
	
}


}
