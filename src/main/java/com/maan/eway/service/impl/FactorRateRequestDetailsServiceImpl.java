/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-11-08 ( Date ISO 2022-11-08 - Time 16:28:23 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.service.impl;

import java.math.BigDecimal;
import java.math.MathContext;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.jsoup.internal.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.BankMaster;
import com.maan.eway.bean.BuildingDetails;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.EmiTransactionDetails;
import com.maan.eway.bean.EndtTypeMaster;
import com.maan.eway.bean.EserviceBuildingDetails;
import com.maan.eway.bean.EserviceCommonDetails;
import com.maan.eway.bean.EserviceMotorDetails;
import com.maan.eway.bean.EserviceSectionDetails;
import com.maan.eway.bean.EserviceTravelDetails;
import com.maan.eway.bean.EserviceTravelGroupDetails;
import com.maan.eway.bean.EwayFactorDetails;
import com.maan.eway.bean.EwayFactorResultDetail;
import com.maan.eway.bean.FactorRateRequestDetails;
import com.maan.eway.bean.HomePositionMaster;
import com.maan.eway.bean.MasterReferralDetails;
import com.maan.eway.bean.MsPolicyDetails;
import com.maan.eway.bean.PolicyCoverData;
import com.maan.eway.bean.PolicyCoverDataEndt;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.bean.UWReferralDetails;
import com.maan.eway.bean.UwQuestionsDetails;
import com.maan.eway.calculator.util.RatingFactorsUtil;
import com.maan.eway.calculator.util.TaxFromFactor;
import com.maan.eway.common.req.CoverIdReq2;
import com.maan.eway.common.req.EserviceMotorDetailsSaveRes;
import com.maan.eway.common.req.EservieMotorDetailsViewRes;
import com.maan.eway.common.req.FactorRateDetailsList;
import com.maan.eway.common.req.UpdateFactorRateReq;
import com.maan.eway.common.req.ViewPolicyCalc;
import com.maan.eway.common.res.EndtTypeMasterDto;
import com.maan.eway.common.res.EserviceCommonGetRes;
import com.maan.eway.common.res.EserviceMotorDetailsRes;
import com.maan.eway.common.res.EserviceTravelGetRes;
import com.maan.eway.common.res.EwayFactorResultRes;
import com.maan.eway.common.res.FdFactorCalcRes;
import com.maan.eway.common.res.UpdateCoverRes;
import com.maan.eway.error.Error;
import com.maan.eway.repository.BuildingDetailsRepository;
import com.maan.eway.repository.EServiceMotorDetailsRepository;
import com.maan.eway.repository.EServiceSectionDetailsRepository;
import com.maan.eway.repository.EmiTransactionDetailsRepository;
import com.maan.eway.repository.EndtTypeMasterRepository;
import com.maan.eway.repository.EserviceBuildingDetailsRepository;
import com.maan.eway.repository.EserviceCommonDetailsRepository;
import com.maan.eway.repository.EserviceTravelDetailsRepository;
import com.maan.eway.repository.EserviceTravelGroupDetailsRepository;
import com.maan.eway.repository.EwayFactorDetailsRepository;
import com.maan.eway.repository.EwayFactorResultDetailRepository;
import com.maan.eway.repository.FactorRateRequestDetailsRepository;
import com.maan.eway.repository.HomePositionMasterRepository;
import com.maan.eway.repository.MasterReferralDetailsRepository;
import com.maan.eway.repository.MotorDataDetailsRepository;
import com.maan.eway.repository.MsPolicyDetailsRepository;
import com.maan.eway.repository.PolicyCoverDataEndtRepository;
import com.maan.eway.repository.PolicyCoverDataRepository;
import com.maan.eway.repository.UWReferralDetailsRepository;
import com.maan.eway.repository.UwQuestionsDetailsRepository;
import com.maan.eway.req.FactorFdCalcViewReq;
import com.maan.eway.req.FactorRateDetailsGetReq;
import com.maan.eway.req.calcengine.CalcEngine;
import com.maan.eway.res.EserviceBuildingsDetailsRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.res.calc.Cover;
import com.maan.eway.res.calc.Discount;
import com.maan.eway.res.calc.Endorsement;
import com.maan.eway.res.calc.Loading;
import com.maan.eway.res.calc.Tax;
import com.maan.eway.res.calc.UWReferrals;
import com.maan.eway.res.referal.MasterReferal;
import com.maan.eway.service.CalculatorEngine;
import com.maan.eway.service.FactorRateRequestDetailsService;
import com.maan.eway.service.impl.referal.ReferalServiceImpl;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>FactorRateRequestDetailsServiceimpl</h2>
*/
@Service
@Transactional 
public class FactorRateRequestDetailsServiceImpl implements FactorRateRequestDetailsService {
	@Autowired
	private BuildingDetailsRepository BuildingRepo;
@Autowired
private FactorRateRequestDetailsRepository repository;

@Autowired
private EServiceMotorDetailsRepository eserMotorRepo;

@Autowired
private EserviceTravelDetailsRepository eserTraRepo;

@Autowired
private EserviceTravelGroupDetailsRepository eserGroupRepo;

@Autowired
private EserviceBuildingDetailsRepository eserBuildRepo;

@Autowired
private EServiceSectionDetailsRepository eserSecRepo;

@Autowired
private EserviceCommonDetailsRepository eserCommonRepo;

@Autowired
private EwayFactorDetailsRepository ewayFactorRepo;

@Autowired
private EwayFactorResultDetailRepository ewayFactorResultRepo;

@Autowired
private MsPolicyDetailsRepository msPolicyRepo ; 

@Autowired
private MasterReferralDetailsRepository masReferralRepo;

@Autowired
private HomePositionMasterRepository homeRepo ;

@Autowired
private UwQuestionsDetailsRepository uwReferalRepo;

@Autowired
private UWReferralDetailsRepository uwReferalDetailsRepo ;

@Value(value = "${travel.productId}")
private String travelProductId;


@Lazy
@Autowired
private CalculatorEngine calcEngine;

@Autowired
private FactorRateRequestDetailsRepository facRateRepo ;

@PersistenceContext
private EntityManager em;

@Autowired
private EmiTransactionDetailsRepository emiRepo ;

@Autowired
private ReferalServiceImpl referal;


@Autowired 
private RatingFactorsUtil ratingutil;

@Autowired 
private MotorDataDetailsRepository motorRepo;

private Logger log=LogManager.getLogger(FactorRateRequestDetailsServiceImpl.class);
/*
public FactorRateRequestDetailsServiceImpl(FactorRateRequestDetailsRepository repo) {
this.repository = repo;
}

  */
@Autowired
private PolicyCoverDataEndtRepository policyCoverEndtRepo;

 @Override
    public FactorRateRequestDetails create(FactorRateRequestDetails d) {

       FactorRateRequestDetails entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public FactorRateRequestDetails update(FactorRateRequestDetails d) {
        FactorRateRequestDetails c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public FactorRateRequestDetails getOne(long id) {
        FactorRateRequestDetails t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }

*/
    @Override
    public List<FactorRateRequestDetails> getAll() {
        List<FactorRateRequestDetails> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }


	@Override
	@Transactional
	public SuccessRes saveFactorRateRequestDetails(EserviceMotorDetailsSaveRes req) {
		SuccessRes res = new SuccessRes();
		String successRes = "" ;
		try {
			// Delete Unopted Sections 
			List<EserviceSectionDetails> secList = eserSecRepo.findByRequestReferenceNoAndRiskIdAndProductIdAndLocationIdOrderBySectionIdAsc(req.getRequestReferenceNo(),Integer.valueOf(req.getVehicleId()), req.getProductId(),Integer.valueOf(req.getLocationId()));
			List<Integer> optedSectionIds = new ArrayList<Integer>();
			secList.forEach( o -> { 
				
				optedSectionIds.add(Integer.valueOf(o.getSectionId()));	} ); 					
					
			Long notSecCount = 	repository.countByRequestReferenceNoAndVehicleIdAndSectionIdNotInAndLocationId(req.getRequestReferenceNo(), Integer.valueOf(req.getVehicleId()), optedSectionIds,Integer.valueOf(req.getLocationId()) );	
			if(notSecCount > 0) {
				repository.deleteByRequestReferenceNoAndVehicleIdAndSectionIdNotInAndLocationId(req.getRequestReferenceNo(), Integer.valueOf(req.getVehicleId()) ,optedSectionIds,Integer.valueOf(req.getLocationId()) );
			}
					
			// Find Datas
			req.setSectionId(StringUtils.isNotBlank(req.getSectionId())?req.getSectionId():"0");
			Long factorCount = repository.countByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdAndLocationId(req.getRequestReferenceNo(),Integer.valueOf(req.getVehicleId()), req.getInsuranceId() ,Integer.valueOf(req.getProductId()) ,Integer.valueOf(req.getSectionId()),Integer.valueOf(req.getLocationId()));
			List<FactorRateRequestDetails> coverIds =null;
			// Delete Old Datas
			if( factorCount > 0 ) {
				coverIds = repository.findByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdAndLocationIdOrderByCoverIdAsc(req.getRequestReferenceNo(),Integer.valueOf(req.getVehicleId())
						, req.getInsuranceId() ,Integer.valueOf(req.getProductId()) ,Integer.valueOf(req.getSectionId()),Integer.valueOf(req.getLocationId()) );				
				
				repository.deleteByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdAndLocationId(req.getRequestReferenceNo(),Integer.valueOf(req.getVehicleId())
						, req.getInsuranceId() ,Integer.valueOf(req.getProductId()) ,Integer.valueOf(req.getSectionId()),Integer.valueOf(req.getLocationId()) );
			}
			
			// Save New Details
			successRes = saveNewFactorRateRequestDetails(req,coverIds);
			
			res.setResponse(successRes);
			res.setSuccessId(req.getRequestReferenceNo());
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return res;
	}

	
	public String saveNewFactorRateRequestDetails(EserviceMotorDetailsSaveRes req, List<FactorRateRequestDetails> coverIds) {
		String successRes = "Saved Successfully" ;
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		
		List<EserviceSectionDetails> sectionList =  eserSecRepo.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo() );
		String currencyId =sectionList.size()> 0 ? sectionList.get(0).getCurrencyId() : "" ;	
		String decimalDigits = currencyDecimalFormat(req.getInsuranceId() , currencyId ).toString();
		String stringFormat = "%0"+decimalDigits+"d" ;
		String decimalLength = decimalDigits.equals("0") ?"" : String.format(stringFormat ,0L)  ;
		String pattern = StringUtils.isBlank(decimalLength) ?  "#####0" :   "#####0." + decimalLength;
		DecimalFormat df = new DecimalFormat(pattern);
		
		try {
			Double premiumLc = 0D;
			Double premiumFc = 0D;
			Double overAllPremiumLc = 0D;
			Double overAllPremiumFc = 0D;
			List<FactorRateRequestDetails> saveCoverList = new ArrayList<FactorRateRequestDetails>(); 
			for ( Cover coverData  : req.getCoverList()  ) {
				
				if( coverData.getIsSubCover().equalsIgnoreCase("N") ) {
					// Save Cover Details
					FactorRateRequestDetails saveCover = new FactorRateRequestDetails(); 
					
					dozerMapper.map(coverData, saveCover);
					saveCover.setRequestReferenceNo(req.getRequestReferenceNo());
					saveCover.setSubCoverId(0);
					//saveCover.setCoverId(Integer.valueOf(coverData.getCoverId()));
					saveCover.setCurrency(coverData.getCurrency());
					saveCover.setLocationId(Integer.valueOf(req.getLocationId()));
					saveCover.setExchangeRate(coverData.getExchangeRate()==null?null : coverData.getExchangeRate());
					saveCover.setCompanyId(req.getInsuranceId());
					saveCover.setProductId(Integer.valueOf(req.getProductId()));
					saveCover.setSectionId(Integer.valueOf(req.getSectionId()));
					saveCover.setSubCoverYn( coverData.getIsSubCover());
					saveCover.setCdRefno(req.getCdRefNo());
					saveCover.setVdRefno(req.getVdRefNo());
					saveCover.setMsRefno(req.getMsrefno());	
					saveCover.setDiscLoadId(0);
					saveCover.setTaxId(0);
					saveCover.setEntryDate(new Date());			
					saveCover.setCreatedBy(req.getCreatedBy());
					saveCover.setStatus(coverData.getStatus() );
					saveCover.setVehicleId(Integer.valueOf(req.getVehicleId()));	
					saveCover.setDependentCoverYn(coverData.getDependentCoveryn());
					saveCover.setDependentCoverId(StringUtils.isBlank(coverData.getDependentCoverId())?null :coverData.getDependentCoverId());
					saveCover.setIsSelected(coverData.getIsselected());
					saveCover.setPremiumAfterDiscountFc(coverData.getPremiumAfterDiscount()==null ? null : new BigDecimal(df.format( coverData.getPremiumAfterDiscount())));
					saveCover.setPremiumBeforeDiscountFc(coverData.getPremiumBeforeDiscount()==null ? null : new BigDecimal(df.format(coverData.getPremiumBeforeDiscount())));
					saveCover.setPremiumExcludedTaxFc(coverData.getPremiumExcluedTax()==null ? null : new BigDecimal(df.format(coverData.getPremiumExcluedTax())));
					saveCover.setPremiumIncludedTaxFc(coverData.getPremiumIncludedTax()==null ? null : new BigDecimal(df.format(coverData.getPremiumIncludedTax())));
					saveCover.setPremiumAfterDiscountLc(coverData.getPremiumAfterDiscountLC()==null ? null : new BigDecimal(df.format(coverData.getPremiumAfterDiscountLC())));
					saveCover.setPremiumBeforeDiscountLc(coverData.getPremiumBeforeDiscountLC()==null ? null : new BigDecimal(df.format(coverData.getPremiumBeforeDiscountLC())));
					saveCover.setPremiumExcludedTaxLc(coverData.getPremiumExcluedTaxLC()==null ? null : new BigDecimal(df.format(coverData.getPremiumExcluedTaxLC())));
					saveCover.setPremiumIncludedTaxLc(coverData.getPremiumIncludedTaxLC()==null ? null : new BigDecimal(df.format(coverData.getPremiumIncludedTaxLC())));
 					saveCover.setIsReferral(StringUtils.isBlank(coverData.getIsReferral())?"N":coverData.getIsReferral());
					saveCover.setReferralDescription(StringUtils.isBlank(coverData.getReferalDescription())?"":coverData.getReferalDescription());
					saveCover.setMultiSelectYn(coverData.getMultiSelectYn()==null?"N": coverData.getMultiSelectYn());
					saveCover.setExcessAmount(coverData.getExcessAmount()==null ? null : coverData.getExcessAmount());
					saveCover.setExcessDesc(coverData.getExcessDesc()==null ? null : coverData.getExcessDesc());
					saveCover.setExcessPercent(coverData.getExcessPercent()==null ? null : coverData.getExcessPercent());
					saveCover.setProRataYn(coverData.getProRataYn()==null ? "N" : coverData.getProRataYn());
					String userOpt=(!"D".equals(saveCover.getIsSelected()) )?(StringUtils.isBlank(coverData.getUserOpt())?"N":coverData.getUserOpt()):(StringUtils.isBlank(coverData.getUserOpt())?"N":coverData.getUserOpt());
					saveCover.setRegulatoryCode(coverData.getRegulatoryCode());
					saveCover.setMinimumPremiumYn(StringUtils.isBlank(coverData.getMinimumPremiumYn())?"N":coverData.getMinimumPremiumYn());
				/*	if(coverIds!=null && !coverIds.isEmpty()) {
						long count = coverIds.stream().filter(t-> (saveCover.getCoverId().equals(t.getCoverId()) && saveCover.getSubCoverId().equals(t.getSubCoverId()) )).count() ;
						if(count>0) userOpt="Y";
					}*/
					
					if(req.getUpdateas()==null) {
						saveCover.setUserOpt(userOpt);
						saveCover.setActualRate(new BigDecimal(coverData.getRate()));
					}else {
						saveCover.setActualRate(coverData.getTiraRate()==null?BigDecimal.ZERO:new BigDecimal(coverData.getTiraRate()));
						saveCover.setUserOpt( userOpt);
					}
						
						
					saveCover.setCoverBasedOn(StringUtils.isBlank(coverData.getCoverBasedOn())?"sumInsured":coverData.getCoverBasedOn());
					//Double b=coverData.getPremiumBeforeDiscountLC()==null ? 0D : Double.valueOf(df.format(coverData.getPremiumBeforeDiscountLC()));
			//		saveCover.setSumInsured(coverData.getSumInsured()==null?BigDecimal.ZERO :coverData.getSumInsured());
					saveCover.setRegulSumInsured(coverData.getTiraSumInsured()==null?null:new BigDecimal(df.format(coverData.getTiraSumInsured())));
					saveCover.setEndtCount(coverData.getEndtCount()==null?BigDecimal.ZERO:coverData.getEndtCount());
					saveCover.setCoverPeriodFrom(coverData.getEffectiveDate());
					saveCover.setCoverPeriodTo(coverData.getPolicyEndDate());
					saveCover.setProRataPercent(coverData.getProRata()!=null ? coverData.getProRata().multiply(new BigDecimal("100")) : new BigDecimal("100"));
					saveCover.setRegulatorySuminsured(coverData.getTiraSumInsured()==null?BigDecimal.ZERO:coverData.getTiraSumInsured());
					saveCover.setRegulatoryRate(coverData.getTiraRate()==null?BigDecimal.ZERO:new BigDecimal(coverData.getTiraRate()));
					saveCover.setCoverageLimit(coverData.getCoverageLimit()==null?BigDecimal.ZERO:coverData.getCoverageLimit());
					saveCover.setMinCoverageLimit(coverData.getMinSumInsured()==null?BigDecimal.ZERO:coverData.getMinSumInsured());
					saveCover.setIsTaxExtempted(StringUtil.isBlank(coverData.getIsTaxExcempted())?"N":coverData.getIsTaxExcempted());
					
					saveCover.setCoverNameLocal(StringUtil.isBlank(coverData.getCoverNameLocal())?"":coverData.getCoverNameLocal());
					saveCover.setCoverDescLocal(StringUtil.isBlank(coverData.getSubCoverDescLocal())?"":coverData.getSubCoverDescLocal());
					saveCover.setSubCoverDescLocal(StringUtil.isBlank(coverData.getCoverNameLocal())?"":coverData.getCoverNameLocal());
					saveCover.setSubCoverNameLocal(StringUtil.isBlank(coverData.getSubCoverDescLocal())?"":coverData.getSubCoverDescLocal());
					saveCover.setMinimumRate(coverData.getMinrate()==null?BigDecimal.ZERO:new BigDecimal(coverData.getMinrate()));
					saveCover.setMinimumRateYn(coverData.getMinimumRateYn()==null?"":coverData.getMinimumRateYn());	
							//private BigDecimal     minCoverageLimit;
					// Date Differents
					Date periodStart =  coverData.getEffectiveDate();
					Date periodEnd = coverData.getPolicyEndDate() ;
					String diff = "0";
					BigDecimal NoOfDays = new BigDecimal(0);
					
					if(periodStart!=null && periodEnd!=null && !"D".equals(coverData.getProRataYn())) {
						Long diffInMillies = Math.abs(periodEnd.getTime() - periodStart.getTime());
						Long daysBetween =  TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS)  + 1 ;
						
						// Check Leap Year
						SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
						boolean leapYear = LocalDate.parse(sdf.format(periodEnd) ).isLeapYear();
						diff = String.valueOf( daysBetween==365 &&  leapYear==true ? daysBetween+1 : daysBetween );
						System.out.println( "Calc Cover :  "+ coverData.getCoverDesc() + " Difference in days: " + diff);
						NoOfDays = new BigDecimal(diff);
						
					}else if("D".equals(coverData.getProRataYn())){
						NoOfDays=coverData.getPolicyPeriod();
					}
					saveCover.setNoOfDays(NoOfDays);
					
//					if(coverData.getTaxes()!=null && coverData.getTaxes().size() > 0 ) {
//						saveCover.setTax1(coverData.getTaxes().get(0).getTaxAmount()==null ? null : Double.valueOf(df.format(coverData.getTaxes().get(0).getTaxAmount())) );
//						if(coverData.getTaxes().size() > 1  ) 
//						saveCover.setTax2( coverData.getTaxes().get(1).getTaxAmount()==null ? null : Double.valueOf(df.format(coverData.getTaxes().get(1).getTaxAmount())) );
//						if(coverData.getTaxes().size() > 2  ) 
//						saveCover.setTax3(coverData.getTaxes().get(2).getTaxAmount()==null ? null : Double.valueOf(df.format(coverData.getTaxes().get(2).getTaxAmount())) );
//						
//					}
					saveCover.setDiscountCoverId(0) ;
					saveCover.setDiffPremiumIncludedTaxFc(coverData.getDiffPremiumIncludedTax()==null?BigDecimal.ZERO:coverData.getDiffPremiumIncludedTax());
					saveCover.setDiffPremiumIncludedTaxLc(coverData.getDiffPremiumIncludedTaxLC()==null?BigDecimal.ZERO:coverData.getDiffPremiumIncludedTaxLC());
					saveCover.setFreeCoverLimit(coverData.getFreeCoverLimit()==null?BigDecimal.ZERO:coverData.getFreeCoverLimit());
					//saveCover.setEndtCount(BigDecimal.ZERO );
					saveCoverList.add(saveCover);
					premiumLc = premiumLc + (saveCover.getPremiumExcludedTaxLc()==null ? 0D :Double.valueOf(saveCover.getPremiumExcludedTaxLc().toString()) );
					premiumFc = premiumFc + (saveCover.getPremiumExcludedTaxFc()==null ? 0D :Double.valueOf(saveCover.getPremiumExcludedTaxFc().toString()) );
					overAllPremiumLc = overAllPremiumLc + (saveCover.getPremiumIncludedTaxLc()==null ? 0D :Double.valueOf(saveCover.getPremiumIncludedTaxLc().toString() ));
					overAllPremiumFc = overAllPremiumFc + (saveCover.getPremiumIncludedTaxFc()==null ? 0D :Double.valueOf(saveCover.getPremiumIncludedTaxFc().toString()));
					
					Map<String,Object>  primaryKeys = new HashMap<String,Object>();
					primaryKeys.put("RefNo" , req.getRequestReferenceNo());
					primaryKeys.put("CreatedBy" , req.getCreatedBy() );
					primaryKeys.put("InsuranceId" ,req.getInsuranceId());
					primaryKeys.put("ProductId" ,req.getProductId());
					primaryKeys.put("SectionId" ,req.getSectionId());
					primaryKeys.put("SubCoverYn" ,coverData.getIsSubCover());
					primaryKeys.put("VehId" ,req.getVehicleId());
					primaryKeys.put("CdRefNo" ,req.getCdRefNo());
					primaryKeys.put("VdRefNo" ,req.getVdRefNo());
					primaryKeys.put("MsRefNo" ,req.getMsrefno());	
					primaryKeys.put("LocationId" ,req.getLocationId());
					
					
					// Save Discount Or Promo Cover
					if( coverData.getDiscounts()!=null && coverData.getDiscounts().size() > 0 ) {
						
						successRes  = 	saveDiscountOrPromoRates( primaryKeys ,coverData ,   coverData.getDiscounts() , df , diff) ;	
					}
					// Tax
					if(coverData.getTaxes()!=null && coverData.getTaxes().size() > 0 ) {
						successRes  =  saveTaxes(primaryKeys ,coverData ,   coverData.getTaxes() ,df , diff) ;
					}
					
					// Loginds
					if(coverData.getLoadings()!=null && coverData.getLoadings().size() > 0 ) {
						successRes  =  saveLoadings(primaryKeys ,coverData ,   coverData.getLoadings() ,df , diff ) ;
					}
					
					//Endt
					if(coverData.getEndorsements()!=null && coverData.getEndorsements().size() > 0 ) {
						successRes  =  saveEndorsements(primaryKeys ,coverData ,   coverData.getEndorsements() ,df  , diff) ;
					}
					
					
					
				} else {
					// Save SubCover Details
					for ( Cover subCoverData : coverData.getSubcovers() ) {
						// Save Cover Details
						FactorRateRequestDetails saveSubCover = new FactorRateRequestDetails(); 
						
						dozerMapper.map(subCoverData, saveSubCover);
						saveSubCover.setLocationId(Integer.valueOf(req.getLocationId()));
						saveSubCover.setRequestReferenceNo(req.getRequestReferenceNo());
						saveSubCover.setCompanyId(req.getInsuranceId());
						saveSubCover.setProductId(Integer.valueOf(req.getProductId()));
						saveSubCover.setSectionId(Integer.valueOf(req.getSectionId()));
						saveSubCover.setSubCoverYn( coverData.getIsSubCover());
						saveSubCover.setCurrency(subCoverData.getCurrency());
						saveSubCover.setExchangeRate(subCoverData.getExchangeRate()==null?null : subCoverData.getExchangeRate());
						saveSubCover.setCdRefno(req.getCdRefNo());
						saveSubCover.setVdRefno(req.getVdRefNo());
						saveSubCover.setMsRefno(req.getMsrefno());	
						saveSubCover.setDiscLoadId(0);
						saveSubCover.setTaxId(0);
						saveSubCover.setEntryDate(new Date());			
						saveSubCover.setCreatedBy(req.getCreatedBy());
						saveSubCover.setStatus(saveSubCover.getStatus());
						saveSubCover.setVehicleId(Integer.valueOf(req.getVehicleId()));		
						saveSubCover.setDependentCoverYn(subCoverData.getDependentCoveryn());
						saveSubCover.setDependentCoverId(StringUtils.isBlank(subCoverData.getDependentCoverId())?null :subCoverData.getDependentCoverId());	
						saveSubCover.setIsSelected(subCoverData.getIsselected());
						saveSubCover.setPremiumAfterDiscountFc(subCoverData.getPremiumAfterDiscount()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumAfterDiscount())));
						saveSubCover.setPremiumBeforeDiscountFc(subCoverData.getPremiumBeforeDiscount()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumBeforeDiscount())));
						saveSubCover.setPremiumExcludedTaxFc(subCoverData.getPremiumExcluedTax()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumExcluedTax())));
						saveSubCover.setPremiumIncludedTaxFc(subCoverData.getPremiumIncludedTax()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumIncludedTax())));
						saveSubCover.setPremiumAfterDiscountLc(subCoverData.getPremiumAfterDiscountLC()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumAfterDiscountLC())));
						saveSubCover.setPremiumBeforeDiscountLc(subCoverData.getPremiumBeforeDiscountLC()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumBeforeDiscountLC())));
						saveSubCover.setPremiumExcludedTaxLc(subCoverData.getPremiumExcluedTaxLC()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumExcluedTaxLC())));
						saveSubCover.setPremiumIncludedTaxLc(subCoverData.getPremiumIncludedTaxLC()==null ? null : new BigDecimal(df.format(subCoverData.getPremiumIncludedTaxLC())));
						saveSubCover.setIsReferral(StringUtils.isBlank(subCoverData.getIsReferral())?"N":subCoverData.getIsReferral());
						saveSubCover.setReferralDescription(StringUtils.isBlank(coverData.getReferalDescription())?"":coverData.getReferalDescription());
						saveSubCover.setRegulSumInsured(subCoverData.getTiraSumInsured()==null?null:new BigDecimal(df.format(subCoverData.getTiraSumInsured())));
						saveSubCover.setExcessAmount(subCoverData.getExcessAmount()==null ? null : subCoverData.getExcessAmount());
						saveSubCover.setExcessDesc(subCoverData.getExcessDesc()==null ? null : subCoverData.getExcessDesc());
						saveSubCover.setExcessPercent(subCoverData.getExcessPercent()==null ? null : subCoverData.getExcessPercent());
						saveSubCover.setProRataYn(subCoverData.getProRataYn()==null ? "N" : subCoverData.getProRataYn());
						saveSubCover.setIsSelected(subCoverData.getIsselected());
						saveSubCover.setCoverageType(subCoverData.getCoverageType());
						saveSubCover.setCoverageLimit(saveSubCover.getCoverageLimit()==null?BigDecimal.ZERO:saveSubCover.getCoverageLimit());
						saveSubCover.setMinCoverageLimit(subCoverData.getMinSumInsured()==null?BigDecimal.ZERO:subCoverData.getMinSumInsured());
						
						saveSubCover.setCoverNameLocal(StringUtil.isBlank(coverData.getCoverNameLocal())?"":coverData.getCoverNameLocal());
						saveSubCover.setCoverDescLocal(StringUtil.isBlank(coverData.getSubCoverDescLocal())?"":coverData.getSubCoverDescLocal());
						saveSubCover.setSubCoverDescLocal(StringUtil.isBlank(subCoverData.getCoverNameLocal())?"":subCoverData.getCoverNameLocal());
						saveSubCover.setSubCoverNameLocal(StringUtil.isBlank(subCoverData.getSubCoverDescLocal())?"":subCoverData.getSubCoverDescLocal());
//						if(subCoverData.getTaxes()!=null && subCoverData.getTaxes().size() > 0 ) {
//							saveSubCover.setTax1(subCoverData.getTaxes().get(0).getTaxAmount()==null ? null : Double.valueOf(df.format(subCoverData.getTaxes().get(0).getTaxAmount())) );
//							if(coverData.getTaxes().size() > 1  ) 
//								saveSubCover.setTax2( subCoverData.getTaxes().get(1).getTaxAmount()==null ? null : Double.valueOf(df.format(subCoverData.getTaxes().get(1).getTaxAmount())) );
//							if(coverData.getTaxes().size() > 2  ) 
//								saveSubCover.setTax3(subCoverData.getTaxes().get(2).getTaxAmount()==null ? null : Double.valueOf(df.format(subCoverData.getTaxes().get(2).getTaxAmount())) );
//						}
						//String userOpt=(!"D".equals(saveSubCover.getIsSelected()))?"N":(StringUtils.isBlank(coverData.getUserOpt())?"N":coverData.getUserOpt());						saveSubCover.setRegulatoryCode(subCoverData.getRegulatoryCode());
						String userOpt=(!"D".equals(saveSubCover.getIsSelected()) )?(StringUtils.isBlank(saveSubCover.getUserOpt())?"N":saveSubCover.getUserOpt()):(StringUtils.isBlank(saveSubCover.getUserOpt())?"N":saveSubCover.getUserOpt());
						saveSubCover.setMinimumPremiumYn(StringUtils.isBlank(subCoverData.getMinimumPremiumYn())?"N":subCoverData.getMinimumPremiumYn());
						saveSubCover.setEndtCount(coverData.getEndtCount()==null?BigDecimal.ZERO:coverData.getEndtCount());
						saveSubCover.setFreeCoverLimit(coverData.getFreeCoverLimit()==null?BigDecimal.ZERO:coverData.getFreeCoverLimit());
						saveSubCover.setMinimumRate(coverData.getMinrate()==null?BigDecimal.ZERO:new BigDecimal(coverData.getMinrate()));
						saveSubCover.setMinimumRateYn(coverData.getMinimumRateYn()==null?"":coverData.getMinimumRateYn());
						/*if(coverIds!=null && !coverIds.isEmpty()) {
							long count = coverIds.stream().filter(t-> (saveSubCover.getCoverId().equals(t.getCoverId()) && saveSubCover.getSubCoverId().equals(t.getSubCoverId()) )).count() ;
							if(count>0) userOpt="Y";
						}*/
						saveSubCover.setUserOpt(userOpt);
						if(req.getUpdateas()==null) {
							saveSubCover.setUserOpt(userOpt);
							saveSubCover.setActualRate(new BigDecimal(subCoverData.getRate()));
						}else {
							saveSubCover.setActualRate(new BigDecimal(subCoverData.getTiraRate()));
							saveSubCover.setUserOpt( userOpt);
						}
						///Double b=subCoverData.getPremiumBeforeDiscountLC()==null ? 0D : Double.valueOf(df.format(subCoverData.getPremiumBeforeDiscountLC()));
					//	saveSubCover.setSumInsured(subCoverData.getSumInsured()==null?BigDecimal.ZERO :subCoverData.getSumInsured());
						saveSubCover.setRegulSumInsured(subCoverData.getTiraSumInsured()==null?null:new BigDecimal(df.format(subCoverData.getTiraSumInsured())));

						saveSubCover.setCoverBasedOn(StringUtils.isBlank(coverData.getCoverBasedOn())?"sumInsured":coverData.getCoverBasedOn());
						saveSubCover.setCoverPeriodFrom(coverData.getEffectiveDate());
						saveSubCover.setCoverPeriodTo(coverData.getPolicyEndDate());
						saveSubCover.setProRataPercent(coverData.getProRata()!=null ? coverData.getProRata().multiply(new BigDecimal("100")) : new BigDecimal("100"));
						
						// Date Differents
						Date periodStart =  coverData.getEffectiveDate();
						Date periodEnd = coverData.getPolicyEndDate() ;
						String diff = "0";
						BigDecimal NoOfDays = new BigDecimal(0);
						
						if(periodStart!=null && periodEnd!=null && !"D".equals(coverData.getProRataYn())) {
							Long diffInMillies = Math.abs(periodEnd.getTime() - periodStart.getTime());
							Long daysBetween =  TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS)  + 1 ;
							
							// Check Leap Year
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
							boolean leapYear = LocalDate.parse(sdf.format(periodEnd) ).isLeapYear();
							diff = String.valueOf( daysBetween==365 &&  leapYear==true ? daysBetween+1 : daysBetween );
							System.out.println( "Calc Cover :  "+ coverData.getCoverDesc() + " Difference in days: " + diff);
							NoOfDays = new BigDecimal(diff);
							
						}else if("D".equals(coverData.getProRataYn())){
							NoOfDays=coverData.getPolicyPeriod();
						}
						saveSubCover.setNoOfDays(NoOfDays);
						
						premiumLc = premiumLc + (saveSubCover.getPremiumExcludedTaxLc()==null ? 0D :Double.valueOf(saveSubCover.getPremiumExcludedTaxLc().toString()));
						premiumFc = premiumFc + (saveSubCover.getPremiumExcludedTaxFc()==null ? 0D :Double.valueOf(saveSubCover.getPremiumExcludedTaxFc().toString()));
						overAllPremiumLc = overAllPremiumLc + (saveSubCover.getPremiumIncludedTaxLc()==null ? 0D :Double.valueOf(saveSubCover.getPremiumIncludedTaxLc().toString()));
						overAllPremiumFc = overAllPremiumFc + (saveSubCover.getPremiumIncludedTaxFc()==null ? 0D :Double.valueOf(saveSubCover.getPremiumIncludedTaxFc().toString()));
						
						saveSubCover.setDiscountCoverId(0) ;
						saveSubCover.setDiffPremiumIncludedTaxFc(coverData.getDiffPremiumIncludedTax()==null?BigDecimal.ZERO:coverData.getDiffPremiumIncludedTax());
						saveSubCover.setDiffPremiumIncludedTaxLc(coverData.getDiffPremiumIncludedTaxLC()==null?BigDecimal.ZERO:coverData.getDiffPremiumIncludedTaxLC());
						//saveSubCover.setEndtCount(BigDecimal.ZERO );
						saveCoverList.add(saveSubCover);
						// repository.saveAndFlush(saveSubCover);
						Map<String,Object>  primaryKeys = new HashMap<String,Object>();
						primaryKeys.put("RefNo" , req.getRequestReferenceNo());
						primaryKeys.put("CreatedBy" , req.getCreatedBy() );
						primaryKeys.put("InsuranceId" ,req.getInsuranceId());
						primaryKeys.put("ProductId" ,req.getProductId());
						primaryKeys.put("SectionId" ,req.getSectionId());
						primaryKeys.put("SubCoverYn" ,coverData.getIsSubCover());
						primaryKeys.put("VehId" ,req.getVehicleId());
						primaryKeys.put("CdRefNo" ,req.getCdRefNo());
						primaryKeys.put("VdRefNo" ,req.getVdRefNo());
						primaryKeys.put("MsRefNo" ,req.getMsrefno());	
						primaryKeys.put("LocationId" ,req.getLocationId());	
						// Save Discount Cover Or Promo Cover
						if( subCoverData.getDiscounts()!=null && subCoverData.getDiscounts().size() > 0 ) {
							successRes  = 	saveDiscountOrPromoRates( primaryKeys ,subCoverData ,   subCoverData.getDiscounts() ,df , diff) ;
						}
						
						 
						// Tax
						if(subCoverData.getTaxes()!=null && subCoverData.getTaxes().size() > 0 ) {
							successRes  =  saveTaxes(primaryKeys ,subCoverData ,   subCoverData.getTaxes() ,df , diff) ;
						}
						
						// Loginds
						if(coverData.getLoadings()!=null && coverData.getLoadings().size() > 0 ) {
							successRes  =  saveLoadings(primaryKeys ,subCoverData ,   subCoverData.getLoadings() ,df , diff) ;
						}	
						//Endt
						if(coverData.getEndorsements()!=null && coverData.getEndorsements().size() > 0 ) {
							successRes  =  saveEndorsements(primaryKeys ,coverData ,   subCoverData.getEndorsements() ,df  , diff) ;
						}
						
						
					}
				}
				// Cover Save 
				repository.saveAllAndFlush(saveCoverList);
				
						
				
			}
			
			
			// Update Motor Premium
//			if(   req.getProductId().equalsIgnoreCase(motorProductId)) {
//				EserviceMotorDetails findData =   eserMotorRepo.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo()  ,Integer.valueOf(req.getVehicleId()));
//				findData.setActualPremiumLc(premiumLc ==null ? null :new BigDecimal(df.format(premiumLc )));
//				findData.setActualPremiumFc(premiumFc ==null ? null :new BigDecimal(df.format(premiumFc )));
//				findData.setOverallPremiumLc(overAllPremiumLc ==null ? null :new BigDecimal(df.format(overAllPremiumLc)));
//				findData.setOverallPremiumFc(overAllPremiumFc ==null ? null :new BigDecimal(df.format(overAllPremiumFc)));
//				
//				eserMotorRepo.save(findData);
//				
//			// Update  Travle PRemium
//			} else
			CompanyProductMaster product =  getCompanyProductMasterDropdown(req.getInsuranceId() , req.getProductId().toString());

			if( product.getMotorYn().equalsIgnoreCase("H") && req.getProductId().equalsIgnoreCase(travelProductId)) {
				
				// Update Group Premium
				EserviceTravelGroupDetails findData =eserGroupRepo.findByRequestReferenceNoAndGroupId(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()) ); 
				findData.setActualPremiumLc(premiumLc ==null ? null :new BigDecimal(df.format(premiumLc )));
				findData.setActualPremiumFc(premiumFc ==null ? null :new BigDecimal(df.format(premiumFc )));
				findData.setOverallPremiumLc(overAllPremiumLc ==null ? null :new BigDecimal(df.format(overAllPremiumLc)));
				findData.setOverallPremiumFc(overAllPremiumFc ==null ? null :new BigDecimal(df.format(overAllPremiumFc)));
				eserGroupRepo.save(findData);
				
				List<EserviceTravelGroupDetails> findAll = eserGroupRepo.findByRequestReferenceNoOrderByGroupIdAsc(req.getRequestReferenceNo() );
				
				
				// Update OverAll Premium
				premiumFc = findAll.stream().filter( o -> o.getActualPremiumFc()!=null && o.getActualPremiumFc().doubleValue() > 0D ).mapToDouble( o ->   o.getActualPremiumFc().doubleValue()  ).sum();
				premiumLc = findAll.stream().filter( o -> o.getActualPremiumLc()!=null && o.getActualPremiumLc().doubleValue() > 0D ).mapToDouble( o ->   o.getActualPremiumLc().doubleValue()  ).sum();
				overAllPremiumFc = findAll.stream().filter( o -> o.getOverallPremiumFc()!=null && o.getOverallPremiumFc().doubleValue() > 0D ).mapToDouble( o ->   o.getOverallPremiumFc().doubleValue()  ).sum();
				overAllPremiumLc = findAll.stream().filter( o -> o.getOverallPremiumLc()!=null && o.getOverallPremiumLc().doubleValue() > 0D ).mapToDouble( o ->   o.getOverallPremiumLc().doubleValue()  ).sum();
				
				//Update TRavel Premium
				EserviceTravelDetails traData = eserTraRepo.findByRequestReferenceNo(req.getRequestReferenceNo());
				traData.setActualPremiumLc(premiumLc ==null ? null :new BigDecimal(df.format(premiumLc )));
				traData.setActualPremiumFc(premiumFc ==null ? null :new BigDecimal(df.format(premiumFc )));
				traData.setOverallPremiumLc(overAllPremiumLc ==null ? null :new BigDecimal(df.format(overAllPremiumLc)));
				traData.setOverallPremiumFc(overAllPremiumFc ==null ? null :new BigDecimal(df.format(overAllPremiumFc)));
				eserTraRepo.save(traData);
				
			} else if( product.getMotorYn().equalsIgnoreCase("A") ) {
				
//				// Update Group Premium
//				EserviceBuildingDetails findData = eserBuildRepo.findByRequestReferenceNoAndRiskIdAndSectionId(req.getRequestReferenceNo() ,1 , req.getSectionId()); 
//				findData.setActualPremiumLc(premiumLc ==null ? null :new BigDecimal(df.format(premiumLc )));
//				findData.setActualPremiumFc(premiumFc ==null ? null :new BigDecimal(df.format(premiumFc )));
//				findData.setOverallPremiumLc(overAllPremiumLc ==null ? null :new BigDecimal(df.format(overAllPremiumLc)));
//				findData.setOverallPremiumFc(overAllPremiumFc ==null ? null :new BigDecimal(df.format(overAllPremiumFc)));
//				
//				eserBuildRepo.save(findData);
				
			} else {
				
				// Update Group Premium
				EserviceCommonDetails findData =eserCommonRepo.findByRequestReferenceNoAndRiskIdAndSectionId(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()) , req.getSectionId()); 
				if(findData !=null) {
					findData.setActualPremiumLc(premiumLc ==null ? null :new BigDecimal(df.format(premiumLc )));
					findData.setActualPremiumFc(premiumFc ==null ? null :new BigDecimal(df.format(premiumFc )));
					findData.setOverallPremiumLc(overAllPremiumLc ==null ? null :new BigDecimal(df.format(overAllPremiumLc)));
					findData.setOverallPremiumFc(overAllPremiumFc ==null ? null :new BigDecimal(df.format(overAllPremiumFc)));
					
					eserCommonRepo.save(findData);
				}
			
				
				
			}
			
			// Save Master Referals
			if(req.getReferals()!=null && req.getReferals().size()>0 ) {
				
				Long refCount  = masReferralRepo.countByRequestReferenceNoAndRiskIdAndProductIdAndSectionIdAndCompanyId(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()) ,
	                      Integer.valueOf(req.getProductId()),Integer.valueOf(req.getSectionId()),req.getInsuranceId() );
				if(refCount!=null && refCount > 0 ) {
					masReferralRepo.deleteByRequestReferenceNoAndRiskIdAndProductIdAndSectionIdAndCompanyId(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()) ,
				            Integer.valueOf(req.getProductId()),Integer.valueOf(req.getSectionId()),req.getInsuranceId() );
				}
				
				// Remove non selected Section Master Referal		
				List<EserviceSectionDetails> sectionDetails = eserSecRepo.findByRequestReferenceNoAndRiskIdAndProductIdOrderBySectionIdAsc(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()) , req.getProductId());
				
				List<Integer> sectionIds = new ArrayList<Integer>();
				sectionDetails.forEach( o -> sectionIds.add(Integer.valueOf(o.getSectionId())) );
				
				refCount  = masReferralRepo.countByRequestReferenceNoAndRiskIdAndProductIdAndSectionIdNotIn(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()) , Integer.valueOf(req.getProductId()),sectionIds);
				if(refCount!=null && refCount > 0 ) {
					masReferralRepo.deleteByRequestReferenceNoAndRiskIdAndProductIdAndSectionIdNotIn(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()) , Integer.valueOf(req.getProductId()),sectionIds);
				}
				
				Integer row = 0 ;		
				for ( MasterReferal referal : req.getReferals() ){
					MasterReferralDetails saveRef = new MasterReferralDetails();
					
					if (referal.getIsreferral()==true && ! referal.getReferralDesc().contains("Exception") ) {
						row = row + 1 ;
						saveRef.setRequestReferenceNo(req.getRequestReferenceNo());
						saveRef.setApiInfo(referal.getApiInfo());
						saveRef.setReferralDesc(referal.getReferralDesc());
						saveRef.setSNo(row);
						saveRef.setEntryDate(new Date());
						saveRef.setCompanyId(req.getInsuranceId());
						saveRef.setCreatedBy(req.getCreatedBy());
						saveRef.setRiskId(Integer.valueOf(req.getVehicleId()));
						saveRef.setSectionId(Integer.valueOf(req.getSectionId()));
						saveRef.setStatus("Y");
						saveRef.setProductId(Integer.valueOf(req.getProductId()));
						masReferralRepo.save(saveRef);
					}
					
				}
					
			}
			
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}
		return successRes;
	}
	
	public synchronized CompanyProductMaster getCompanyProductMasterDropdown(String companyId, String productId) {
		CompanyProductMaster product = new CompanyProductMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			product = list.size() > 0 ? list.get(0) :null;
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return product;
	}

	public Integer currencyDecimalFormat(String insuranceId  ,String currencyId ) {
		Integer decimalFormat = 0 ;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
			List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
			
			// Find All
			Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
			
			// Select
			query.select(c);
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
			Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			
			effectiveDate.where(a11,a12,a18,a22);
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
			Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			
			effectiveDate2.where(a13,a14,a19,a23);
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"),"99999");
			Predicate n6 = cb.or(n4,n5);
			Predicate n7 = cb.equal(c.get("currencyId"),currencyId);
			query.where(n1,n2,n3,n6,n7).orderBy(orderList);
			
			// Get Result
			TypedQuery<CurrencyMaster> result = em.createQuery(query);			
			list =  result.getResultList(); 
			
			decimalFormat = list.size() > 0 ? (list.get(0).getDecimalDigit()==null?0 :list.get(0).getDecimalDigit()) :0; 		
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return decimalFormat;
	}

	public String saveTaxes(Map<String,Object>  primaryKeys ,  Cover coverReq , List<Tax> taxes , DecimalFormat df ,String diff ) {
		String res = "Saved Successfully";
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<FactorRateRequestDetails> saveTaxList = new ArrayList<FactorRateRequestDetails>();
			for (Tax tax :  taxes ) {
				FactorRateRequestDetails saveTax = new FactorRateRequestDetails();
				dozerMapper.map(coverReq, saveTax);
				saveTax.setRequestReferenceNo(primaryKeys.get("RefNo").toString() );
				saveTax.setCoverName(coverReq.getCoverName() +" "+tax.getTaxDesc() );
				saveTax.setCoverDesc(coverReq.getCoverDesc() +" "+tax.getTaxDesc());
				saveTax.setCurrency(coverReq.getCurrency());
				saveTax.setLocationId(Integer.valueOf(primaryKeys.get("LocationId").toString()));
				saveTax.setExchangeRate(coverReq.getExchangeRate()==null?null :coverReq.getExchangeRate());
				saveTax.setCompanyId(primaryKeys.get("InsuranceId").toString());
				saveTax.setProductId(Integer.valueOf(primaryKeys.get("ProductId").toString()));
				saveTax.setCoverageType("T");
				saveTax.setSectionId(Integer.valueOf(primaryKeys.get("SectionId").toString()));
				saveTax.setSubCoverYn( primaryKeys.get("SubCoverYn").toString());
				saveTax.setVehicleId(Integer.valueOf(primaryKeys.get("VehId").toString()));	
				saveTax.setCdRefno( primaryKeys.get("CdRefNo").toString());
				saveTax.setVdRefno( primaryKeys.get("VdRefNo").toString());
				saveTax.setMsRefno( primaryKeys.get("MsRefNo").toString());	
				saveTax.setEntryDate(new Date());			
				saveTax.setCreatedBy(primaryKeys.get("CreatedBy")==null?"":primaryKeys.get("CreatedBy").toString());
				saveTax.setSubCoverId(StringUtils.isBlank(coverReq.getSubCoverId()) ?0 : Integer.valueOf(coverReq.getSubCoverId()) );
				saveTax.setCoverId(Integer.valueOf(coverReq.getCoverId()));
				saveTax.setStatus(coverReq.getStatus());
				saveTax.setIsSelected(coverReq.getIsselected());
				saveTax.setDiscLoadId(StringUtils.isBlank(tax.getEndtTypeId())?0:Integer.parseInt(tax.getEndtTypeId()));
				saveTax.setTaxAmount(tax.getTaxAmount()==null?null :new BigDecimal(df.format(tax.getTaxAmount())));
				saveTax.setTaxCalcType(tax.getCalcType());
				saveTax.setTaxDesc(tax.getTaxDesc());
				saveTax.setTaxExemptType(tax.getTaxExemptType());
				saveTax.setTaxExemptCode(tax.getTaxExemptCode());
				saveTax.setTaxId(tax.getTaxId()==null?null : Integer.valueOf(tax.getTaxId()) );
				saveTax.setTaxRate(tax.getTaxRate()==null?null :new BigDecimal(tax.getTaxRate()) );
				saveTax.setIsTaxExtempted(tax.getIsTaxExempted());
				saveTax.setEndtCount(tax.getEndtTypeCount()==null?BigDecimal.ZERO:tax.getEndtTypeCount());
				saveTax.setDiscountCoverId(0);
				saveTax.setCoverPeriodFrom(coverReq.getEffectiveDate());
				saveTax.setCoverPeriodTo(coverReq.getPolicyEndDate());
				saveTax.setDependentCoverYn(StringUtils.isBlank(tax.getDependentYn())?"N":tax.getDependentYn());
				saveTax.setMinimumPremium(tax.getMinimumTaxAmountLc());
				saveTax.setMinimumPremiumFc(tax.getMinimumTaxAmount());
				saveTax.setTaxAmountLc(tax.getTaxAmountLc()==null?null :new BigDecimal(df.format(tax.getTaxAmountLc())));
				saveTax.setDependentCoverId("0");
				saveTax.setNoOfDays(new BigDecimal(diff));
				//	repository.saveAndFlush(saveTax);
				saveTaxList.add(saveTax);
				
			}
			repository.saveAllAndFlush(saveTaxList);
			res = "Success" ;
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			res = "Failed";
			return res;
			
		}return res;
	}
	public String saveEndorsements(Map<String,Object>  primaryKeys ,  Cover coverReq , List<Endorsement> endorsements , DecimalFormat df ,String diff) {
		String res = "Saved Successfully";
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<FactorRateRequestDetails> saveEndt = new ArrayList<FactorRateRequestDetails>();
			for (Endorsement lod :  endorsements ) {
				FactorRateRequestDetails saveLod = new FactorRateRequestDetails();
				dozerMapper.map(coverReq, saveLod);
				saveLod.setRequestReferenceNo(primaryKeys.get("RefNo").toString() );
				saveLod.setCoverName(lod.getCoverName());
				saveLod.setCoverDesc(lod.getEndorsementDesc());	
				saveLod.setLocationId(Integer.valueOf(primaryKeys.get("LocationId").toString()));
				saveLod.setCompanyId(primaryKeys.get("InsuranceId").toString());
				saveLod.setProductId(Integer.valueOf(primaryKeys.get("ProductId").toString()));
				saveLod.setSectionId(Integer.valueOf(primaryKeys.get("SectionId").toString()));
				saveLod.setSubCoverYn( primaryKeys.get("SubCoverYn").toString());
				saveLod.setVehicleId(Integer.valueOf(primaryKeys.get("VehId").toString()));	
				saveLod.setCdRefno( primaryKeys.get("CdRefNo").toString());
				saveLod.setVdRefno( primaryKeys.get("VdRefNo").toString());
				saveLod.setMsRefno( primaryKeys.get("MsRefNo").toString());	
				saveLod.setEntryDate(new Date());			
				saveLod.setCreatedBy(lod.getCreatedBy());
				//saveLod.setSubCoverId(StringUtils.isBlank(coverReq.getSubCoverId()) ?0 : Integer.valueOf(coverReq.getSubCoverId()) );
				saveLod.setSubCoverId(lod.getEndtCount()==null ?0 : lod.getEndtCount().intValue() );
				saveLod.setEndtCount(lod.getEndtCount()==null ?BigDecimal.ZERO: lod.getEndtCount() );
				saveLod.setCoverId(Integer.valueOf(coverReq.getCoverId()));
				saveLod.setStatus(coverReq.getStatus());
				saveLod.setIsSelected(lod.getIsselected());
				saveLod.setCoverageType("E");
				saveLod.setDiscLoadId(lod.getEndorsementId()==null?null:Integer.valueOf(lod.getEndorsementId()));
				saveLod.setDependentCoverYn(coverReq.getDependentCoveryn());
				saveLod.setDependentCoverId(StringUtils.isBlank(coverReq.getDependentCoverId())?null:coverReq.getDependentCoverId());
				
				// Factor
				saveLod.setFactorTypeId(StringUtils.isBlank(lod.getFactorTypeId())?null: new BigDecimal(lod.getFactorTypeId()));				
				saveLod.setCoverName(lod.getEndorsementDesc());
				saveLod.setCoverDesc(lod.getEndorsementDesc());
				saveLod.setTaxId(0);
				
								
				saveLod.setPremiumBeforeDiscountFc(lod.getPremiumBeforeDiscount()==null ? null : new BigDecimal(df.format(lod.getPremiumBeforeDiscount())));
				saveLod.setPremiumBeforeDiscountLc(lod.getPremiumBeforeDiscountLC()==null ? null : new BigDecimal(df.format(lod.getPremiumBeforeDiscountLC())));
				saveLod.setPremiumAfterDiscountFc(lod.getPremiumAfterDiscount()==null ? null : new BigDecimal(df.format( lod.getPremiumAfterDiscount())));
				saveLod.setPremiumAfterDiscountLc(lod.getPremiumAfterDiscountLC()==null ? null : new BigDecimal(df.format(lod.getPremiumAfterDiscountLC())));
				saveLod.setPremiumExcludedTaxFc(lod.getPremiumExcluedTax()==null ? null : new BigDecimal(df.format(lod.getPremiumExcluedTax())));
				saveLod.setPremiumExcludedTaxLc(lod.getPremiumExcluedTaxLC()==null ? null : new BigDecimal(df.format(lod.getPremiumExcluedTaxLC())));
				saveLod.setPremiumIncludedTaxFc(lod.getPremiumIncludedTax()==null ? null : new BigDecimal(df.format(lod.getPremiumIncludedTax())));					
				saveLod.setPremiumIncludedTaxLc(lod.getPremiumIncludedTaxLC()==null ? null : new BigDecimal(df.format(lod.getPremiumIncludedTaxLC())));
				
				saveLod.setDiscountCoverId(StringUtils.isBlank(lod.getEndorsementforId())?0:Integer.parseInt(lod.getEndorsementforId()));
				
				saveLod.setCoverPeriodFrom(coverReq.getEffectiveDate());
				saveLod.setCoverPeriodTo(coverReq.getPolicyEndDate());
				
				saveLod.setCalcType(lod.getEndorsementCalcType());
				saveLod.setMinimumPremium(lod.getMinimumPremium());
				saveLod.setMinimumPremiumFc(lod.getMinimumPremium().multiply(lod.getExchangeRate(),MathContext.DECIMAL64));
				saveLod.setMinimumPremiumYn(lod.getMinimumPremiumYn());
				saveLod.setSumInsured(lod.getEndorsementsumInsured());
				saveLod.setSumInsuredLc(lod.getEndorsementsumInsuredLc());
				saveLod.setCurrency(lod.getCurrency());
				saveLod.setExchangeRate(lod.getExchangeRate()==null?null : lod.getExchangeRate());
				saveLod.setRate(lod.getEndorsementRate()==null?null:new BigDecimal(lod.getEndorsementRate()));
	 			saveLod.setCalcType(lod.getEndorsementCalcType());
				saveLod.setCoverageLimit(lod.getCoverageLimit());
				saveLod.setNoOfDays("D".equals(coverReq.getProRataYn())? lod.getPolicyPeriod(): new BigDecimal(diff));
				saveLod.setProRataYn(lod.getProRataYn()==null?"N":lod.getProRataYn());
				saveLod.setProRataPercent(lod.getProRata()==null?new BigDecimal("100"):lod.getProRata().multiply( new BigDecimal("100")));
				//repository.saveAndFlush(saveLod);
				saveEndt.add(saveLod);
				
				// Tax
				if(lod.getTaxes()!=null && lod.getTaxes().size() > 0 ) {
					String successRes = saveTaxes(primaryKeys ,coverReq ,   lod.getTaxes() ,df , diff) ;
				}
				
			}
			repository.saveAllAndFlush(saveEndt);
			res = "Success" ;
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			res = "Failed";
			return res;
			
		}return res;
	}
	public String saveLoadings(Map<String,Object>  primaryKeys ,  Cover coverReq , List<Loading> lodings , DecimalFormat df,String diff ) {
		String res = "Saved Successfully";
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		
		try {
			List<FactorRateRequestDetails> saveLodings = new ArrayList<FactorRateRequestDetails>();
			for (Loading lod :  lodings ) {
				FactorRateRequestDetails saveLod = new FactorRateRequestDetails();
				dozerMapper.map(coverReq, saveLod);
				saveLod.setRequestReferenceNo(primaryKeys.get("RefNo").toString() );
				saveLod.setCoverName(lod.getLoadingDesc());
				saveLod.setCoverDesc(lod.getLoadingDesc());
				saveLod.setCurrency(coverReq.getCurrency());
				saveLod.setLocationId(Integer.valueOf(primaryKeys.get("LocationId").toString()));
				saveLod.setExchangeRate(coverReq.getExchangeRate()==null?null : coverReq.getExchangeRate());
				saveLod.setCompanyId(primaryKeys.get("InsuranceId").toString());
				saveLod.setProductId(Integer.valueOf(primaryKeys.get("ProductId").toString()));
				saveLod.setSectionId(Integer.valueOf(primaryKeys.get("SectionId").toString()));
				saveLod.setSubCoverYn( primaryKeys.get("SubCoverYn").toString());
				saveLod.setVehicleId(Integer.valueOf(primaryKeys.get("VehId").toString()));	
				saveLod.setCdRefno( primaryKeys.get("CdRefNo").toString());
				saveLod.setVdRefno( primaryKeys.get("VdRefNo").toString());
				saveLod.setMsRefno( primaryKeys.get("MsRefNo").toString());	
				saveLod.setEntryDate(new Date());			
				saveLod.setCreatedBy(primaryKeys.get("CreatedBy").toString());
				saveLod.setSubCoverId(StringUtils.isBlank(coverReq.getSubCoverId()) ?0 : Integer.valueOf(coverReq.getSubCoverId()) );
				saveLod.setCoverId(Integer.valueOf(coverReq.getCoverId()));
				saveLod.setStatus(coverReq.getStatus());
				saveLod.setIsSelected(coverReq.getIsselected());
				saveLod.setCoverageType("L");
				
				// Factor
				saveLod.setFactorTypeId(StringUtils.isBlank(lod.getFactorTypeId())?null: new BigDecimal(lod.getFactorTypeId()));
				saveLod.setMinimumPremium(lod.getLoadingAmount()==null?null: new BigDecimal(df.format(lod.getLoadingAmount())));
				saveLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
				saveLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
				saveLod.setRate(lod.getLoadingRate()==null?null:new BigDecimal(lod.getLoadingRate()));
			//	saveLod.setLodingSubcoverId(lod.getSubCoverId()==null?null:Integer.valueOf(lod.getSubCoverId()));
				saveLod.setDiscLoadId(lod.getLoadingId()==null?null:Integer.valueOf(lod.getLoadingId()));
				saveLod.setDependentCoverYn("N");
				saveLod.setDependentCoverId(null);
				saveLod.setCalcType(StringUtils.isBlank(lod.getLoadingCalcType()) ? "A" :lod.getLoadingCalcType());
				saveLod.setCoverName(lod.getLoadingDesc());
				saveLod.setCoverDesc(lod.getLoadingDesc());
				saveLod.setTaxId(0);
				saveLod.setPremiumAfterDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
				saveLod.setPremiumBeforeDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
				saveLod.setPremiumExcludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
				saveLod.setPremiumIncludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
				saveLod.setDiscountCoverId(StringUtils.isBlank(lod.getLoadingforId())?0:Integer.parseInt(lod.getLoadingforId()));
				saveLod.setEndtCount(BigDecimal.ZERO);
				saveLod.setCoverPeriodFrom(coverReq.getEffectiveDate());
				saveLod.setCoverPeriodTo(coverReq.getPolicyEndDate());
				saveLod.setMinimumRate(lod.getMinrate()==null ? BigDecimal.ZERO:new BigDecimal(lod.getMinrate()));
				saveLod.setActualRate(lod.getLoadingRate()==null ? null :new BigDecimal(lod.getLoadingRate()));
				saveLod.setNoOfDays(new BigDecimal(diff));
			//	repository.saveAndFlush(saveLod);
				
				if(!(saveLod.getDiscLoadId()==90001 && saveLod.getPremiumExcludedTaxFc().compareTo(BigDecimal.ZERO)==0) )
					saveLodings.add(saveLod)	;		
			}
			repository.saveAllAndFlush(saveLodings);
			res = "Success" ;
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			res = "Failed";
			return res;
			
		}return res;
	}
	
	public String saveDiscountOrPromoRates(Map<String,Object>  primaryKeys ,  Cover coverReq , List<Discount> discounts , DecimalFormat df ,String diff) {
		String res = "Saved Successfully";
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<FactorRateRequestDetails> saveDiscountList = new ArrayList<FactorRateRequestDetails>();
			for (Discount disc :  discounts ) {
				FactorRateRequestDetails saveDiscounts = new FactorRateRequestDetails();
				dozerMapper.map(coverReq, saveDiscounts);
				saveDiscounts.setRequestReferenceNo(primaryKeys.get("RefNo").toString() );
				saveDiscounts.setDiscLoadId(Integer.valueOf(disc.getDiscountId()));
				saveDiscounts.setLocationId(Integer.valueOf(primaryKeys.get("LocationId").toString()));
				saveDiscounts.setCoverName(disc.getDiscountDesc());
				saveDiscounts.setCoverDesc(disc.getDiscountDesc());
				saveDiscounts.setCurrency(coverReq.getCurrency());
				saveDiscounts.setExchangeRate(coverReq.getExchangeRate()==null?null : coverReq.getExchangeRate());
				saveDiscounts.setCompanyId(primaryKeys.get("InsuranceId").toString());
				saveDiscounts.setProductId(Integer.valueOf(primaryKeys.get("ProductId").toString()));
				saveDiscounts.setSectionId(Integer.valueOf(primaryKeys.get("SectionId").toString()));
				saveDiscounts.setSubCoverYn( primaryKeys.get("SubCoverYn").toString());
				saveDiscounts.setVehicleId(Integer.valueOf(primaryKeys.get("VehId").toString()));	
				saveDiscounts.setCdRefno( primaryKeys.get("CdRefNo").toString());
				saveDiscounts.setVdRefno( primaryKeys.get("VdRefNo").toString());
				saveDiscounts.setMsRefno( primaryKeys.get("MsRefNo").toString());	
				saveDiscounts.setEntryDate(new Date());			
				saveDiscounts.setCreatedBy(primaryKeys.get("CreatedBy").toString());
				saveDiscounts.setSubCoverId(StringUtils.isBlank(coverReq.getSubCoverId()) ?0 : Integer.valueOf(coverReq.getSubCoverId()) );
				saveDiscounts.setStatus(coverReq.getStatus());
				saveDiscounts.setCoverageType(StringUtils.isBlank(disc.getCoverAgeType())?"D":disc.getCoverAgeType());
				saveDiscounts.setMinimumPremium(disc.getMaxAmount()==null ? null : new BigDecimal(df.format(disc.getMaxAmount())));
				saveDiscounts.setSumInsured(null);
				saveDiscounts.setRate(disc.getDiscountRate()==null ? null :new BigDecimal(disc.getDiscountRate()));
				saveDiscounts.setPremiumAfterDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
				saveDiscounts.setPremiumBeforeDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
				saveDiscounts.setPremiumExcludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
				saveDiscounts.setPremiumIncludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
				saveDiscounts.setDependentCoverYn("N");
				saveDiscounts.setDependentCoverId(null);
				saveDiscounts.setFactorTypeId(StringUtils.isBlank(disc.getFactorTypeId())?null :new BigDecimal(disc.getFactorTypeId()) );
				saveDiscounts.setIsSelected(coverReq.getIsselected() );
				saveDiscounts.setCalcType(coverReq.getCalcType());
				saveDiscounts.setTaxId(0);
				saveDiscounts.setDiscountCoverId(StringUtils.isBlank(disc.getDiscountforId())?0:Integer.parseInt(disc.getDiscountforId()));
				saveDiscounts.setEndtCount(BigDecimal.ZERO );
				saveDiscounts.setCoverPeriodFrom(coverReq.getEffectiveDate());
				saveDiscounts.setCoverPeriodTo(coverReq.getPolicyEndDate());
				saveDiscounts.setMinimumRate(disc.getMinrate()==null ? BigDecimal.ZERO:new BigDecimal(disc.getMinrate()));	
				saveDiscounts.setNoOfDays(new BigDecimal(diff));
				
					
				saveDiscounts.setActualRate(disc.getDiscountRate()==null ? null :new BigDecimal(disc.getDiscountRate()));
				
				//repository.saveAndFlush(saveDiscounts);
				if(!(saveDiscounts.getDiscLoadId()==90002 && saveDiscounts.getPremiumExcludedTaxFc().compareTo(BigDecimal.ZERO)==0) )
					saveDiscountList.add(saveDiscounts);
				
			}
			repository.saveAllAndFlush(saveDiscountList);
			res = "Success" ;
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			res = "Failed";
			return res;
			
		}return res;
	}
	
	@Override
	public List<EservieMotorDetailsViewRes>  getFactorRateRequestDetails(FactorRateDetailsGetReq req,String token) {
		List<EservieMotorDetailsViewRes>  resList = new ArrayList<EservieMotorDetailsViewRes>();
		try {
			// Find Risk Datas
			resList = getRiskDetails(req);
			
			// Find Covers
			List<FactorRateRequestDetails> findCovers = repository.findByRequestReferenceNoOrderByVehicleIdAsc(req.getRequestReferenceNo());
			
			
			// Master Referals
			List<MasterReferralDetails> findMasterRefrals = masReferralRepo.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			// Uw Referals
			List<UwQuestionsDetails>   findUwReferals = uwReferalRepo.findByRequestReferenceNo(req.getRequestReferenceNo())	;
			
			//Response 
			for (EservieMotorDetailsViewRes res : resList ) {
			
				// Set Covers
				List<FactorRateRequestDetails> filterVehicleCovers =  findCovers.stream().filter( o -> o.getVehicleId().equals(Integer.valueOf(res.getVehicleId())) &&
						o.getCompanyId().equals(res.getInsuranceId()) && o.getProductId().toString().equals(res.getProductId()) && o.getSectionId().toString().equals(res.getSectionId())  && o.getLocationId().toString().equals(res.getLocationId()) ).collect(Collectors.toList());
				
				Map<Integer,List<FactorRateRequestDetails>> groupByCover = filterVehicleCovers.stream().collect(Collectors.groupingBy(FactorRateRequestDetails :: getCoverId));			
				List<Cover> coverListRes = 	getCoversList(groupByCover);
				coverListRes.forEach(cov ->  cov.setSectionName(res.getSectionName())) ;
				
				// Set Master Referals
				List<MasterReferralDetails> filterMasterReferals = findMasterRefrals.stream().filter( o -> o.getRiskId().equals(Integer.valueOf(res.getVehicleId())) &&
						o.getCompanyId().equals(res.getInsuranceId()) && o.getProductId().toString().equals(res.getProductId()) && o.getSectionId().toString().equals(res.getSectionId()) ).collect(Collectors.toList());
				
				List<MasterReferal> masterreferrals = new ArrayList<MasterReferal>();
				filterMasterReferals.forEach(ref ->  {
					MasterReferal mar = new MasterReferal();
					mar.setApiInfo(ref.getApiInfo());
					mar.setIsreferral(true);
					mar.setReferralDesc(ref.getReferralDesc())	;
					masterreferrals.add(mar) ;
				}) ;
				
				// Set Uw Referal
				List<UwQuestionsDetails> filterUwReferals = findUwReferals.stream().filter( o -> o.getVehicleId().equals(Integer.valueOf(res.getVehicleId())) && o.getCompanyId().equals(res.getInsuranceId()) 
						&& o.getProductId().toString().equals(res.getProductId()) && o.getIsReferral()!=null && o.getIsReferral().equalsIgnoreCase("Y") ).collect(Collectors.toList());
				
				List<UWReferrals> uwReferals = new ArrayList<UWReferrals>();
				filterUwReferals.forEach(ref ->  { 
					UWReferrals uw = new UWReferrals();
					uw.setQuestionType(ref.getQuestionType());
					uw.setUwQuestionDesc(ref.getUwQuestionDesc());
					uw.setUwQuestionId(ref.getUwQuestionId());
					uw.setValue(ref.getValue());
					uwReferals.add(uw) ;
				}) ;
				
				// Set Response 
				res.setCdRefNo(filterVehicleCovers.size() > 0 ? filterVehicleCovers.get(0).getCdRefno() : "");
				res.setMsrefno(filterVehicleCovers.size() > 0 ?filterVehicleCovers.get(0).getMsRefno(): "");
				res.setVdRefNo(filterVehicleCovers.size() > 0 ?filterVehicleCovers.get(0).getVdRefno(): "");
				res.setCoverList(coverListRes);
				res.setUwList(uwReferals);
				res.setReferals(masterreferrals);
//				res.setVehicleId(res.getOriginalRiskId() != null ? res.getOriginalRiskId() :  res.getVehicleId() );			
				res.setVehicleId(res.getVehicleId() == null ? "" :  res.getVehicleId() );
				// Emi Details 
				List<HomePositionMaster> homeData  =  homeRepo.findByRequestReferenceNo(req.getRequestReferenceNo());
				if(homeData!=null && homeData.size()>0) {
				List<EmiTransactionDetails> emiDetails = emiRepo.findByQuoteNoAndCompanyIdAndProductId(homeData.get(0).getQuoteNo() ,homeData.get(0).getCompanyId() , homeData.get(0).getProductId().toString());
				if (emiDetails.size()>0 ) {
					List<EmiTransactionDetails> filterEmi =  emiDetails.stream().filter( o -> (!o.getPaymentStatus().equalsIgnoreCase("Accepted")) &&  ( o.getInstalment().equalsIgnoreCase("0") || o.getInstalment()!=null ) ).collect(Collectors.toList());
					if(filterEmi.size()>0   ) {
						res.setEmiYn("Y");
						res.setInstallmentPeriod(filterEmi.get(0).getInstallmentPeriod());
						res.setInstallmentMonth(filterEmi.get(0).getInstalment() );
						res.setDueAmount(filterEmi.get(0).getDueAmount()==null?"":new BigDecimal(filterEmi.get(0).getDueAmount()).toPlainString());
					}
				}
				}
				

			}
			
			
			
			
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return resList;
	}
	
	

	 

	public  List<EservieMotorDetailsViewRes> getRiskDetails(FactorRateDetailsGetReq req) {
		 List<EservieMotorDetailsViewRes> viewDetailsList  = new ArrayList<EservieMotorDetailsViewRes>() ;
		try {
			List<EserviceMotorDetails>    motorDatas = eserMotorRepo.findByRequestReferenceNoOrderBySectionNameAsc(req.getRequestReferenceNo());
			EserviceTravelDetails    travelDatas = eserTraRepo.findByRequestReferenceNo(req.getRequestReferenceNo());
			List<EserviceBuildingDetails> buildDatas = eserBuildRepo.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			List<EserviceCommonDetails> findDatas = eserCommonRepo.findByRequestReferenceNoOrderBySectionNameAsc(req.getRequestReferenceNo());
			
			String companyId = motorDatas.size() > 0 ? motorDatas.get(0).getCompanyId() :	 travelDatas!=null ? travelDatas.getCompanyId()  
					 :  buildDatas.size() > 0 ? buildDatas.get(0).getCompanyId() :  findDatas.size() > 0 ? findDatas.get(0).getCompanyId() : "" ;
			CompanyProductMaster product =  getCompanyProductMasterDropdown(companyId , req.getProductId().toString());
			
			if( product.getMotorYn().equalsIgnoreCase("H")  && req.getProductId().equalsIgnoreCase(travelProductId)) {
				viewDetailsList = getTravelDetails(req) ;
				
			} else if( product.getMotorYn().equalsIgnoreCase("M")  ) {
				viewDetailsList = getMotorDetails(req) ;
				
			}  else if(product.getMotorYn().equalsIgnoreCase("A") ) {
				viewDetailsList = getBuildingDetails(req) ;
				
			} else  {
				viewDetailsList = getCommonDetails(req) ;
			}
			
			
			
		} catch(Exception e) {
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return viewDetailsList;
	}
	
	@Autowired
	private EndtTypeMasterRepository endtTypeRepo;
	
	public  List<EservieMotorDetailsViewRes> getMotorDetails(FactorRateDetailsGetReq req   ) {
		 List<EservieMotorDetailsViewRes> motorDetailsList  = new ArrayList<EservieMotorDetailsViewRes>() ;
		 DozerBeanMapper dozerMapper = new DozerBeanMapper() ;
		try {
			// Motor Product Details
			List<EserviceMotorDetails>    motorDatas = eserMotorRepo.findByRequestReferenceNoOrderBySectionNameAsc(req.getRequestReferenceNo());
			List<EserviceSectionDetails>    sectionDatas = eserSecRepo.findByRequestReferenceNoOrderBySectionNameAsc(req.getRequestReferenceNo());
			
			for (EserviceMotorDetails mot :  motorDatas) {
				// Response 
					
				List<EserviceSectionDetails> sections=sectionDatas.stream().filter(s -> (s.getRiskId().compareTo(mot.getRiskId())==0)).collect(Collectors.toList());
				for(EserviceSectionDetails section:sections) {
					EservieMotorDetailsViewRes res = new EservieMotorDetailsViewRes(); 
					dozerMapper.map(mot,res);
						res.setInsuranceId(mot.getCompanyId());
						res.setOverallPremiumFc(mot.getOverallPremiumFc()==null?"0": mot.getOverallPremiumFc().toPlainString());
						res.setOverallPremiumLc(mot.getOverallPremiumLc()==null?"0":mot.getOverallPremiumLc().toPlainString());
						res.setActualPremiumFc(mot.getActualPremiumFc()==null?"0":mot.getActualPremiumFc().toPlainString());
						res.setActualPremiumLc(mot.getActualPremiumLc()==null?"0":mot.getActualPremiumLc().toPlainString());
						res.setVehicleId(mot.getRiskId().toString());
						res.setGroupId(1);
						res.setLocationId(section.getLocationId().toString());
						res.setGroupMember(0);
						res.setSectionId(section.getSectionId());
						res.setSectionName(section.getSectionName());	
						res.setEffectiveDate(section.getEndorsementEffdate()==null?null:section.getEndorsementEffdate() );
						res.setCommissionPercentage(mot.getCommissionPercentage()==null?"" :mot.getCommissionPercentage().toPlainString());
						res.setVatCommission(mot.getVatCommission()==null?"" :mot.getVatCommission().toPlainString());
						res.setPolicyNo(mot.getPolicyNo());
						res.setOriginalPolicyNo(mot.getOriginalPolicyNo());
						res.setSourceType(mot.getSourceType());
						res.setFinalizeYn(mot.getFinalizeYn());				
						//res.setEndorsementYn(mot.getEndorsementType()==null?"N":"Y");
						if(mot.getEndorsementType()!=null) {
							EndtTypeMaster endtmaster = ratingutil.getEndtMasterData(mot.getCompanyId(),req.getProductId(),mot.getEndorsementType().toString());
							EndtTypeMasterDto ddto=new EndtTypeMasterDto();
							dozerMapper.map(endtmaster,ddto);
							ddto.setEndorsementeffdate(mot.getEndorsementEffdate() );
							ddto.setEndorsementPolicyNo(mot.getPolicyNo());
							ddto.setPolicyNo(mot.getPolicyNo());
							res.setEndtType(ddto);
						}
						Object riskDetails = new Object();
						EserviceMotorDetailsRes  motorRes = new EserviceMotorDetailsRes();
						dozerMapper.map(mot, motorRes);
					//	motorRes.setSectionName(section.getSectionName());
						motorRes.setBorrowerTypeDesc(mot.getBorrowerTypeDesc());
						motorRes.setBankCode(mot.getBankCode());
						motorRes.setSectionId(section.getSectionId());
						if( StringUtils.isNotBlank(mot.getBankCode())) {
							List<BankMaster> bankList = getBankMasterDropdown(mot.getCompanyId() ,mot.getBranchCode() , mot.getBankCode() );
		 					if(bankList.size()> 0 ) {
		 						motorRes.setBankName(bankList.get(0).getBankFullName());
		 					}
								
						}
						
						riskDetails = motorRes ;
						res.setRiskDetails(riskDetails);
						res.setAccessoriesSumInsured(mot.getAcccessoriesSumInsured()==null?0.0:mot.getAcccessoriesSumInsured().doubleValue());
						motorDetailsList.add(res); 
				 }
				
			}
			
		} catch(Exception e) {
			log.info("Log Details" + e.getMessage());
			return null;			
		}return motorDetailsList;
	}
	
	public List<BankMaster> getBankMasterDropdown(String companyId , String branchCode , String bankCode) {
		List<BankMaster> list = new ArrayList<BankMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BankMaster> query=  cb.createQuery(BankMaster.class);
			
			// Find All
			Root<BankMaster> c = query.from(BankMaster.class);
			//Select
			query.select(c);
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<BankMaster> ocpm1 = effectiveDate.from(BankMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("bankCode"),ocpm1.get("bankCode"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			effectiveDate.where(a1,a2,a5,a6);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<BankMaster> ocpm2 = effectiveDate2.from(BankMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("bankCode"),ocpm2.get("bankCode"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,a7,a8);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5,n6);
			Predicate n13 = cb.equal(c.get("bankCode"), bankCode);
			query.where(n12,n2,n3,n4,n7,n13).orderBy(orderList);
			
			// Get Result
			TypedQuery<BankMaster> result = em.createQuery(query);
			list = result.getResultList(); 
					
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list;
	}
	
	public  List<EservieMotorDetailsViewRes> getTravelDetails(FactorRateDetailsGetReq req) {
		 List<EservieMotorDetailsViewRes> travelDetailsList  = new ArrayList<EservieMotorDetailsViewRes>() ;
		 DozerBeanMapper dozerMapper = new DozerBeanMapper();
		 try {
			List<EserviceTravelGroupDetails>    travelDatas = eserGroupRepo.findByRequestReferenceNoOrderByGroupIdAsc(req.getRequestReferenceNo());
			EserviceTravelDetails travelData = eserTraRepo.findByRequestReferenceNoOrderBySectionNameAsc(req.getRequestReferenceNo());
			for (EserviceTravelGroupDetails tra :  travelDatas) {
				
				if(!(travelData.getPlanTypeId().equals(3) && tra.getGroupId().equals(1)) ) {
					// Response 
					EservieMotorDetailsViewRes res = new EservieMotorDetailsViewRes();
					dozerMapper.map(travelData,res);
					res.setCurrency(travelData.getCurrency());
					res.setCustomerReferenceNo(travelData.getCustomerReferenceNo());
					res.setExchangeRate(travelData.getExchangeRate()==null?"":travelData.getExchangeRate().toString());
					res.setInsuranceId(tra.getCompanyId());
					res.setPolicyStartDate(travelData.getTravelStartDate());
					res.setPolicyEndDate(travelData.getTravelEndDate());
					res.setVehicleId(tra.getGroupId().toString());
					res.setHavepromocode(travelData.getHavepromocode());
					res.setPromocode(travelData.getPromocode());
					res.setGroupMember(tra.getGrouppMembers()==null?null:tra.getGrouppMembers() );
					res.setAdminRemarks(travelData.getAdminRemarks());
					res.setReferalRemarks(travelData.getReferalRemarks());
					res.setRejectReason(travelData.getRejectReason());
					res.setOverallPremiumFc(travelData.getOverallPremiumFc()==null?"0": travelData.getOverallPremiumFc().toPlainString());
					res.setOverallPremiumLc(travelData.getOverallPremiumLc()==null?"0":travelData.getOverallPremiumLc().toPlainString());
					res.setActualPremiumFc(travelData.getActualPremiumFc()==null?"0":travelData.getActualPremiumFc().toPlainString());
					res.setActualPremiumLc(travelData.getActualPremiumLc()==null?"0":travelData.getActualPremiumLc().toPlainString());
					res.setSectionId(travelData.getSectionId() );
					res.setSectionName(travelData.getSectionName());
					res.setEffectiveDate(travelData.getEndorsementEffdate()==null?null:travelData.getEndorsementEffdate() );
					res.setCommissionPercentage(travelData.getCommissionPercentage()==null?"" :travelData.getCommissionPercentage().toPlainString());
					res.setVatCommission(travelData.getVatCommission()==null?"" :travelData.getVatCommission().toPlainString());
					res.setPolicyNo(travelData.getPolicyNo());
					res.setOriginalPolicyNo(travelData.getOriginalPolicyNo());
					res.setSourceType(travelData.getSourceType());
					res.setFinalizeYn(travelData.getFinalizeYn());
					res.setLocationId("1");
					
					//res.setEndorsementYn(travelData.getEndorsementType()==null?"N":"Y");
					Object riskDetails = new Object();
					EserviceTravelGetRes  travelRes = new EserviceTravelGetRes();
					dozerMapper.map(travelData, travelRes);
					travelRes.setPolicyNo(StringUtils.isBlank(travelData.getOriginalPolicyNo()) ? travelData.getPolicyNo() : travelData.getOriginalPolicyNo() ); 
					travelRes.setTotalPassengers(tra.getGrouppMembers().toString());
					travelRes.setTravelId(tra.getGroupId().toString());
					//travelRes.setSectionName(travelData.getSectionName());
					riskDetails = travelRes ;
					res.setRiskDetails(riskDetails);
					if(travelData.getEndorsementType()!=null) {
						EndtTypeMaster endtmaster =ratingutil.getEndtMasterData(travelData.getCompanyId(),travelData.getProductId(),travelData.getEndorsementType().toString()); 

						EndtTypeMasterDto ddto=new EndtTypeMasterDto();
						dozerMapper.map(endtmaster,ddto);
						ddto.setEndorsementeffdate(travelData.getEndorsementEffdate() );
						ddto.setEndorsementPolicyNo(travelData.getPolicyNo());
						ddto.setPolicyNo(travelData.getPolicyNo());
						res.setEndtType(ddto);
					}
					
					travelDetailsList.add(res);
				}
				
			}
				
		
			
			
		} catch(Exception e) {
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return travelDetailsList;
	}
	
	public  List<EservieMotorDetailsViewRes> getBuildingDetails(FactorRateDetailsGetReq req) {
		 List<EservieMotorDetailsViewRes> viewBuildingList  = new ArrayList<EservieMotorDetailsViewRes>() ;
		 DozerBeanMapper dozerMapper = new DozerBeanMapper();
		 List<Integer> skipRiskIds = null;
		 try {
			// Building Product Details
			 			
			 
			List<EserviceSectionDetails>    sectionDatas = eserSecRepo.findByRequestReferenceNoOrderBySectionNameAsc(req.getRequestReferenceNo());
			List<EserviceBuildingDetails> buildDatas = eserBuildRepo.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			Map<String, List<EserviceSectionDetails>> sectionGroup =null;
			sectionGroup = sectionDatas.stream().filter( o -> o.getSectionId() !=null  ).collect( Collectors.groupingBy(EserviceSectionDetails :: getSectionId )) ;
			for (String sec :  sectionGroup.keySet()) {
				
				List<EserviceSectionDetails> filterData = sectionDatas.stream().filter( o ->  o.getSectionId().equalsIgnoreCase(sec) ).collect(Collectors.toList());	
				try {

					if (null != sec && StringUtils.isNotBlank(sec)
							&& StringUtils.isNotBlank(req.getRequestReferenceNo())) {

						List<EserviceBuildingDetails> building = eserBuildRepo
								.findByRequestReferenceNoAndSectionId(req.getRequestReferenceNo(), sec);

						if (null == building || building .size()<=0) {

							List<EserviceCommonDetails> commonList = eserCommonRepo.findByRequestReferenceNoAndSectionId(
									req.getRequestReferenceNo(), sec);

							if (null != commonList && !commonList.isEmpty()){
								
								for( EserviceCommonDetails  common :  commonList) {

								if (null == common.getSumInsured() && StringUtils.isNotBlank(common.getSectionId())
										&& common.getSectionId().equals("35")) {

									continue;
								} else if (null == common.getSumInsured()
										&& StringUtils.isNotBlank(common.getSectionId())
										&& common.getSectionId().equals("36")) {

									continue;
								}
							}
						}

						} else {

							if (null == building.get(0).getBuildingSuminsured()
									&& StringUtils.isNotBlank(building.get(0).getSectionId())
									&& building.get(0).getSectionId().equals("1")) {

								continue;
							} else if (StringUtils.isNotBlank(building.get(0).getSectionId())
									&& building.get(0).getSectionId().equals("47")) {
								
								skipRiskIds = building.stream()
										.filter(a -> a.getSectionId().equals("47") && a.getContentSuminsured() == null)
										.map(a -> a.getRiskId()).collect(Collectors.toList());

							}
							
//							(null == building.get(0).getContentSuminsured()
//									&& StringUtils.isNotBlank(building.get(0).getSectionId())
//									&& building.get(0).getSectionId().equals("47")) {
//								
//								
//
//								continue;
//								
//								
//							}
																				
							else if ( StringUtils.isNotBlank(building.get(0).getSectionId())
									&& building.get(0).getSectionId().equals("3")) {

								skipRiskIds = building.stream()
										.filter(a -> a.getSectionId().equals("3") && a.getAllriskSuminsured() == null)
										.map(a -> a.getRiskId()).collect(Collectors.toList());

							}
						}

					}
					
						if (null != sec && StringUtils.isNotBlank(sec)
								&& sec.equals("3")) {

							List<EserviceBuildingDetails> buildData = eserBuildRepo
									.findByRequestReferenceNoAndStatusOrderByRiskIdAsc(req.getRequestReferenceNo(),
											"Y");

							if (null != buildData && !buildData.isEmpty()) {

								List<EserviceBuildingDetails> data = buildData.stream()
										.filter(a -> a.getSectionId().equals("3")).collect(Collectors.toList());

								if (data == null || data.isEmpty()) {
									continue;
								}
							}
						}

				} catch (Exception e) {

					log.error("Exception occurs When Skip The data In View Calc" + e.getMessage());

					e.printStackTrace();

					// throw

				}

				if ( filterData.get(0).getProductType().equalsIgnoreCase("H")) {
					
					List<EserviceCommonDetails> personalDatas = eserCommonRepo.findByRequestReferenceNoAndSectionId(req.getRequestReferenceNo() , sec );
					for (EserviceCommonDetails acc : personalDatas ) {
						
						// Response 
						EservieMotorDetailsViewRes res = new EservieMotorDetailsViewRes();
						dozerMapper.map(acc,res);
						res.setInsuranceId(acc.getCompanyId());
						res.setSectionId(filterData.get(0).getSectionId());
						res.setVehicleId(acc.getRiskId().toString());
						res.setOriginalRiskId(acc.getOriginalRiskId()!= null ? acc.getOriginalRiskId().toString() :  "" );
					//	res.setVehicleId(acc.getOriginalRiskId()!= null ? acc.getOriginalRiskId().toString() :  acc.getRiskId().toString()  );
						
						if (StringUtils.isNotBlank(acc.getOccupationDesc()))
							res.setSectionName(filterData.get(0).getSectionName() + "~" + acc.getOccupationDesc());
						else if (StringUtils.isNotBlank(acc.getPersonalLiabilityOccupation()))
							res.setSectionName(filterData.get(0).getSectionName() + "~" + acc.getPersonalLiabilityOccupation());
						else
							res.setSectionName(filterData.get(0).getSectionName());
						
						res.setGroupId(acc.getRiskId()==null?null:acc.getRiskId());
						res.setOverallPremiumFc(acc.getOverallPremiumFc()==null?"0": acc.getOverallPremiumFc().toPlainString());
						res.setOverallPremiumLc(acc.getOverallPremiumLc()==null?"0":acc.getOverallPremiumLc().toPlainString());
						res.setActualPremiumFc(acc.getActualPremiumFc()==null?"0":acc.getActualPremiumFc().toPlainString());
						res.setActualPremiumLc(acc.getActualPremiumLc()==null?"0":acc.getActualPremiumLc().toPlainString());
						res.setEffectiveDate(acc.getEndorsementEffdate()==null?null:acc.getEndorsementEffdate() );
						res.setCommissionPercentage(acc.getCommissionPercentage()==null?"" :acc.getCommissionPercentage().toPlainString());
						res.setVatCommission(acc.getVatCommission()==null?"" :acc.getVatCommission().toPlainString());
						res.setPolicyNo(acc.getPolicyNo());
						res.setOriginalPolicyNo(acc.getOriginalPolicyNo());
						res.setSourceType(acc.getSourceType());
						res.setFinalizeYn(acc.getFinalizeYn());
						BuildingDetails buildingList =new BuildingDetails();
						buildingList=BuildingRepo.findByRequestReferenceNoAndRiskIdAndSectionId(acc.getRequestReferenceNo(),acc.getOriginalRiskId(),"1");
						String LocationName="";
						if(buildingList!=null) {
							LocationName=buildingList.getLocationName();
						}else {
							LocationName=acc.getLocationName();
						}
						res.setLocationId(acc.getLocationId()==null?"" :acc.getLocationId().toString());
						res.setLocationName(LocationName);
						Object riskDetails = new Object();
						EserviceBuildingsDetailsRes  buildRes = new EserviceBuildingsDetailsRes();
						dozerMapper.map(acc, buildRes);
						buildRes.setPolicyNo(StringUtils.isBlank(acc.getOriginalPolicyNo()) ? acc.getPolicyNo() : acc.getOriginalPolicyNo() );
						buildRes.setLocationName(LocationName);
						//	buildRes.setSectionName(sec.getSectionDesc());
						riskDetails = buildRes ;
						res.setRiskDetails(riskDetails); 
						//res.setEndorsementYn(acc.getEndorsementType()==null?"N":"Y");
						if(acc.getEndorsementType()!=null) {
							EndtTypeMaster endtmaster = ratingutil.getEndtMasterData(acc.getCompanyId(),acc.getProductId(),acc.getEndorsementType().toString());
									/*endtTypeRepo.findByCompanyIdAndProductIdAndStatusAndEndtTypeIdAndEffectiveDateStartLessThanEqualAndEffectiveDateEndGreaterThanEqual(
									acc.getCompanyId(),Integer.parseInt(acc.getProductId()),"Y",acc.getEndorsementType(),new Date(),new Date());*/
							EndtTypeMasterDto ddto=new EndtTypeMasterDto();
							dozerMapper.map(endtmaster,ddto);
							ddto.setEndorsementeffdate(acc.getEndorsementEffdate() );
							ddto.setEndorsementPolicyNo(acc.getPolicyNo());
							ddto.setPolicyNo(acc.getPolicyNo());
							res.setEndtType(ddto);
						}
						viewBuildingList.add(res);
					}
					
				} else {
					   List<EserviceBuildingDetails> buildData1 = buildDatas.stream().filter( o ->o.getSectionId().equalsIgnoreCase(filterData.get(0).getSectionId())).collect(Collectors.toList());
					   for(EserviceBuildingDetails buildData :buildData1 ) {
						   
							if (buildData != null && StringUtils.isNotBlank(buildData.getSectionId())
									&& (buildData.getSectionId().equals("47") ||  buildData.getSectionId().equals("3") )  && null != buildData.getRiskId()
									&& skipRiskIds != null
									&& skipRiskIds.stream().anyMatch(a -> buildData.getRiskId() == a)) {

								continue;
							}
							   
						   // Response 
						   
						EservieMotorDetailsViewRes res = new EservieMotorDetailsViewRes();
						dozerMapper.map(buildData,res);
						res.setInsuranceId(buildData.getCompanyId());
						res.setSectionId(filterData.get(0).getSectionId());
						res.setVehicleId(buildData.getRiskId().toString());
//						res.setVehicleId(sec.getRiskId().toString());
						res.setOverallPremiumFc(buildData.getOverallPremiumFc()==null?"0": buildData.getOverallPremiumFc().toPlainString());
						res.setOverallPremiumLc(buildData.getOverallPremiumLc()==null?"0":buildData.getOverallPremiumLc().toPlainString());
						res.setActualPremiumFc(buildData.getActualPremiumFc()==null?"0":buildData.getActualPremiumFc().toPlainString());
						res.setActualPremiumLc(buildData.getActualPremiumLc()==null?"0":buildData.getActualPremiumLc().toPlainString());
						res.setHavepromocode(buildData.getHavepromocode());
						res.setPromocode(buildData.getPromocode());
						res.setSectionName( filterData.get(0).getSectionName() );
						res.setGroupId(buildData.getRiskId()==null?null:buildData.getRiskId());
						res.setEffectiveDate(buildData.getEndorsementEffdate()==null?null:buildData.getEndorsementEffdate() );
						res.setCommissionPercentage(buildData.getCommissionPercentage()==null?"" :buildData.getCommissionPercentage().toPlainString());
						res.setVatCommission(buildData.getVatCommission()==null?"" :buildData.getVatCommission().toPlainString());
						res.setPolicyNo(buildData.getPolicyNo());
						res.setOriginalPolicyNo(buildData.getOriginalPolicyNo());
						res.setSourceType(buildData.getSourceType());
						BuildingDetails buildingList =new BuildingDetails();
						buildingList=BuildingRepo.findByRequestReferenceNoAndRiskIdAndSectionId(buildData.getRequestReferenceNo(),buildData.getRiskId(),"1");
						String LocationName="";
						if(buildingList!=null) {
							LocationName=buildingList.getLocationName();
						}else {
							LocationName=buildData.getLocationName();
						}
						res.setLocationId(buildData.getLocationId()==null?"" :buildData.getLocationId().toString());
						res.setLocationName(LocationName);
						Object riskDetails = new Object();
						EserviceBuildingsDetailsRes  buildRes = new EserviceBuildingsDetailsRes();
						dozerMapper.map(buildData, buildRes);
						buildRes.setPolicyNo(StringUtils.isBlank(buildData.getOriginalPolicyNo()) ? buildData.getPolicyNo() : buildData.getOriginalPolicyNo() ); 
					//	buildRes.setSectionName(sec.getSectionDesc());
						buildRes.setLocationName(LocationName);
						riskDetails = buildRes ;
						res.setRiskDetails(riskDetails); 
						if(buildData.getEndorsementType()!=null) {
							EndtTypeMaster endtmaster = ratingutil.getEndtMasterData(buildData.getCompanyId(),buildData.getProductId(),buildData.getEndorsementType().toString());							 
							EndtTypeMasterDto ddto=new EndtTypeMasterDto();
							dozerMapper.map(endtmaster,ddto);
							ddto.setEndorsementeffdate(buildData.getEndorsementEffdate() );
							ddto.setEndorsementPolicyNo(buildData.getPolicyNo());
							ddto.setPolicyNo(buildData.getPolicyNo());
							res.setEndtType(ddto);
						}
						viewBuildingList.add(res);
					   }
					}
			}	
	
		} catch(Exception e) {
			log.info("Log Details" + e.getMessage());
			e.printStackTrace();
			return null;
			
		}return viewBuildingList;
	}
	
	public  List<EservieMotorDetailsViewRes> getCommonDetails(FactorRateDetailsGetReq req) {
		 List<EservieMotorDetailsViewRes> viewCommonList  = new ArrayList<EservieMotorDetailsViewRes>() ;
		 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		 try {
			List<EserviceCommonDetails> findDatas = eserCommonRepo.findByRequestReferenceNoOrderBySectionNameAsc(req.getRequestReferenceNo());
			
			for (EserviceCommonDetails comData : findDatas ) {
				
				// Response 
				EservieMotorDetailsViewRes res = new EservieMotorDetailsViewRes();
				dozerMapper.map(comData,res);
				
				res.setInsuranceId(comData.getCompanyId());
//				res.setVehicleId(comData.getRiskId().toString())
				res.setVehicleId(comData.getRiskId().toString());
				res.setGroupId(1);
				res.setGroupMember(0);
				res.setOverallPremiumFc(comData.getOverallPremiumFc()==null?"0": comData.getOverallPremiumFc().toPlainString());
				res.setOverallPremiumLc(comData.getOverallPremiumLc()==null?"0":comData.getOverallPremiumLc().toPlainString());
				res.setActualPremiumFc(comData.getActualPremiumFc()==null?"0":comData.getActualPremiumFc().toPlainString());
				res.setActualPremiumLc(comData.getActualPremiumLc()==null?"0":comData.getActualPremiumLc().toPlainString());
				res.setSectionId(comData.getSectionId() );
				res.setSectionName( StringUtils.isNotBlank(comData.getOccupationDesc()) ? comData.getOccupationDesc() :  comData.getSectionName()  ) ;
				res.setEffectiveDate(comData.getEndorsementEffdate()==null?null:comData.getEndorsementEffdate() );
				res.setCommissionPercentage(comData.getCommissionPercentage()==null?"" :comData.getCommissionPercentage().toPlainString());
				res.setVatCommission(comData.getVatCommission()==null?"" :comData.getVatCommission().toPlainString());
				res.setPolicyNo(comData.getPolicyNo());
				res.setOriginalPolicyNo(comData.getOriginalPolicyNo());
				res.setSourceType(comData.getSourceType());
				res.setFinalizeYn(comData.getFinalizeYn());	
				res.setLocationId(comData.getLocationId()==null?"1":comData.getLocationId().toString());
				res.setLocationName(StringUtil.isBlank(comData.getLocationName())?"":comData.getLocationName());
			
				//res.setEndorsementYn(comData.getEndorsementType()==null?"N":"Y");
				Object riskDetails = new Object();
				EserviceCommonGetRes comRes = new EserviceCommonGetRes();
				dozerMapper.map(comData, comRes);
				comRes.setPolicyNo(StringUtils.isBlank(comData.getOriginalPolicyNo()) ? comData.getPolicyNo() : comData.getOriginalPolicyNo() );
				comRes.setOccupationTypeDesc(comData.getOccupationDesc());	//		comRes.setSectionName(comData.getSectionDesc());
				riskDetails = comRes ;
				res.setRiskDetails(riskDetails);	
				viewCommonList.add(res);
				if(comData.getEndorsementType()!=null) {
					EndtTypeMaster endtmaster =  ratingutil.getEndtMasterData(comData.getCompanyId(),comData.getProductId(),comData.getEndorsementType().toString());
							/*endtTypeRepo.findByCompanyIdAndProductIdAndStatusAndEndtTypeIdAndEffectiveDateStartLessThanEqualAndEffectiveDateEndGreaterThanEqual(
							comData.getCompanyId(),Integer.parseInt(comData.getProductId()),"Y",comData.getEndorsementType(),new Date(),new Date());*/
					EndtTypeMasterDto ddto=new EndtTypeMasterDto();
					dozerMapper.map(endtmaster,ddto);
					ddto.setEndorsementeffdate(comData.getEndorsementEffdate() );
					ddto.setEndorsementPolicyNo(comData.getPolicyNo());
					ddto.setPolicyNo(comData.getPolicyNo());
					res.setEndtType(ddto);
				}
			}
			
		} catch(Exception e) {
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return viewCommonList;
	}
	
	public synchronized List<Cover> getCoversList(Map<Integer,List<FactorRateRequestDetails>> groupByCover) {
		List<Cover>  coverListRes = new ArrayList<Cover>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			for ( Integer coverId : groupByCover.keySet() ) {
				List<FactorRateRequestDetails>  covers  = groupByCover.get(coverId);
				Cover coverRes = new Cover();
				
				if (covers.get(0).getSubCoverYn().equalsIgnoreCase("N") ) {
					// Get Covers
					List<FactorRateRequestDetails> filterCover = covers.stream().filter( o -> o.getDiscLoadId().equals(0) && o.getTaxId().equals(0) ).collect(Collectors.toList());
					coverRes = dozerMapper.map(filterCover.get(0), Cover.class);
					coverRes.setLocationId(filterCover.get(0).getLocationId().toString());
					coverRes.setIsSubCover(filterCover.get(0).getSubCoverYn());
					coverRes.setDependentCoveryn(filterCover.get(0).getDependentCoverYn());
					coverRes.setDependentCoverId(filterCover.get(0).getDependentCoverId()==null?"":filterCover.get(0).getDependentCoverId().toString());
					coverRes.setIsselected(filterCover.get(0).getIsSelected());
					coverRes.setDependentCoveryn(filterCover.get(0).getDependentCoverYn());
					coverRes.setDependentCoverId(filterCover.get(0).getDependentCoverId()==null?"": filterCover.get(0).getDependentCoverId().toString());
					coverRes.setSubCoverId(null);
					coverRes.setSubCoverDesc(null);
					coverRes.setSubCoverName(null);
					coverRes.setSectionId(filterCover.get(0).getSectionId()==null?"":filterCover.get(0).getSectionId().toString());
					coverRes.setPremiumAfterDiscount(filterCover.get(0).getPremiumAfterDiscountFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumAfterDiscountFc());
					coverRes.setPremiumBeforeDiscount(filterCover.get(0).getPremiumBeforeDiscountFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumBeforeDiscountFc());
					coverRes.setPremiumExcluedTax(filterCover.get(0).getPremiumExcludedTaxFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumExcludedTaxFc());
					coverRes.setPremiumIncludedTax(filterCover.get(0).getPremiumIncludedTaxFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumIncludedTaxFc());
					coverRes.setPremiumAfterDiscountLC(filterCover.get(0).getPremiumAfterDiscountLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumAfterDiscountLc());
					coverRes.setPremiumBeforeDiscountLC(filterCover.get(0).getPremiumBeforeDiscountLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumBeforeDiscountLc());
					coverRes.setPremiumExcluedTaxLC(filterCover.get(0).getPremiumExcludedTaxLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumExcludedTaxLc());
					coverRes.setPremiumIncludedTaxLC(filterCover.get(0).getPremiumIncludedTaxLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumIncludedTaxLc());
					coverRes.setExchangeRate(filterCover.get(0).getExchangeRate());	
					coverRes.setCdRefNo(filterCover.get(0).getCdRefno());
					coverRes.setCreatedBy(filterCover.get(0).getCreatedBy());
					coverRes.setInsuranceId(filterCover.get(0).getCompanyId());
					coverRes.setMsrefno(filterCover.get(0).getMsRefno());
					coverRes.setProductId(filterCover.get(0).getProductId().toString() );
					coverRes.setRequestReferenceNo(filterCover.get(0).getRequestReferenceNo());
					coverRes.setSectionId(filterCover.get(0).getSectionId()==null?"" :filterCover.get(0).getSectionId().toString());
					coverRes.setVdRefNo(filterCover.get(0).getVdRefno());
					coverRes.setVehicleId(filterCover.get(0).getVehicleId()==null?"" :filterCover.get(0).getVehicleId().toString());
					coverRes.setMultiSelectYn(filterCover.get(0).getMultiSelectYn()==null?"":filterCover.get(0).getMultiSelectYn());
					coverRes.setDiffPremiumIncludedTax(filterCover.get(0).getDiffPremiumIncludedTaxFc());
					coverRes.setEffectiveDate(filterCover.get(0).getCoverPeriodFrom());
					coverRes.setPolicyEndDate(filterCover.get(0).getCoverPeriodTo());
					coverRes.setProRata(filterCover.get(0).getProRataPercent());
					coverRes.setProRataYn(filterCover.get(0).getProRataYn());
					coverRes.setTiraSumInsured(filterCover.get(0).getRegulSumInsured()==null?BigDecimal.ZERO:filterCover.get(0).getRegulSumInsured());
					coverRes.setTiraRate(filterCover.get(0).getRegulatoryRate()==null?0D:filterCover.get(0).getRegulatoryRate().doubleValue());
					coverRes.setReferalDescription(filterCover.get(0).getReferralDescription() ==null?null:filterCover.get(0).getReferralDescription());
					coverRes.setCoverNameLocal(filterCover.get(0).getCoverNameLocal());
					coverRes.setCoverDescLocal(filterCover.get(0).getCoverDescLocal());
					coverRes.setSubCoverDescLocal(null);
					coverRes.setSubCoverNameLocal(null);
					coverRes.setMinrate(filterCover.get(0).getMinimumRate()==null?0D:filterCover.get(0).getMinimumRate().doubleValue());
					coverRes.setActualrate(filterCover.get(0).getActualRate()==null?0D:filterCover.get(0).getActualRate().doubleValue());;
					coverRes.setMinimumRateYn(filterCover.get(0).getMinimumRateYn()==null?"":filterCover.get(0).getMinimumRateYn());
					// Discount Covers Or Promo Covers
					List<FactorRateRequestDetails> filterDiscountCover = covers.stream().filter( o -> ( ! o.getDiscLoadId().equals(0)) && (   o.getCoverageType().equalsIgnoreCase("D") || o.getCoverageType().equalsIgnoreCase("P") ) ).collect(Collectors.toList());
					
					if ( filterDiscountCover.size() > 0 ) {
						 List<Discount> discounts =  getDiscountRates(filterDiscountCover);
						 coverRes.setDiscounts(discounts);	
					}
					
					// Tax Covers
					List<FactorRateRequestDetails> filterTaxCover = covers.stream().filter( o -> 
					(! o.getTaxId().equals(0)) && o.getDiscLoadId()==0 &&   o.getCoverageType().equalsIgnoreCase("T")).collect(Collectors.toList());
					
					if( filterTaxCover.size() > 0 ) {
						 List<Tax> taxes = getTaxRates(filterTaxCover) ;
						 coverRes.setTaxes(taxes);	
					}

					//Endorsement
					List<FactorRateRequestDetails> filterEndtCover = covers.stream().filter(o -> (o.getDiscLoadId()!=0 &&   o.getCoverageType().equalsIgnoreCase("E"))).collect(Collectors.toList());
					
					if(filterEndtCover.size() > 0 ) {
						List<Endorsement> endorsment  =   getEndorsementRates(filterEndtCover,covers);
						coverRes.setEndorsements(endorsment);
					}
						
					
					
					// Loginds Covers
					List<FactorRateRequestDetails> filterLodingCover = covers.stream().filter( o -> ( ! o.getDiscLoadId().equals(0)) &&  o.getCoverageType().equalsIgnoreCase("L") ).collect(Collectors.toList());
					
					if( filterLodingCover.size() > 0 ) {
						 List<Loading> lodings =  getLodingCovers(filterLodingCover) ;
						 coverRes.setLoadings(lodings);	
					}
										
				} else {
					
					// Get Sub Covers
			
					List<FactorRateRequestDetails> filterCover = covers.stream().filter( o -> o.getDiscLoadId().equals(0) && o.getTaxId().equals(0) ).collect(Collectors.toList());
					coverRes.setLocationId(filterCover.get(0).getLocationId().toString());
					coverRes.setCoverId(filterCover.get(0).getCoverId().toString());
					 coverRes.setCalcType(filterCover.get(0).getCalcType());
					 coverRes.setCoverName(filterCover.get(0).getCoverName());
					 coverRes.setCoverDesc(filterCover.get(0).getCoverDesc());
					 coverRes.setMinimumPremium(filterCover.get(0).getMinimumPremium()==null ? null : new BigDecimal(filterCover.get(0).getMinimumPremium().toString()));
					 coverRes.setIsSubCover(filterCover.get(0).getSubCoverYn());
					 coverRes.setSumInsuredLc(filterCover.get(0).getSumInsuredLc()==null ? BigDecimal.ZERO : new BigDecimal(filterCover.get(0).getSumInsuredLc().toString()));
					 coverRes.setSumInsured(filterCover.get(0).getSumInsured()==null ? BigDecimal.ZERO : new BigDecimal(filterCover.get(0).getSumInsured().toString()));
					 coverRes.setRate(filterCover.get(0).getRate()==null?null:Double.valueOf(filterCover.get(0).getRate().toString()));
					 coverRes.setPremiumAfterDiscount(filterCover.get(0).getPremiumAfterDiscountFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumAfterDiscountFc());
					coverRes.setPremiumBeforeDiscount(filterCover.get(0).getPremiumBeforeDiscountFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumBeforeDiscountFc());
					coverRes.setPremiumExcluedTax(filterCover.get(0).getPremiumExcludedTaxFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumExcludedTaxFc());
					coverRes.setPremiumIncludedTax(filterCover.get(0).getPremiumIncludedTaxFc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumIncludedTaxFc());
					coverRes.setPremiumAfterDiscountLC(filterCover.get(0).getPremiumAfterDiscountLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumAfterDiscountLc());
					coverRes.setPremiumBeforeDiscountLC(filterCover.get(0).getPremiumBeforeDiscountLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumBeforeDiscountLc());
					coverRes.setPremiumExcluedTaxLC(filterCover.get(0).getPremiumExcludedTaxLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumExcludedTaxLc());
					coverRes.setPremiumIncludedTaxLC(filterCover.get(0).getPremiumIncludedTaxLc()==null?BigDecimal.ZERO :filterCover.get(0).getPremiumIncludedTaxLc());
					coverRes.setMultiSelectYn(filterCover.get(0).getMultiSelectYn()==null?"":filterCover.get(0).getMultiSelectYn());		
					coverRes.setSectionId(filterCover.get(0).getSectionId()==null?"":filterCover.get(0).getSectionId().toString());
					coverRes.setEffectiveDate(filterCover.get(0).getCoverPeriodFrom());
					coverRes.setPolicyEndDate(filterCover.get(0).getCoverPeriodTo());
					coverRes.setProRata(filterCover.get(0).getProRataPercent());
					coverRes.setProRataYn(filterCover.get(0).getProRataYn());
					coverRes.setCoverageType(filterCover.get(0).getCoverageType());
					coverRes.setIsselected(filterCover.get(0).getIsSelected());
					coverRes.setCurrency(filterCover.get(0).getCurrency());
					
					coverRes.setCoverNameLocal(filterCover.get(0).getCoverNameLocal());
					coverRes.setCoverDescLocal(filterCover.get(0).getCoverDescLocal());
					
					
					List<Cover>  subCoverListRes = new ArrayList<Cover>();
					List<FactorRateRequestDetails> filterSubCover = covers.stream().filter( o -> o.getDiscLoadId().equals(0) && o.getTaxId().equals(0)).collect(Collectors.toList());
					for ( FactorRateRequestDetails subCovers : filterSubCover) {
						Cover subCoverRes = new Cover();
						subCoverRes = dozerMapper.map(subCovers, Cover.class);
						subCoverRes.setIsSubCover(subCovers.getSubCoverYn());
						subCoverRes.setDependentCoveryn(subCovers.getDependentCoverYn());
						subCoverRes.setDependentCoverId(subCovers.getDependentCoverId()==null?"":subCovers.getDependentCoverId().toString());
						subCoverRes.setIsselected(subCovers.getIsSelected());
						subCoverRes.setExchangeRate(subCovers.getExchangeRate());	
						subCoverRes.setSectionId(subCovers.getSectionId()==null?"":subCovers.getSectionId().toString());

						subCoverRes.setPremiumAfterDiscount(subCovers.getPremiumAfterDiscountFc());
						subCoverRes.setPremiumBeforeDiscount(subCovers.getPremiumBeforeDiscountFc());
						subCoverRes.setPremiumExcluedTax(subCovers.getPremiumExcludedTaxFc());
						subCoverRes.setPremiumIncludedTax(subCovers.getPremiumIncludedTaxFc());
						subCoverRes.setPremiumAfterDiscountLC(subCovers.getPremiumAfterDiscountLc());
						subCoverRes.setPremiumBeforeDiscountLC( subCovers.getPremiumBeforeDiscountLc());
						subCoverRes.setPremiumExcluedTaxLC(subCovers.getPremiumExcludedTaxLc());
						subCoverRes.setPremiumIncludedTaxLC(subCovers.getPremiumIncludedTaxLc());
						subCoverRes.setCdRefNo(filterSubCover.get(0).getCdRefno());
						subCoverRes.setCreatedBy(filterSubCover.get(0).getCreatedBy());
						subCoverRes.setInsuranceId(filterSubCover.get(0).getCompanyId());
						subCoverRes.setMsrefno(filterSubCover.get(0).getMsRefno());
						subCoverRes.setProductId(filterSubCover.get(0).getProductId().toString() );
						subCoverRes.setRequestReferenceNo(filterSubCover.get(0).getRequestReferenceNo());
						subCoverRes.setSectionId(filterSubCover.get(0).getSectionId()==null?"" :filterSubCover.get(0).getSectionId().toString());
						subCoverRes.setVdRefNo(filterSubCover.get(0).getVdRefno());
						subCoverRes.setVehicleId(filterSubCover.get(0).getVehicleId()==null?"" :filterSubCover.get(0).getVehicleId().toString());
						subCoverRes.setDiffPremiumIncludedTax(filterSubCover.get(0).getDiffPremiumIncludedTaxFc());
						subCoverRes.setDiffPremiumIncludedTaxLC(filterSubCover.get(0).getDiffPremiumIncludedTaxLc());
						subCoverRes.setEffectiveDate(filterSubCover.get(0).getCoverPeriodFrom());
						subCoverRes.setPolicyEndDate(filterSubCover.get(0).getCoverPeriodTo());
						subCoverRes.setProRata(filterSubCover.get(0).getProRataPercent());
						subCoverRes.setProRataYn(filterSubCover.get(0).getProRataYn());
						subCoverRes.setSubCoverDescLocal(filterSubCover.get(0).getSubCoverDescLocal());
						subCoverRes.setSubCoverNameLocal(filterSubCover.get(0).getSubCoverNameLocal());
						subCoverRes.setMinrate(filterSubCover.get(0).getMinimumRate()==null?0D:filterSubCover.get(0).getMinimumRate().doubleValue());
						subCoverRes.setActualrate(filterCover.get(0).getActualRate()==null?0D:filterCover.get(0).getActualRate().doubleValue());
						subCoverRes.setMinimumRateYn(filterCover.get(0).getMinimumRateYn()==null?"":filterCover.get(0).getMinimumRateYn());
						// Discount Covers Or Promo Covers
						List<FactorRateRequestDetails> filterDiscountCover = covers.stream().filter( o -> o.getCoverId().equals(subCovers.getCoverId()) && o.getSubCoverId().equals(subCovers.getSubCoverId()) && ( ! o.getDiscLoadId().equals(0)) && (   o.getCoverageType().equalsIgnoreCase("D") || o.getCoverageType().equalsIgnoreCase("P") ) ).collect(Collectors.toList());
						
						if ( filterDiscountCover.size() > 0 ) {
							 List<Discount> discounts =  getDiscountRates(filterDiscountCover);
							 subCoverRes.setDiscounts(discounts);	
						}
						
						// Tax Covers
						List<FactorRateRequestDetails> filterTaxCover = covers.stream().filter( o -> o.getCoverId().equals(subCovers.getCoverId()) && o.getSubCoverId().equals(subCovers.getSubCoverId()) && (! o.getTaxId().equals(0)) &&  o.getCoverageType().equalsIgnoreCase("T")).collect(Collectors.toList());
						
						if( filterTaxCover.size() > 0 ) {
							 List<Tax> taxes = getTaxRates(filterTaxCover) ;
							 subCoverRes.setTaxes(taxes);	
						}
						
						// Loginds Covers
						List<FactorRateRequestDetails> filterLodingCover = covers.stream().filter( o -> o.getCoverId().equals(subCovers.getCoverId()) && o.getSubCoverId().equals(subCovers.getSubCoverId()) &&  ( ! o.getDiscLoadId().equals(0)) &&  o.getCoverageType().equalsIgnoreCase("L") ).collect(Collectors.toList());
						
						if( filterLodingCover.size() > 0 ) {
							 List<Loading> lodings =  getLodingCovers(filterLodingCover) ;
							 subCoverRes.setLoadings(lodings);	
						}
						subCoverListRes.add(subCoverRes);
					}
					coverRes.setSubcovers(subCoverListRes);
				}
				coverListRes.add(coverRes);
			}
			
			System.out.print("cover sort");
			coverListRes.sort( Comparator.comparing(Cover ::    getSumInsured ,Comparator.nullsLast(Comparator.naturalOrder())  ).reversed() );
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return coverListRes;
	}
	
	public List<Discount> getDiscountRates(List<FactorRateRequestDetails> filterDiscountCover) {
		List<Discount> DiscountList = new  ArrayList<Discount>();
		try {
			for (FactorRateRequestDetails disc :  filterDiscountCover ) {
				Discount discount = new Discount();
				discount.setDiscountAmount(disc.getPremiumIncludedTaxFc());
				discount.setDiscountCalcType(disc.getCalcType());
				discount.setDiscountId(disc.getDiscLoadId().toString());
				discount.setDiscountDesc(disc.getCoverName());	
				discount.setDiscountRate(disc.getRate()==null?"0.0" :disc.getRate().toString());
				discount.setFactorTypeId(disc.getFactorTypeId()==null?"" : disc.getFactorTypeId().toString());
				discount.setMaxAmount(disc.getMinimumPremium());
				discount.setSubCoverId(disc.getSubCoverId().toString());
				discount.setDiscountforId(disc.getDependentCoverId()==null?null:disc.getDependentCoverId().toString());
				discount.setActualrate(disc.getActualRate()==null?0D:disc.getActualRate().doubleValue());
				discount.setMinrate(disc.getMinimumRate()==null?0D:disc.getMinimumRate().doubleValue());
				DiscountList.add(discount);
				
			}
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return DiscountList;
	}
	
	
	public List<Loading> getLodingCovers(List<FactorRateRequestDetails> filterLodingCover) {
		List<Loading> LodingList = new  ArrayList<Loading>();
		try {
			for (FactorRateRequestDetails lod :  filterLodingCover ) {
				Loading loding = new Loading();
				loding.setFactorTypeId(lod.getFactorTypeId()==null?null:lod.getFactorTypeId().toString());
				loding.setLoadingAmount(lod.getMinimumPremium());
				loding.setLoadingCalcType(lod.getCalcType());
				loding.setLoadingDesc(lod.getCoverName());
				loding.setLoadingforId(lod.getDependentCoverId()==null?null:lod.getDependentCoverId().toString());
				loding.setLoadingId(lod.getDiscLoadId()==null?null:lod.getDiscLoadId().toString());
				loding.setLoadingRate(lod.getRate()==null?null:lod.getRate().toString());
				loding.setMaxAmount(lod.getPremiumIncludedTaxFc());
				//loding.setSubCoverId(lod.getLodingSubcoverId()==null?null:lod.getLodingSubcoverId().toString());	
				loding.setActualrate(lod.getActualRate()==null?0D:lod.getActualRate().doubleValue());
				loding.setMinrate(lod.getMinimumRate()==null?0D:lod.getMinimumRate().doubleValue());
				LodingList.add(loding);
			}
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return LodingList;
	}
	
	public List<Tax> getTaxRates(List<FactorRateRequestDetails> filterTaxCover) {
		List<Tax> TaxList = new  ArrayList<Tax>();
		try {
			for (FactorRateRequestDetails tax :  filterTaxCover ) {
				Tax taxes = new Tax();
				taxes.setCalcType(tax.getTaxCalcType());
				taxes.setIsTaxExempted(tax.getIsTaxExtempted());
				taxes.setTaxAmount(tax.getTaxAmount());
				taxes.setTaxDesc(tax.getTaxDesc());
				taxes.setTaxExemptCode(tax.getTaxExemptCode());
				taxes.setTaxExemptType(tax.getTaxExemptType());
				taxes.setTaxId(tax.getTaxId()==null?null:tax.getTaxId().toString()) ;
				taxes.setTaxRate( tax.getTaxRate()==null?null : Double.valueOf(tax.getTaxRate().toString()));
				taxes.setDependentYn(tax.getDependentCoverYn());
				taxes.setMinimumTaxAmount(tax.getMinimumPremiumFc());
				taxes.setMinimumTaxAmountLc(tax.getMinimumPremium());
				taxes.setTaxAmountLc(tax.getTaxAmountLc());
				TaxList.add(taxes);
			}
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return TaxList;
	}
	
	public List<Endorsement> getEndorsementRates(List<FactorRateRequestDetails> filterEndtCover ,List<FactorRateRequestDetails> totalCovers) {
		List<Endorsement> endtList = new  ArrayList<Endorsement>();
		try {
			for (FactorRateRequestDetails t :  filterEndtCover ) {
				Endorsement d=Endorsement.builder()
						.endorsementDesc(t.getCoverName()==null?"":t.getCoverName())
						.endorsementId(t.getDiscLoadId()==null?"":t.getDiscLoadId().toString())
						.endorsementRate("F".equals(t.getCalcType()==null?"A":t.getCalcType())?0D: t.getRate()==null?0D:t.getRate().doubleValue())
						.endorsementCalcType(t.getCalcType()==null?"":t.getCalcType())
						.endorsementforId(t.getDiscountCoverId()==null?"":t.getDiscountCoverId().toString())
						.maxAmount(t.getMinimumPremium()==null?BigDecimal.ZERO:t.getMinimumPremium())
						.factorTypeId(t.getFactorTypeId()==null?"":t.getFactorTypeId().toString())
						.regulatoryCode(t.getRegulatoryCode()==null?"N/A":t.getRegulatoryCode())	
						.premiumAfterDiscount(t.getPremiumAfterDiscountFc())
						.premiumAfterDiscountLC(t.getPremiumAfterDiscountLc())
						.premiumBeforeDiscount(t.getPremiumBeforeDiscountFc())
						.premiumBeforeDiscountLC(t.getPremiumBeforeDiscountLc())
						.premiumExcluedTax(t.getPremiumExcludedTaxFc())
						.premiumExcluedTaxLC(t.getPremiumExcludedTaxLc())
						.premiumIncludedTax(t.getPremiumIncludedTaxFc())
						.premiumIncludedTaxLC(t.getPremiumIncludedTaxLc())	 
						.endtCount(t.getEndtCount())
						.proRata(t.getProRataPercent())
						.proRataYn(t.getProRataYn())
						.coverName(t.getCoverName())
						.minimumPremium(t.getMinimumPremium())				
						.minimumPremiumYn(t.getMinimumPremiumYn())
						.isSubCover("N")
						.endorsementsumInsured(t.getSumInsured())
						.endorsementsumInsuredLc(t.getSumInsuredLc())
						.subCoverDesc("")
						.subCoverName("")
						.sectionId(String.valueOf(t.getSectionId()))
						.dependentCoveryn(t.getDependentCoverYn())
						.dependentCoverId(t.getDependentCoverId()==null?"":String.valueOf(t.getDependentCoverId()))
						.coverageType("E")
						.isselected("Y")
						.userOpt("Y")
						.exchangeRate(t.getExchangeRate())
						.currency(t.getCurrency())
						.isReferral(t.getIsReferral())
						.referalDescription(t.getReferralDescription())
						.regulatoryCode(t.getRegulatoryCode())
						.tiraSumInsured(t.getRegulatorySuminsured())
						.tiraRate(t.getRegulatoryRate()==null?0D:t.getRegulatoryRate().doubleValue())
						.coverBasedOn(t.getCoverBasedOn())
						.insuranceId(t.getCompanyId())
						.productId(String.valueOf(t.getProductId()))
						.vehicleId(String.valueOf(t.getVehicleId()))
						.cdRefNo(t.getCdRefno())
						.vdRefNo(t.getVdRefno())
						.createdBy(t.getCreatedBy())
						.requestReferenceNo(t.getRequestReferenceNo())
						.multiSelectYn(t.getMultiSelectYn())
						.sectionId(String.valueOf(t.getSectionId()))
						.excessPercent(t.getExcessPercent())
						.excessAmount(t.getExcessAmount())
						.excessDesc(t.getExcessDesc())
						.effectiveDate(t.getCoverPeriodFrom())
						.policyEndDate(t.getCoverPeriodTo())
						.status("Y")
						.diffPremiumIncludedTax(t.getDiffPremiumIncludedTaxFc())
						.coverageLimit(t.getCoverageLimit())
						.diffPremiumIncludedTaxLC(t.getDiffPremiumIncludedTaxLc())
						.build();
				endtList.add(d);
			}
			
			
			 TaxFromFactor endttaxUtil=new TaxFromFactor();
				if(endtList!=null && endtList.size()>0) {
					for (Endorsement e : endtList) {
						
						// only for endrose we cannt use cover objs tax cover wontbe list.
						 List<Tax> txx = totalCovers.stream().filter(r -> (r.getDiscLoadId()==Integer.parseInt(e.getEndorsementId())
								 && r.getCoverId()==Integer.parseInt(e.getEndorsementforId())
								 && r.getEndtCount().intValue()==e.getEndtCount().intValue()
								 && r.getTaxId() != Integer.parseInt(e.getEndorsementId())
								 )
								 
								  ).map(endttaxUtil).filter(dx->(dx!=null && !"0".equals(dx.getTaxId())) ).collect(Collectors.toList());
						 e.setTaxes(txx);
						 
						 List<Tax> endtfees = totalCovers.stream().filter(r -> (r.getDiscLoadId()==Integer.parseInt(e.getEndorsementId())
								 && r.getCoverId()==Integer.parseInt(e.getEndorsementforId())
								 && r.getEndtCount().intValue()==e.getEndtCount().intValue()
								 && r.getTaxId() == Integer.parseInt(e.getEndorsementId())
								 )
								 
								  ).map(endttaxUtil).filter(dx->(dx!=null && !"0".equals(dx.getTaxId())) ).collect(Collectors.toList());
						 	e.setEndtFees(endtfees);	
						 
					}
				}
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return endtList;
	}


	@Override
	public List<Error> validateFoctorPremiumDetails(UpdateFactorRateReq req) {
		List<Error> errors = new ArrayList<Error>();
		try {
			if ( req.getCoverIdList()==null  || req.getCoverIdList().size()<=0 ) {
				errors.add(new Error("01","CoverList","Please Enter Cover List")) ;				
			} else {
				for (CoverIdReq2 cov : req.getCoverIdList() ) {
					
					if (cov.getCoverId()==null   ) {
						errors.add(new Error("01","CoverIds","Please Enter Cover Id")) ;				
					}
					if (StringUtils.isBlank(cov.getSubCoverYn())  ) {
						errors.add(new Error("01","SubCoverYn","Please Select SubCover Yes/No")) ;				
					} else if (! (cov.getSubCoverYn().equalsIgnoreCase("Y") || cov.getSubCoverYn().equalsIgnoreCase("N") ) ) {
						errors.add(new Error("01","SubCoverYn","Please Select SubCover Yes/No")) ;
					} else if( cov.getSubCoverYn().equalsIgnoreCase("Y") && cov.getSubCoverId() ==null ) {
						errors.add(new Error("01","SubCoverYn","Please Enter SubCover Id")) ;
					}
					
//					if (cov.getRate()=null   ) {
//						errors.add(new Error("01","MinimumPremium","Please Enter MimimumPremium")) ;				
//					} else if (! cov.getRate().matches("[0-9.]+")   ) {
//						errors.add(new Error("01","MinimumPremium","Please Enter Valid MimimumPremium")) ;				
//					} else if ( getRate().equalsIgnoreCase("0")   ) {
//						errors.add(new Error("01","MinimumPremium","Please Enter Valid Number In MimimumPremium")) ;				
//					}
					
					if (cov.getRate()==null  ) {
						errors.add(new Error("01","Rate","Please Enter Rate")) ;				
					} else if (! cov.getRate().matches("[0-9.]+")   ) {
						errors.add(new Error("01","Rate","Please Enter Valid Rate")) ;				
					} else if ( cov.getRate().equalsIgnoreCase("0") &&  cov.getCoverageType().equalsIgnoreCase("D")    ) {
						errors.add(new Error("01","Rate","Please Enter Valid Number In Rate")) ;				
					}else if( cov.getMinrate()>=Double.parseDouble(cov.getRate())  && Double.parseDouble(cov.getRate())<=cov.getActualrate() ) {
						errors.add(new Error("01","Rate","Please Enter Rate between "+cov.getMinrate()+"& "+cov.getActualrate())) ;
					}
					
					if(StringUtils.isNotBlank(cov.getUserOpt())  && cov.getUserOpt().equalsIgnoreCase("Y")  ) {
						if (StringUtils.isBlank(cov.getExcessAmount() ) ) {
							errors.add(new Error("01"," Excess Amount","Please Enter Excess Amount")) ;				
						} else if (! cov.getExcessAmount().matches("[0-9.]+")   ) {
							errors.add(new Error("01"," Excess Amount","Please Enter Valid Excess Amount")) ;				
						}
						
						if (StringUtils.isBlank(cov.getExcessPercent() ) ) {
							errors.add(new Error("01"," Excess Percent","Please Enter Excess Percent")) ;				
						} else if (! cov.getExcessPercent().matches("[0-9.]+")   ) {
							errors.add(new Error("01"," Excess Percent","Please Enter Valid Excess Percent")) ;				
						} else if (Double.valueOf(cov.getExcessPercent())> 100 ) {
							errors.add(new Error("01"," Excess Percent","Excess Percent More Then 100 Percent Not Allowed")) ;				
						}
						
						
						if (StringUtils.isBlank(cov.getExcessDesc() ) ) {
							errors.add(new Error("01"," Excess Desc","Please Enter  Excess Description")) ;				
						} else if ( cov.getExcessDesc().length() > 500  ) {
							errors.add(new Error("01"," Excess Desc"," Excess Description Must Be Under 500 Charaters Only Allowed")) ;				
						}
					}
					
				}
			}
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return errors;
	}

	@Autowired
	private PolicyCoverDataRepository coverDataRepo;
	
	@Override
	public synchronized UpdateCoverRes updateFactorRatePremiumDetails(UpdateFactorRateReq req) {
		UpdateCoverRes res = new UpdateCoverRes();
		try {
			String agencyCode = "";
			String branchCode = "";
			String currencyId = "" ;
			String endtTypdId="";
			String endtPrevQuoteNo="";
			String originalPolicyNo="";
			BigDecimal endtCount=BigDecimal.ZERO;
			CalcEngine engine= new CalcEngine();
			
			// delete unselected cover block start
			String companyId =req.getCompanyId();
			Integer productId =Integer.valueOf(req.getProductId());
			String requestRef =req.getRequestReferenceNo();
			Integer sectionId =Integer.valueOf(req.getSectionId());
			Integer vehicleId =req.getVehicleId();
			Integer LocationId=Integer.valueOf(req.getLocationId());
			List<CoverIdReq2> coverList =req.getCoverIdList().isEmpty() || req.getCoverIdList().size()==0 ?Collections.emptyList():req.getCoverIdList();
			if(!coverList.isEmpty()) {
				List<Integer> selectedCoverId =coverList.stream()
						.map(c ->c.getCoverId())
						.collect(Collectors.toList());
				
//				repository.deleteByCompanyIdAndProductIdAndRequestReferenceNoAndVehicleIdAndSectionIdAndCoverIdNotIn(
//						companyId, Integer.valueOf(productId), requestRef, vehicleId, sectionId, selectedCoverId);
				List<FactorRateRequestDetails> unOptCovs = 	repository.findByCompanyIdAndProductIdAndRequestReferenceNoAndVehicleIdAndSectionIdAndLocationIdAndCoverIdNotIn(
															companyId, Integer.valueOf(productId), requestRef, vehicleId, sectionId,  LocationId,selectedCoverId );
				unOptCovs.forEach( o -> o.setUserOpt("N"));
				repository.saveAllAndFlush(unOptCovs);
				
			}
			//sectionids
			List<Integer> sectionid = req.getCoverIdList().stream().map(CoverIdReq2::getSectionId).filter(Objects::nonNull).map(Integer::valueOf).collect(Collectors.toList());
			// delete unselected cover block end
			
			/*
			 * List<FactorRateRequestDetails> findCovers = repository.
			 * findByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdAndLocationIdOrderByCoverIdAsc
			 * (req.getRequestReferenceNo() , req.getVehicleId() , req.getCompanyId() ,
			 * Integer.valueOf(req.getProductId()) , Integer.valueOf(req.getSectionId())
			 * ,LocationId ) ;
			 */
			List<FactorRateRequestDetails> findCovers = repository.findByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdInAndLocationIdOrderByCoverIdAsc(req.getRequestReferenceNo() , req.getVehicleId() ,
					req.getCompanyId() , Integer.valueOf(req.getProductId()) , sectionid ,LocationId ) ;	
		
			List<ProductSectionMaster> sectionList = getProductSectionDropdown(req.getCompanyId(), req.getProductId(), req.getSectionId() ) ;
			String productType  =sectionList.size()> 0 ? sectionList.get(0).getMotorYn() :  "M" ; 
			
			if(    productType.equalsIgnoreCase("M") ){
				EserviceMotorDetails  findMot = eserMotorRepo.findByRequestReferenceNoAndRiskIdAndLocationId(req.getRequestReferenceNo() , req.getVehicleId() 
						,Integer.valueOf(req.getLocationId())	) ;
				agencyCode = findMot.getAgencyCode();
				branchCode = findMot.getBranchCode();
				currencyId = findMot.getCurrency();
				endtTypdId= findMot.getEndorsementType()!=null?findMot.getEndorsementType().toString():"";
				endtCount=findMot.getEndtCount();
				endtPrevQuoteNo=findMot.getEndtPrevQuoteNo();
				originalPolicyNo=findMot.getOriginalPolicyNo();
				if(findMot.getEndorsementType() == null ) {
					engine.setEffectiveDate(findMot.getPolicyStartDate());
					engine.setPolicyEndDate(findMot.getPolicyEndDate());
				}else if(findMot.getEndorsementType() !=null) {
					engine.setEffectiveDate(findMot.getEndorsementEffdate());
					engine.setPolicyEndDate(findMot.getPolicyEndDate());
				}
				
				// Update Commission
				findMot.setCommissionPercentage(StringUtils.isNotBlank(req.getCommissionPercentage() ) ? new BigDecimal(req.getCommissionPercentage()) :  findMot.getCommissionPercentage() );
				findMot.setVatCommission(StringUtils.isNotBlank(req.getVatCommissison() ) ? new BigDecimal(req.getVatCommissison()) :  findMot.getVatCommission() );;
				eserMotorRepo.save(findMot);
				
			} else if(   productType.equalsIgnoreCase("H") &&  req.getProductId().equalsIgnoreCase(travelProductId)) {
				EserviceTravelDetails  findTra = eserTraRepo.findByRequestReferenceNoAndCompanyIdAndProductIdAndSectionId(req.getRequestReferenceNo() ,
						req.getCompanyId() , 	 req.getProductId(),req.getSectionId()  ) ;
				agencyCode = findTra.getBrokerCode();
				branchCode = findTra.getBranchCode();
				currencyId = findTra.getCurrency();
				endtTypdId= findTra.getEndorsementType()!=null?findTra.getEndorsementType().toString():"";
				endtCount=findTra.getEndtCount();
				endtPrevQuoteNo=findTra.getEndtPrevQuoteNo();
				originalPolicyNo=findTra.getOriginalPolicyNo();
			//	EserviceTravelGroupDetails  findGroup = eserGroupRepo.findByRequestReferenceNoAndTravelIdAndGroupIdAndCompanyIdAndProductIdAndSectionId(req.getRequestReferenceNo() , req.getVehicleId() ,Integer.valueOf(req.getGroupId()) ,
			//			req.getCompanyId() , 	 Integer.valueOf(req.getProductId()) , Integer.valueOf(req.getSectionId())   ) ;
				// Update Commission
				findTra.setCommissionPercentage(StringUtils.isNotBlank(req.getCommissionPercentage() ) ? new BigDecimal(req.getCommissionPercentage()) :  findTra.getCommissionPercentage() );
				findTra.setVatCommission(StringUtils.isNotBlank(req.getVatCommissison() ) ? new BigDecimal(req.getVatCommissison()) :  findTra.getVatCommission() );
				eserTraRepo.save(findTra);
			} else if(    productType.equalsIgnoreCase("A") ) {
				EserviceBuildingDetails    findBuild = eserBuildRepo.findByRequestReferenceNoAndRiskIdAndSectionIdAndLocationId(req.getRequestReferenceNo() , 1 , req.getSectionId(),LocationId);
			    if(req.getProductId().equals("6"))
			    {
			    	 findBuild = eserBuildRepo.findByRequestReferenceNoAndRiskIdAndSectionId(req.getRequestReferenceNo() ,Integer.valueOf(req.getVehicleId()), req.getSectionId());
						
			    }
				agencyCode = findBuild.getBrokerCode();
				branchCode = findBuild.getBranchCode();
				currencyId = findBuild.getCurrency();
				endtTypdId= findBuild.getEndorsementType()!=null?findBuild.getEndorsementType().toString():"";
				endtCount=findBuild.getEndtCount();
				endtPrevQuoteNo=findBuild.getEndtPrevQuoteNo();
				originalPolicyNo=findBuild.getOriginalPolicyNo();
				// Update Commission
				findBuild.setCommissionPercentage(StringUtils.isNotBlank(req.getCommissionPercentage() ) ? new BigDecimal(req.getCommissionPercentage()) :  findBuild.getCommissionPercentage() );
				findBuild.setVatCommission(StringUtils.isNotBlank(req.getVatCommissison() ) ? new BigDecimal(req.getVatCommissison()) :  findBuild.getVatCommission() );
				eserBuildRepo.save(findBuild);
			//	EserviceBuildingSectionDetails  findBuildSec = eserBuildSecRepo.findByRequestReferenceNoAndLocationIdAndCompanyIdAndProductIdAndSectionId(req.getRequestReferenceNo() , req.getVehicleId() ,
			//			req.getCompanyId() , 	 Integer.valueOf(req.getProductId()) , Integer.valueOf(req.getSectionId())   ) ;
			} else  {
				EserviceCommonDetails    findCommon = eserCommonRepo.findByRequestReferenceNoAndRiskIdAndSectionIdAndLocationId(req.getRequestReferenceNo() , req.getVehicleId() ,req.getSectionId(),Integer.valueOf(req.getLocationId()) ) ;
				agencyCode = findCommon.getBrokerCode();
				branchCode = findCommon.getBranchCode();
				currencyId = findCommon.getCurrency();
				endtTypdId= findCommon.getEndorsementType()!=null?findCommon.getEndorsementType().toString():"";
				endtCount=findCommon.getEndtCount();
				endtPrevQuoteNo=findCommon.getEndtPrevQuoteNo();
				originalPolicyNo=findCommon.getOriginalPolicyNo();
				// Update Commission
				findCommon.setCommissionPercentage(StringUtils.isNotBlank(req.getCommissionPercentage() ) ? new BigDecimal(req.getCommissionPercentage()) :  findCommon.getCommissionPercentage() );
				findCommon.setVatCommission(StringUtils.isNotBlank(req.getVatCommissison() ) ? new BigDecimal(req.getVatCommissison()) :  findCommon.getVatCommission() );
				eserCommonRepo.save(findCommon);
			//	EserviceBuildingSectionDetails  findBuildSec = eserBuildSecRepo.findByRequestReferenceNoAndLocationIdAndCompanyIdAndProductIdAndSectionId(req.getRequestReferenceNo() , req.getVehicleId() ,
			//			req.getCompanyId() , 	 Integer.valueOf(req.getProductId()) , Integer.valueOf(req.getSectionId())   ) ;
			}
			
			String decimalDigits = currencyDecimalFormat(req.getCompanyId() , currencyId ).toString();
			String stringFormat = "%0"+decimalDigits+"d" ;
			String decimalLength = decimalDigits.equals("0") ?"" : String.format(stringFormat ,0L)  ;
			String pattern = StringUtils.isBlank(decimalLength) ?  "#####0" :   "#####0." + decimalLength;
			DecimalFormat df = new DecimalFormat(pattern);
			List<FactorRateRequestDetails>  updateCoverList = new ArrayList<FactorRateRequestDetails>(); 

			
			
			engine.setAgencyCode(agencyCode);
			engine.setBranchCode(branchCode);
			engine.setCdRefNo(findCovers.get(0).getCdRefno());
			engine.setVdRefNo(findCovers.get(0).getVdRefno());
			engine.setInsuranceId(findCovers.get(0).getCompanyId());
			engine.setMsrefno(findCovers.get(0).getMsRefno());
			engine.setProductId(findCovers.get(0).getProductId().toString());
			engine.setRequestReferenceNo(findCovers.get(0).getRequestReferenceNo());
			engine.setSectionId(findCovers.get(0).getSectionId().toString());
			engine.setVehicleId(findCovers.get(0).getVehicleId()+"");
			engine.setCreatedBy(findCovers.get(0).getCreatedBy());
			engine.setMsVehicleDetails(null);
			engine.setEffectiveDate(findCovers.get(0).getCoverPeriodFrom());
			engine.setPolicyEndDate(findCovers.get(0).getCoverPeriodTo());
			engine.setLocationId(req.getLocationId());
			
			List<PolicyCoverDataEndt> oldPolicyData = policyCoverEndtRepo.findByPolicyNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdOrderByCoverIdAsc(originalPolicyNo,
					Integer.parseInt(engine.getVehicleId()), engine.getInsuranceId(),
					Integer.parseInt(engine.getProductId()), Integer.parseInt(engine.getSectionId()));
			
			for (CoverIdReq2 covReq :    req.getCoverIdList()  ) {
			
				if(StringUtils.isBlank(covReq.getSubCoverYn()) || covReq.getSubCoverYn().equalsIgnoreCase("N") ) {
					List<FactorRateRequestDetails> filterCover = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(0) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
					
					if(filterCover.size()>0 ) {
						FactorRateRequestDetails  updateCover = filterCover.get(0);
						updateCover.setMinimumPremium(new BigDecimal(df.format(Double.valueOf(covReq.getMinimumPremium()))));
				//		updateCover.setActualRate(updateCover.getRate());
						updateCover.setRate(new BigDecimal(covReq.getRate()));
						updateCover.setExcessAmount(new BigDecimal(covReq.getExcessAmount()));
						updateCover.setExcessPercent(new BigDecimal(covReq.getExcessPercent()));
						updateCover.setExcessDesc(covReq.getExcessDesc());
						updateCover.setUserOpt("Y");
						updateCoverList.add(updateCover);
						
						//repository.save(updateCover);
						
						// Loadings
						if( covReq.getLoadings()!=null && covReq.getLoadings().size() > 0 ) {
							for ( Loading lod : covReq.getLoadings() ) {
								List<FactorRateRequestDetails> filterLoading = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(Integer.valueOf(lod.getLoadingId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterLoading.size()>0 ) {
									FactorRateRequestDetails  updateLod = filterLoading.get(0);
									updateLod.setRate(lod.getLoadingCalcType().equalsIgnoreCase("P") ? new BigDecimal(lod.getLoadingRate()) :lod.getLoadingAmount() );
									updateLod.setCalcType(StringUtils.isBlank(lod.getLoadingCalcType()) ? "A" :lod.getLoadingCalcType());
									updateLod.setMinimumPremium(lod.getLoadingAmount()==null?null: new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumAfterDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumBeforeDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumExcludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateCoverList.add(updateLod);
								}
							}
						}
						
						// Discounts
						if( covReq.getDiscounts()!=null && covReq.getDiscounts().size() > 0 ) {
							for ( Discount disc : covReq.getDiscounts() ) {
								List<FactorRateRequestDetails> filterDiscount = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(Integer.valueOf(disc.getDiscountId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterDiscount.size()>0 ) {
									FactorRateRequestDetails  updateDisc = filterDiscount.get(0);
									updateDisc.setRate( disc.getDiscountAmount()==null ? BigDecimal.ZERO :disc.getDiscountAmount() );
									updateDisc.setCalcType(StringUtils.isBlank(disc.getDiscountCalcType()) ? "A" :disc.getDiscountCalcType());
									updateDisc.setMinimumPremium(disc.getDiscountAmount()==null?null: new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumAfterDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumBeforeDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumExcludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateCoverList.add(updateDisc);
								}
							}
						}
						
						// Endt
						if( covReq.getEndorsements()!=null && covReq.getEndorsements().size() > 0 ) {
						
							for ( Endorsement endt : covReq.getEndorsements() ) {
								List<FactorRateRequestDetails> filterEndt = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(Integer.valueOf(endt.getEndorsementId())) && 
										o.getTaxId().equals(0) && o.getCoverageType().equalsIgnoreCase("E") ).collect(Collectors.toList()); 
								if(filterEndt.size()>0 ) {
									FactorRateRequestDetails  updateEndt = filterEndt.get(0);
									updateEndt.setRate( new BigDecimal(endt.getEndorsementRate()) );
									List<PolicyCoverDataEndt> coverData = oldPolicyData.stream().filter(i -> i.getCoverId()== covReq.getCoverId()).collect(Collectors.toList()) ;
									BigDecimal totalSumInsured=coverData.stream().map(x -> x.getSumInsured()).reduce(BigDecimal.ZERO,BigDecimal::add);
									updateEndt.setSumInsuredLc(totalSumInsured);
									
									coverData.sort(new Comparator<PolicyCoverDataEndt>() {

										@Override
										public int compare(PolicyCoverDataEndt o1, PolicyCoverDataEndt o2) {
											// TODO Auto-generated method stub
											return (o1.getEndtCount().compareTo(o2.getEndtCount()));
										}
									}.reversed());
									
									updateEndt.setPremiumAfterDiscountFc(coverData.get(0).getPremiumAfterDiscountFc());
									updateEndt.setPremiumAfterDiscountLc(coverData.get(0).getPremiumAfterDiscountLc());
									updateEndt.setPremiumBeforeDiscountFc(coverData.get(0).getPremiumBeforeDiscountFc());
									updateEndt.setPremiumBeforeDiscountLc(coverData.get(0).getPremiumBeforeDiscountLc());
									updateEndt.setPremiumExcludedTaxFc(coverData.get(0).getPremiumExcludedTaxFc());
									updateEndt.setPremiumExcludedTaxLc(coverData.get(0).getPremiumExcludedTaxLc());
									updateEndt.setPremiumIncludedTaxFc(coverData.get(0).getPremiumIncludedTaxFc());
									updateEndt.setPremiumIncludedTaxLc(coverData.get(0).getPremiumIncludedTaxLc()); 
									
									updateCoverList.add(updateEndt);
								}
							}
						}
					}
				} else {
					List<FactorRateRequestDetails> filterSubCover = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId())) && o.getDiscLoadId().equals(0) && o.getTaxId().equals(0) ).collect(Collectors.toList());
					if(filterSubCover.size()>0 ) {
						FactorRateRequestDetails  updateSubCover = filterSubCover.get(0);
						updateSubCover.setMinimumPremium(new BigDecimal(df.format(Double.valueOf(covReq.getMinimumPremium()))));
				//		updateSubCover.setActualRate(updateSubCover.getRate());
						updateSubCover.setRate(new BigDecimal(covReq.getRate()));
//						updateSubCover.setExcessAmount(new BigDecimal(covReq.getExcessAmount()));
						updateSubCover.setExcessAmount(covReq.getExcessAmount()==null ?BigDecimal.ZERO:new BigDecimal(covReq.getExcessAmount()));
						updateSubCover.setExcessPercent(covReq.getExcessPercent()==null?BigDecimal.ZERO:new BigDecimal(covReq.getExcessPercent()));
						updateSubCover.setExcessDesc(covReq.getExcessDesc());
						updateSubCover.setUserOpt("Y");
						repository.save(updateSubCover);
						
						// Loadings
						if( covReq.getLoadings()!=null && covReq.getLoadings().size() > 0 ) {
							for ( Loading lod : covReq.getLoadings() ) {
								List<FactorRateRequestDetails> filterLoading = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId())  && o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId())) && o.getDiscLoadId().equals(Integer.valueOf( lod.getLoadingId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterLoading.size()>0 ) {
									FactorRateRequestDetails  updateLod = filterLoading.get(0);
									updateLod.setRate(lod.getLoadingCalcType().equalsIgnoreCase("P") ? new BigDecimal(lod.getLoadingRate()) :lod.getLoadingAmount() );
									updateLod.setCalcType(lod.getLoadingCalcType() );
									updateLod.setMinimumPremium(lod.getLoadingAmount()==null?null: new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumAfterDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumBeforeDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumExcludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateCoverList.add(updateLod);
								}
							}
						}
						
						// Discounts
						if( covReq.getDiscounts()!=null && covReq.getDiscounts().size() > 0 ) {
							for ( Discount disc : covReq.getDiscounts() ) {
								List<FactorRateRequestDetails> filterDiscount = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId())  && o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId()))  && o.getDiscLoadId().equals(Integer.valueOf(disc.getDiscountId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterDiscount.size()>0 ) {
									FactorRateRequestDetails  updateDisc = filterDiscount.get(0);
									updateDisc.setRate( disc.getDiscountAmount()==null ? BigDecimal.ZERO :disc.getDiscountAmount() );
									updateDisc.setCalcType(StringUtils.isBlank(disc.getDiscountCalcType()) ? "A" :disc.getDiscountCalcType());
									updateDisc.setMinimumPremium(disc.getDiscountAmount()==null?null: new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumAfterDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumBeforeDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumExcludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateCoverList.add(updateDisc);
								}
							}
						}
					}
					
					// Endt
					if( covReq.getEndorsements()!=null && covReq.getEndorsements().size() > 0 ) {
						for ( Endorsement endt : covReq.getEndorsements() ) {
							List<FactorRateRequestDetails> filterEndt = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId())
									&&  o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId())) && o.getDiscLoadId().equals(Integer.valueOf(endt.getEndorsementId())) && 
									o.getTaxId().equals(0) && o.getCoverageType().equalsIgnoreCase("E") ).collect(Collectors.toList()); 
							if(filterEndt.size()>0 ) {
								FactorRateRequestDetails  updateEndt = filterEndt.get(0);
								updateEndt.setRate( new BigDecimal(endt.getEndorsementRate()) );
								List<PolicyCoverDataEndt> coverData = oldPolicyData.stream().filter(i -> (i.getCoverId()== covReq.getCoverId()
											&& Integer.parseInt(covReq.getSubCoverId())==i.getSubCoverId()
										)
										)
										.collect(Collectors.toList()) ;
								coverData.sort(new Comparator<PolicyCoverDataEndt>() {

									@Override
									public int compare(PolicyCoverDataEndt o1, PolicyCoverDataEndt o2) {
										// TODO Auto-generated method stub
										return (o1.getEndtCount().compareTo(o2.getEndtCount()));
									}
								}.reversed());
								
								updateEndt.setPremiumAfterDiscountFc(coverData.get(0).getPremiumAfterDiscountFc());
								updateEndt.setPremiumAfterDiscountLc(coverData.get(0).getPremiumAfterDiscountLc());
								updateEndt.setPremiumBeforeDiscountFc(coverData.get(0).getPremiumBeforeDiscountFc());
								updateEndt.setPremiumBeforeDiscountLc(coverData.get(0).getPremiumBeforeDiscountLc());
								updateEndt.setPremiumExcludedTaxFc(coverData.get(0).getPremiumExcludedTaxFc());
								updateEndt.setPremiumExcludedTaxLc(coverData.get(0).getPremiumExcludedTaxLc());
								updateEndt.setPremiumIncludedTaxFc(coverData.get(0).getPremiumIncludedTaxFc());
								updateEndt.setPremiumIncludedTaxLc(coverData.get(0).getPremiumIncludedTaxLc());
								updateCoverList.add(updateEndt);
							}
						}
					}
					
				}
				
			}
			
			Gson json = new Gson();
			log.info( "Referral Calc Request --> " +  json.toJson(engine) );
			
			EserviceMotorDetailsSaveRes resp=null;
			if(StringUtils.isBlank(endtTypdId)) {
				resp=calcEngine.referalCalculator(engine);
			}else {
				
					EndtTypeMaster endt=ratingutil.getEndtMasterData(engine.getInsuranceId(), engine.getProductId(),endtTypdId);
					engine.setCoverModification(endt.getIsCoverendt());
					List<PolicyCoverData> oldPolicyCovers = coverDataRepo
							.findByQuoteNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdAndStatusOrderByCoverIdAsc(
									endtPrevQuoteNo, Integer.parseInt(engine.getVehicleId()), engine.getInsuranceId(),
									Integer.parseInt(engine.getProductId()), Integer.parseInt(engine.getSectionId()), "Y");
					
					Boolean isPolicyDateEndt=((oldPolicyCovers.size()>0)? findCovers.get(0).getCoverPeriodTo().after(oldPolicyCovers.get(0).getCoverPeriodTo()):false);
				
				//	synchronized (engine) {
						calcEngine.loadOnetimetable(engine);
						 
					resp=calcEngine.endorsementCalculator(engine,endtCount,endtTypdId,isPolicyDateEndt);
				//}
				
			}
			 
		
			 
			// Update Referral Details 
			if(StringUtils.isNotBlank(req.getAdminLoginId())) {
				List<UWReferralDetails> uwList = uwReferalDetailsRepo.findByRequestReferenceNo(req.getRequestReferenceNo());
				
				uwList.forEach( o -> {
					if( o.getUwLoginId().equals(req.getAdminLoginId()) )
						 o.setUwStatus("Y");
					else 
						 o.setUwStatus("N");
					
				});
			}
			 
			 
			res.setCoverList(resp.getCoverList());
			res.setBranchCode(branchCode);
			res.setInsuranceId(findCovers.get(0).getCompanyId());
			res.setProductId(findCovers.get(0).getProductId().toString());
			res.setRequestReferenceNo(req.getRequestReferenceNo());
			res.setSectionId(findCovers.get(0).getProductId().toString());
			res.setResponse("Cover Updated Successfully");			
			
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return res;
	}

	public List<ProductSectionMaster> getProductSectionDropdown(String companyId, String productId , String sectionId) {
		List<ProductSectionMaster> sectionList = new ArrayList<ProductSectionMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
		
			// Find All
			Root<ProductSectionMaster> c = query.from(ProductSectionMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3, a4);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));

			jakarta.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6, a7, a8);

			// Where
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), companyId);
			jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
			query.where(n1, n2, n3, n4, n5, n6).orderBy(orderList);
		//	query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			sectionList = result.getResultList();
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionList;
	}
	@Override
	public List<Error> validateFactorIsSelectedDetails(UpdateFactorRateReq req) {
		List<Error> errors = new ArrayList<Error>();
		try {
			if ( req.getCoverIdList()==null  || req.getCoverIdList().size()<=0 ) {
				errors.add(new Error("01","CoverList","Please Enter Cover List")) ;				
			} else {
				for (CoverIdReq2 cov : req.getCoverIdList() ) {
					
					if (cov.getCoverId()==null   ) {
						errors.add(new Error("01","CoverIds","Please Enter Cover Id")) ;				
					}
					if (StringUtils.isBlank(cov.getUserOpt())  ) {
						errors.add(new Error("01","UserOpt","Please Select UserOpt Yes")) ;				
					} else if (! cov.getUserOpt().equalsIgnoreCase("Y") ) {
						errors.add(new Error("01","UserOpt","Please Select UserOpt Yes")) ;
					}
					if (StringUtils.isBlank(cov.getSubCoverYn())  ) {
						errors.add(new Error("01","SubCoverYn","Please Select SubCover Yes/No")) ;				
					} else if (! (cov.getSubCoverYn().equalsIgnoreCase("Y") || cov.getSubCoverYn().equalsIgnoreCase("N") ) ) {
						errors.add(new Error("01","SubCoverYn","Please Select SubCover Yes/No")) ;
					} else if( cov.getSubCoverYn().equalsIgnoreCase("Y") && cov.getSubCoverId() ==null ) {
						errors.add(new Error("01","SubCoverYn","Please Enter SubCover Id")) ;
					}
				}
			}
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return errors;
	}


	@Override
	public UpdateCoverRes updateFactorIsSelectedDetails(UpdateFactorRateReq req) {
		UpdateCoverRes res = new UpdateCoverRes();
		try {
		//	EserviceMotorDetails  findMot = eserMotorRepo.findByRequestReferenceNoAndVehicleId(req.getRequestReferenceNo() , req.getVehicleId());
			List<FactorRateRequestDetails> findCovers = repository.findByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdOrderByCoverIdAsc(req.getRequestReferenceNo() , req.getVehicleId() ,
					req.getCompanyId() , Integer.valueOf(req.getProductId()) , Integer.valueOf(req.getSectionId())   ) ;
			
			for (CoverIdReq2 covReq :    req.getCoverIdList()  ) {
				
				if(covReq.getSubCoverYn()==null || covReq.getSubCoverYn().equalsIgnoreCase("N") ) {
					List<FactorRateRequestDetails> filterCover = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) ).collect(Collectors.toList()); 
					
					if(filterCover.size()>0 ) {
						for (FactorRateRequestDetails  updateCover : filterCover ) {
					
							updateCover.setUserOpt(covReq.getUserOpt());
							repository.save(updateCover); 
						}
	
					}
				} else {
					List<FactorRateRequestDetails> filterSubCover = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getSubCoverId().equals(Integer.valueOf(o.getSubCoverId()))     ).collect(Collectors.toList());
					if(filterSubCover.size()>0 ) {
						for (FactorRateRequestDetails  updateSubCover : filterSubCover ) {
							updateSubCover.setUserOpt(covReq.getUserOpt());
							repository.save(updateSubCover);
						}
						
					}
					
				}
				
			}
			
			// Get Updated Covers
			findCovers = repository.findByRequestReferenceNoAndVehicleIdOrderByCoverIdAsc(req.getRequestReferenceNo() , req.getVehicleId());
			Map<Integer,List<FactorRateRequestDetails>> groupByCover = findCovers.stream().collect(Collectors.groupingBy(FactorRateRequestDetails :: getCoverId));			
			
			List<Cover> coverListRes = 	getCoversList(groupByCover);
			coverListRes.sort(Comparator.comparing(Cover :: getCoverId).reversed() );
			res.setCoverList(coverListRes);
		//	res.setBranchCode(findCovers.get(0).getBranchCode());
			res.setInsuranceId(findCovers.get(0).getCompanyId());
			res.setProductId(findCovers.get(0).getProductId().toString());
			res.setRequestReferenceNo(req.getRequestReferenceNo());	
			res.setSectionId(findCovers.get(0).getSectionId().toString());
			res.setResponse("Cover Updated Successfully");			
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return res;
	}
	
	@Override
	public FactorRateDetailsList getFactorRateFdDetailsList(FactorFdCalcViewReq req) {
		FactorRateDetailsList res = new FactorRateDetailsList();
		List<FdFactorCalcRes> facCalcResList = new ArrayList<FdFactorCalcRes>();
		EwayFactorResultRes factorResultRes = new EwayFactorResultRes();
		res.setFactorCalculationRes(facCalcResList)	;
		res.setFactorResultRes(factorResultRes);
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			
			List<EwayFactorDetails> factorCalcRes =   ewayFactorRepo.findByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionId(req.getRequestReferenceNo() ,
					req.getVehicleId() ,req.getInsuranceId() , req.getProductId()  , req.getSectionId() );
			
			for (EwayFactorDetails fac : factorCalcRes  ) {
				FdFactorCalcRes   facCalRes = new FdFactorCalcRes();
				facCalRes.setFactorId(fac.getFactorId());
				facCalRes.setFactorName(fac.getFactorName());
				facCalRes.setOwnDamage(fac.getOwnDamage());
				facCalRes.setWindscreen(fac.getWindscreen());
				facCalRes.setThirdParty(fac.getThirdParty());
				facCalRes.setTheft(fac.getTheft());
				facCalRes.setFire(fac.getFire());
				facCalcResList.add(facCalRes);				
			}
			facCalcResList.sort(Comparator.comparing(FdFactorCalcRes :: getFactorId ));
			
			List<EwayFactorResultDetail>  factorResults = ewayFactorResultRepo.findByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionId(req.getRequestReferenceNo() ,
					req.getVehicleId() ,req.getInsuranceId() , req.getProductId()  , req.getSectionId() );	
			EwayFactorResultDetail factorResult = factorResults.get(0);
			
			dozerMapper.map(factorResult, factorResultRes);
			res.setFactorCalculationRes(facCalcResList)	;
			res.setFactorResultRes(factorResultRes);

		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return res;
			
		}return res;
	}


	@Override
	public ViewPolicyCalc getViewPolicyCalc(FactorRateDetailsGetReq req, String string) {
		ViewPolicyCalc  res = new ViewPolicyCalc();
		try {
			// Find Risk Datas
			//resList = getRiskDetails(req);
			
			// Find Covers
			List<FactorRateRequestDetails> findCovers = repository.findByRequestReferenceNoOrderByVehicleIdAsc(req.getRequestReferenceNo());
			
			// Set Policy Covers
			List<FactorRateRequestDetails> filterVehicleCovers =  findCovers.stream().filter( o -> o.getVehicleId().equals(Integer.valueOf(99999)) &&
					o.getCompanyId().equals(req.getInsuranceId()) && o.getProductId().toString().equals(req.getProductId()) && o.getSectionId().toString().equals("99999") ).collect(Collectors.toList());
			Map<Integer,List<FactorRateRequestDetails>> groupByCover = filterVehicleCovers.stream().collect(Collectors.groupingBy(FactorRateRequestDetails :: getCoverId));			
			List<Cover> coverListRes = 	getCoversList(groupByCover);
			coverListRes.forEach(cov ->  cov.setSectionName("All")) ;
			
			// Set Response 
			if(filterVehicleCovers.size() > 0  ) {
				FactorRateRequestDetails fac = filterVehicleCovers.get(0) ;
				res.setCdRefNo(fac.getCdRefno());
				res.setMsrefno(fac.getMsRefno());
				res.setVdRefNo(fac.getVdRefno());
				res.setCoverList(coverListRes);
				res.setCreatedBy(fac.getCreatedBy());
				res.setSectionId(fac.getSectionId().toString());
				res.setVehicleId(fac.getVehicleId().toString());
				
				MsPolicyDetails msPolicy = msPolicyRepo.findTop1ByRequestReferenceNoOrderByEntryDateDesc(req.getRequestReferenceNo()) ;
				res.setNoOfVehicles(msPolicy.getNoOfVehicles());
				res.setClaimRatio(msPolicy.getClaimRatio());
				res.setCurrency(msPolicy.getCurrency());
				res.setExchangeRate(msPolicy.getExchangeRate());
				res.setBuildingSumInsured(msPolicy.getBuildingSuminsured()==null?"": msPolicy.getBuildingSuminsured().toPlainString());
				res.setPdRefNo(msPolicy.getPdRefno()==null?"":msPolicy.getPdRefno().toString());
				
			}
			
			res.setInsuranceId(req.getInsuranceId());
			res.setProductId(req.getProductId());
			res.setRequestReferenceNo(req.getRequestReferenceNo());
			
			
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return res;
	}


	@Override
	public List<Error> validatePolicyCalcRate(UpdateFactorRateReq req) {
		List<Error> errors = new ArrayList<Error>();
		try {
			if ( req.getCoverIdList()==null  || req.getCoverIdList().size()<=0 ) {
				errors.add(new Error("01","CoverList","Please Enter Cover List")) ;				
			} else {
				for (CoverIdReq2 cov : req.getCoverIdList() ) {
					
					if (cov.getCoverId()==null   ) {
						errors.add(new Error("01","CoverIds","Please Enter Cover Id")) ;				
					}
					if (StringUtils.isBlank(cov.getSubCoverYn())  ) {
						errors.add(new Error("01","SubCoverYn","Please Select SubCover Yes/No")) ;				
					} else if (! (cov.getSubCoverYn().equalsIgnoreCase("Y") || cov.getSubCoverYn().equalsIgnoreCase("N") ) ) {
						errors.add(new Error("01","SubCoverYn","Please Select SubCover Yes/No")) ;
					} else if( cov.getSubCoverYn().equalsIgnoreCase("Y") && cov.getSubCoverId() ==null ) {
						errors.add(new Error("01","SubCoverYn","Please Enter SubCover Id")) ;
					}
					
//					if (cov.getRate()=null   ) {
//						errors.add(new Error("01","MinimumPremium","Please Enter MimimumPremium")) ;				
//					} else if (! cov.getRate().matches("[0-9.]+")   ) {
//						errors.add(new Error("01","MinimumPremium","Please Enter Valid MimimumPremium")) ;				
//					} else if ( getRate().equalsIgnoreCase("0")   ) {
//						errors.add(new Error("01","MinimumPremium","Please Enter Valid Number In MimimumPremium")) ;				
//					}
					
					if (cov.getRate()==null  ) {
						errors.add(new Error("01","Rate","Please Enter Rate")) ;				
					} else if (! cov.getRate().matches("[0-9.]+")   ) {
						errors.add(new Error("01","Rate","Please Enter Valid Rate")) ;				
					} else if ( cov.getRate().equalsIgnoreCase("0") &&  cov.getCoverageType().equalsIgnoreCase("D")    ) {
						errors.add(new Error("01","Rate","Please Enter Valid Number In Rate")) ;				
					}
					if(StringUtils.isNotBlank(cov.getUserOpt())  && cov.getUserOpt().equalsIgnoreCase("Y")  ) {
						if (StringUtils.isBlank(cov.getExcessAmount() ) ) {
							errors.add(new Error("01"," Excess Amount","Please Enter Excess Amount")) ;				
						} else if (! cov.getExcessAmount().matches("[0-9.]+")   ) {
							errors.add(new Error("01"," Excess Amount","Please Enter Valid Excess Amount")) ;				
						}
						
						if (StringUtils.isBlank(cov.getExcessPercent() ) ) {
							errors.add(new Error("01"," Excess Percent","Please Enter Excess Percent")) ;				
						} else if (! cov.getExcessPercent().matches("[0-9.]+")   ) {
							errors.add(new Error("01"," Excess Percent","Please Enter Valid Excess Percent")) ;				
						} else if (Double.valueOf(cov.getExcessPercent())> 100 ) {
							errors.add(new Error("01"," Excess Percent","Excess Percent More Then 100 Percent Not Allowed")) ;				
						}
						
						
						if (StringUtils.isBlank(cov.getExcessDesc() ) ) {
							errors.add(new Error("01"," Excess Desc","Please Enter  Excess Description")) ;				
						} else if ( cov.getExcessDesc().length() > 500  ) {
							errors.add(new Error("01"," Excess Desc"," Excess Description Must Be Under 500 Charaters Only Allowed")) ;				
						}
					}
					
				}
			}
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return errors;
	}


	@Override
	public UpdateCoverRes updatePolicyCalcRate(UpdateFactorRateReq req) {
		UpdateCoverRes res = new UpdateCoverRes();
		try {
			String agencyCode = "";
			String branchCode = "";
			String currencyId = "" ;
			String endtTypdId="";
			String endtPrevQuoteNo="";
			String originalPolicyNo="";
			BigDecimal endtCount=BigDecimal.ZERO;
			CalcEngine engine= new CalcEngine();
			
			
			List<FactorRateRequestDetails> findCovers = repository.findByRequestReferenceNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdOrderByCoverIdAsc(req.getRequestReferenceNo() , 99999 ,
					req.getCompanyId() , Integer.valueOf(req.getProductId()) , Integer.valueOf(99999)   ) ;	
		
			CompanyProductMaster product = getCompanyProductMasterDropdown(req.getCompanyId(), req.getProductId()) ;
			String productType  =product!=null ? product.getMotorYn() :  "M" ; 
			
			if(    productType.equalsIgnoreCase("M") ){
				EserviceMotorDetails  findMot = eserMotorRepo.findByRequestReferenceNo(req.getRequestReferenceNo()).get(0);
				agencyCode = findMot.getAgencyCode();
				branchCode = findMot.getBranchCode();
				currencyId = findMot.getCurrency();
				endtTypdId= findMot.getEndorsementType()!=null?findMot.getEndorsementType().toString():"";
				endtCount=findMot.getEndtCount();
				endtPrevQuoteNo=findMot.getEndtPrevQuoteNo();
				originalPolicyNo=findMot.getOriginalPolicyNo();
				if(findMot.getEndorsementType() == null ) {
					engine.setEffectiveDate(findMot.getPolicyStartDate());
					engine.setPolicyEndDate(findMot.getPolicyEndDate());
				}else if(findMot.getEndorsementType() !=null) {
					engine.setEffectiveDate(findMot.getEndorsementEffdate());
					engine.setPolicyEndDate(findMot.getPolicyEndDate());
				}
		
				
			} else if(   productType.equalsIgnoreCase("H") &&  req.getProductId().equalsIgnoreCase(travelProductId)) {
				EserviceTravelDetails  findTra = eserTraRepo.findByRequestReferenceNo(req.getRequestReferenceNo()) ;
				agencyCode = findTra.getBrokerCode();
				branchCode = findTra.getBranchCode();
				currencyId = findTra.getCurrency();
				endtTypdId= findTra.getEndorsementType()!=null?findTra.getEndorsementType().toString():"";
				endtCount=findTra.getEndtCount();
				endtPrevQuoteNo=findTra.getEndtPrevQuoteNo();
				originalPolicyNo=findTra.getOriginalPolicyNo();
		
			} else if(    productType.equalsIgnoreCase("A") ) {
				EserviceBuildingDetails    findBuild = eserBuildRepo.findByRequestReferenceNoAndRiskIdAndSectionId(req.getRequestReferenceNo() , 1 , "0");
				agencyCode = findBuild.getBrokerCode();
				branchCode = findBuild.getBranchCode();
				currencyId = findBuild.getCurrency();
				endtTypdId= findBuild.getEndorsementType()!=null?findBuild.getEndorsementType().toString():"";
				endtCount=findBuild.getEndtCount();
				endtPrevQuoteNo=findBuild.getEndtPrevQuoteNo();
				originalPolicyNo=findBuild.getOriginalPolicyNo();
			
			} else  {
				EserviceCommonDetails    findCommon = eserCommonRepo.findByRequestReferenceNo(req.getRequestReferenceNo() ).get(0) ;
				agencyCode = findCommon.getBrokerCode();
				branchCode = findCommon.getBranchCode();
				currencyId = findCommon.getCurrency();
				endtTypdId= findCommon.getEndorsementType()!=null?findCommon.getEndorsementType().toString():"";
				endtCount=findCommon.getEndtCount();
				endtPrevQuoteNo=findCommon.getEndtPrevQuoteNo();
				originalPolicyNo=findCommon.getOriginalPolicyNo();
				
			}
			
			String decimalDigits = currencyDecimalFormat(req.getCompanyId() , currencyId ).toString();
			String stringFormat = "%0"+decimalDigits+"d" ;
			String decimalLength = decimalDigits.equals("0") ?"" : String.format(stringFormat ,0L)  ;
			String pattern = StringUtils.isBlank(decimalLength) ?  "#####0" :   "#####0." + decimalLength;
			DecimalFormat df = new DecimalFormat(pattern);
			List<FactorRateRequestDetails>  updateCoverList = new ArrayList<FactorRateRequestDetails>(); 

			
			
			engine.setAgencyCode(agencyCode);
			engine.setBranchCode(branchCode);
			engine.setCdRefNo(findCovers.get(0).getCdRefno());
			engine.setVdRefNo(findCovers.get(0).getVdRefno());
			engine.setInsuranceId(findCovers.get(0).getCompanyId());
			engine.setMsrefno(findCovers.get(0).getMsRefno());
			engine.setProductId(findCovers.get(0).getProductId().toString());
			engine.setRequestReferenceNo(findCovers.get(0).getRequestReferenceNo());
			engine.setSectionId("99999");
			engine.setVehicleId("99999");
			engine.setCreatedBy(findCovers.get(0).getCreatedBy());
			engine.setMsVehicleDetails(null);
			engine.setEffectiveDate(findCovers.get(0).getCoverPeriodFrom());
			engine.setPolicyEndDate(findCovers.get(0).getCoverPeriodTo());
			engine.setPdrefno(pattern);
			
			List<PolicyCoverDataEndt> oldPolicyData = policyCoverEndtRepo.findByPolicyNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdOrderByCoverIdAsc(originalPolicyNo,
					Integer.parseInt(engine.getVehicleId()), engine.getInsuranceId(),
					Integer.parseInt(engine.getProductId()), Integer.parseInt(engine.getSectionId()));
			for (CoverIdReq2 covReq :    req.getCoverIdList()  ) {
				
				if(StringUtils.isBlank(covReq.getSubCoverYn()) || covReq.getSubCoverYn().equalsIgnoreCase("N") ) {
					List<FactorRateRequestDetails> filterCover = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(0) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
					
					if(filterCover.size()>0 ) {
						FactorRateRequestDetails  updateCover = filterCover.get(0);
						updateCover.setMinimumPremium(new BigDecimal(df.format(Double.valueOf(covReq.getMinimumPremium()))));
				//		updateCover.setActualRate(updateCover.getRate());
						updateCover.setRate(new BigDecimal(covReq.getRate()));
						updateCover.setExcessAmount(new BigDecimal(covReq.getExcessAmount()));
						updateCover.setExcessPercent(new BigDecimal(covReq.getExcessPercent()));
						updateCover.setExcessDesc(covReq.getExcessDesc());
						updateCover.setUserOpt("Y");
						updateCoverList.add(updateCover);
						//repository.save(updateCover);
						
						// Loadings
						if( covReq.getLoadings()!=null && covReq.getLoadings().size() > 0 ) {
							for ( Loading lod : covReq.getLoadings() ) {
								List<FactorRateRequestDetails> filterLoading = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(Integer.valueOf(lod.getLoadingId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterLoading.size()>0 ) {
									FactorRateRequestDetails  updateLod = filterLoading.get(0);
									updateLod.setRate(lod.getLoadingCalcType().equalsIgnoreCase("P") ? new BigDecimal(lod.getLoadingRate()) :lod.getLoadingAmount() );
									updateLod.setCalcType(StringUtils.isBlank(lod.getLoadingCalcType()) ? "A" :lod.getLoadingCalcType());
									updateLod.setMinimumPremium(lod.getLoadingAmount()==null?null: new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumAfterDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumBeforeDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumExcludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateCoverList.add(updateLod);
								}
							}
						}
						
						// Discounts
						if( covReq.getDiscounts()!=null && covReq.getDiscounts().size() > 0 ) {
							for ( Discount disc : covReq.getDiscounts() ) {
								List<FactorRateRequestDetails> filterDiscount = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(Integer.valueOf(disc.getDiscountId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterDiscount.size()>0 ) {
									FactorRateRequestDetails  updateDisc = filterDiscount.get(0);
									updateDisc.setRate( disc.getDiscountAmount()==null ? BigDecimal.ZERO :disc.getDiscountAmount() );
									updateDisc.setCalcType(StringUtils.isBlank(disc.getDiscountCalcType()) ? "A" :disc.getDiscountCalcType());
									updateDisc.setMinimumPremium(disc.getDiscountAmount()==null?null: new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumAfterDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumBeforeDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumExcludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateCoverList.add(updateDisc);
								}
							}
						}
						
						// Endt
						if( covReq.getEndorsements()!=null && covReq.getEndorsements().size() > 0 ) {
						
							for ( Endorsement endt : covReq.getEndorsements() ) {
								List<FactorRateRequestDetails> filterEndt = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getDiscLoadId().equals(Integer.valueOf(endt.getEndorsementId())) && 
										o.getTaxId().equals(0) && o.getCoverageType().equalsIgnoreCase("E") ).collect(Collectors.toList()); 
								if(filterEndt.size()>0 ) {
									FactorRateRequestDetails  updateEndt = filterEndt.get(0);
									updateEndt.setRate( new BigDecimal(endt.getEndorsementRate()) );
									List<PolicyCoverDataEndt> coverData = oldPolicyData.stream().filter(i -> i.getCoverId()== covReq.getCoverId()).collect(Collectors.toList()) ;
									BigDecimal totalSumInsured=coverData.stream().map(x -> x.getSumInsured()).reduce(BigDecimal.ZERO,BigDecimal::add);
									updateEndt.setSumInsuredLc(totalSumInsured);
									
									coverData.sort(new Comparator<PolicyCoverDataEndt>() {

										@Override
										public int compare(PolicyCoverDataEndt o1, PolicyCoverDataEndt o2) {
											// TODO Auto-generated method stub
											return (o1.getEndtCount().compareTo(o2.getEndtCount()));
										}
									}.reversed());
									
									updateEndt.setPremiumAfterDiscountFc(coverData.get(0).getPremiumAfterDiscountFc());
									updateEndt.setPremiumAfterDiscountLc(coverData.get(0).getPremiumAfterDiscountLc());
									updateEndt.setPremiumBeforeDiscountFc(coverData.get(0).getPremiumBeforeDiscountFc());
									updateEndt.setPremiumBeforeDiscountLc(coverData.get(0).getPremiumBeforeDiscountLc());
									updateEndt.setPremiumExcludedTaxFc(coverData.get(0).getPremiumExcludedTaxFc());
									updateEndt.setPremiumExcludedTaxLc(coverData.get(0).getPremiumExcludedTaxLc());
									updateEndt.setPremiumIncludedTaxFc(coverData.get(0).getPremiumIncludedTaxFc());
									updateEndt.setPremiumIncludedTaxLc(coverData.get(0).getPremiumIncludedTaxLc()); 
									
									updateCoverList.add(updateEndt);
								}
							}
						}
					}
				} else {
					List<FactorRateRequestDetails> filterSubCover = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId()) && o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId())) && o.getDiscLoadId().equals(0) && o.getTaxId().equals(0) ).collect(Collectors.toList());
					if(filterSubCover.size()>0 ) {
						FactorRateRequestDetails  updateSubCover = filterSubCover.get(0);
						updateSubCover.setMinimumPremium(new BigDecimal(df.format(Double.valueOf(covReq.getMinimumPremium()))));
				//		updateSubCover.setActualRate(updateSubCover.getRate());
						updateSubCover.setRate(new BigDecimal(covReq.getRate()));
						updateSubCover.setExcessAmount(new BigDecimal(covReq.getExcessAmount()));
						updateSubCover.setExcessPercent(new BigDecimal(covReq.getExcessPercent()));
						updateSubCover.setExcessDesc(covReq.getExcessDesc());
						updateSubCover.setUserOpt("Y");
						repository.save(updateSubCover);
						
						// Loadings
						if( covReq.getLoadings()!=null && covReq.getLoadings().size() > 0 ) {
							for ( Loading lod : covReq.getLoadings() ) {
								List<FactorRateRequestDetails> filterLoading = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId())  && o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId())) && o.getDiscLoadId().equals(Integer.valueOf( lod.getLoadingId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterLoading.size()>0 ) {
									FactorRateRequestDetails  updateLod = filterLoading.get(0);
									updateLod.setRate(lod.getLoadingCalcType().equalsIgnoreCase("P") ? new BigDecimal(lod.getLoadingRate()) :lod.getLoadingAmount() );
									updateLod.setCalcType(lod.getLoadingCalcType() );
									updateLod.setMinimumPremium(lod.getLoadingAmount()==null?null: new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getMaxAmount()==null?null:new BigDecimal(df.format(lod.getMaxAmount())));
									updateLod.setPremiumAfterDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumBeforeDiscountFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumExcludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateLod.setPremiumIncludedTaxFc(lod.getLoadingAmount()==null ? null : new BigDecimal(df.format(lod.getLoadingAmount())));
									updateCoverList.add(updateLod);
								}
							}
						}
						
						// Discounts
						if( covReq.getDiscounts()!=null && covReq.getDiscounts().size() > 0 ) {
							for ( Discount disc : covReq.getDiscounts() ) {
								List<FactorRateRequestDetails> filterDiscount = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId())  && o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId()))  && o.getDiscLoadId().equals(Integer.valueOf(disc.getDiscountId())) && o.getTaxId().equals(0)  ).collect(Collectors.toList()); 
								if(filterDiscount.size()>0 ) {
									FactorRateRequestDetails  updateDisc = filterDiscount.get(0);
									updateDisc.setRate( disc.getDiscountAmount()==null ? BigDecimal.ZERO :disc.getDiscountAmount() );
									updateDisc.setCalcType(StringUtils.isBlank(disc.getDiscountCalcType()) ? "A" :disc.getDiscountCalcType());
									updateDisc.setMinimumPremium(disc.getDiscountAmount()==null?null: new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getMaxAmount()==null?null:new BigDecimal(df.format(disc.getMaxAmount())));
									updateDisc.setPremiumAfterDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumBeforeDiscountFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumExcludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateDisc.setPremiumIncludedTaxFc(disc.getDiscountAmount()==null ? null : new BigDecimal(df.format(disc.getDiscountAmount())));
									updateCoverList.add(updateDisc);
								}
							}
						}
					}
					
					// Endt
					if( covReq.getEndorsements()!=null && covReq.getEndorsements().size() > 0 ) {
						for ( Endorsement endt : covReq.getEndorsements() ) {
							List<FactorRateRequestDetails> filterEndt = findCovers.stream().filter( o -> o.getCoverId().equals(covReq.getCoverId())
									&&  o.getSubCoverId().equals(Integer.valueOf(covReq.getSubCoverId())) && o.getDiscLoadId().equals(Integer.valueOf(endt.getEndorsementId())) && 
									o.getTaxId().equals(0) && o.getCoverageType().equalsIgnoreCase("E") ).collect(Collectors.toList()); 
							if(filterEndt.size()>0 ) {
								FactorRateRequestDetails  updateEndt = filterEndt.get(0);
								updateEndt.setRate( new BigDecimal(endt.getEndorsementRate()) );
								List<PolicyCoverDataEndt> coverData = oldPolicyData.stream().filter(i -> (i.getCoverId()== covReq.getCoverId()
											&& Integer.parseInt(covReq.getSubCoverId())==i.getSubCoverId()
										)
										)
										.collect(Collectors.toList()) ;
								coverData.sort(new Comparator<PolicyCoverDataEndt>() {

									@Override
									public int compare(PolicyCoverDataEndt o1, PolicyCoverDataEndt o2) {
										// TODO Auto-generated method stub
										return (o1.getEndtCount().compareTo(o2.getEndtCount()));
									}
								}.reversed());
								
								updateEndt.setPremiumAfterDiscountFc(coverData.get(0).getPremiumAfterDiscountFc());
								updateEndt.setPremiumAfterDiscountLc(coverData.get(0).getPremiumAfterDiscountLc());
								updateEndt.setPremiumBeforeDiscountFc(coverData.get(0).getPremiumBeforeDiscountFc());
								updateEndt.setPremiumBeforeDiscountLc(coverData.get(0).getPremiumBeforeDiscountLc());
								updateEndt.setPremiumExcludedTaxFc(coverData.get(0).getPremiumExcludedTaxFc());
								updateEndt.setPremiumExcludedTaxLc(coverData.get(0).getPremiumExcludedTaxLc());
								updateEndt.setPremiumIncludedTaxFc(coverData.get(0).getPremiumIncludedTaxFc());
								updateEndt.setPremiumIncludedTaxLc(coverData.get(0).getPremiumIncludedTaxLc());
								updateCoverList.add(updateEndt);
							}
						}
					}
					
				}
				
			}
			
			Gson json = new Gson();
			log.info( "Referral Calc Request --> " +  json.toJson(engine) );
			
			
			calcEngine.policyReferralCalc(engine);
			
			
//			EserviceMotorDetailsSaveRes resp=null;
//			if(StringUtils.isBlank(endtTypdId)) {
//				resp=calcEngine.referalCalculator(engine);
//			}else {
//				
//					EndtTypeMaster endt=ratingutil.getEndtMasterData(engine.getInsuranceId(), engine.getProductId(),endtTypdId);
//					engine.setCoverModification(endt.getIsCoverendt());
//					List<PolicyCoverData> oldPolicyCovers = coverDataRepo
//							.findByQuoteNoAndVehicleIdAndCompanyIdAndProductIdAndSectionIdAndStatusOrderByCoverIdAsc(
//									endtPrevQuoteNo, Integer.parseInt(engine.getVehicleId()), engine.getInsuranceId(),
//									Integer.parseInt(engine.getProductId()), Integer.parseInt(engine.getSectionId()), "Y");
//					
//					Boolean isPolicyDateEndt=((oldPolicyCovers.size()>0)? findCovers.get(0).getCoverPeriodTo().after(oldPolicyCovers.get(0).getCoverPeriodTo()):false);
//				
//				//	synchronized (engine) {
//						calcEngine.loadOnetimetable(engine);
//						 
//					resp=calcEngine.endorsementCalculator(engine,endtCount,endtTypdId,isPolicyDateEndt);
//				//}
//				
//			}
			 
		
			
			 
//			res.setCoverList(resp.getCoverList());
			res.setBranchCode(branchCode);
			res.setInsuranceId(findCovers.get(0).getCompanyId());
			res.setProductId(findCovers.get(0).getProductId().toString());
			res.setRequestReferenceNo(req.getRequestReferenceNo());
			res.setSectionId(findCovers.get(0).getProductId().toString());
			res.setResponse("Cover Updated Successfully");			
			
			
		} catch(Exception e){
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
			
		}return res;
	}
		
}
