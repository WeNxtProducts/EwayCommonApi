/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;


import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.req.CommonErrorModuleReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.res.DropdownCommonRes;
import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.BranchChangeStatusReq;
import com.maan.eway.master.req.BranchMasterGetAllReq;
import com.maan.eway.master.req.BranchMasterGetReq;
import com.maan.eway.master.req.BranchMasterSaveReq;
import com.maan.eway.master.req.CompanyBranchGetReq;
import com.maan.eway.master.req.CompanyBranchReq;
import com.maan.eway.master.res.BranchMasterRes;
import com.maan.eway.master.service.BranchMasterService;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>BranchMasterController</h2>
*/
@RestController
@Api(tags = "MASTER : Branch Master ", description = "API's")
@RequestMapping("/master")
public class BranchMasterController {

	@Autowired
	private  BranchMasterService branchService;
	
	@Autowired
	private  PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;
	
	// save
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
		@PostMapping("/insertbranch")
		@ApiOperation(value = "This method is Insert Branch Details")
		public ResponseEntity<CommonRes> insertBranch(@RequestBody BranchMasterSaveReq req) {

			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();
			List<String> validationCodes =  branchService.validateBranchDetails(req);
			List<Error> validation = null;
			if(validationCodes!=null && validationCodes.size() > 0 ) {
				CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
				comErrDescReq.setBranchCode("99999");
				comErrDescReq.setInsuranceId(req.getCompanyId());
				comErrDescReq.setProductId("99999");
				comErrDescReq.setModuleId("31");
				comErrDescReq.setModuleName("MASTERS");
				
				validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
			}
		

			// validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

			} else {

				// Get All
				SuccessRes res = branchService.insertBranch(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}
		
		//  Get All Branch Master
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
		@PostMapping("/getallbranchdetails")
		@ApiOperation("This method is getall Branch Details")
		public ResponseEntity<CommonRes> getallBranchDetails(@RequestBody BranchMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<BranchMasterRes> res = branchService.getallBranchDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
		
	//  Get Active Branch Master
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/getactivebranch")
			@ApiOperation("This method is get Active Branch Details")
			public ResponseEntity<CommonRes> getActiveBranchDetails(@RequestBody BranchMasterGetAllReq req)
			{
				CommonRes data = new CommonRes();
				reqPrinter.reqPrint(req);
				
				List<BranchMasterRes> res = branchService.getActiveBranchDetails(req);
				data.setCommonResponse(res);
				data.setErrorMessage(Collections.emptyList());
				data.setIsError(false);
				data.setMessage("Success");
				
				if(res!= null) {
					return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
				}
				else {
					return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
				}
			}
		
		// Get By Branch Id
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
		@PostMapping("/getbybranchid")
		@ApiOperation("This Method is to get by Branch id")
		public ResponseEntity<CommonRes> getByBranchCode(@RequestBody BranchMasterGetReq req)
		{
		CommonRes data = new CommonRes();
		BranchMasterRes res = branchService.getByBranchCode(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
		
	// Branch Master Drop Down Type
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
		@PostMapping(value="/dropdown/branchmaster",produces = "application/json")
		@ApiOperation(value = "This method is get Branch Master Drop Down")

		public ResponseEntity<DropdownCommonRes> getCompanyBranchMasterDropdown(@RequestBody CompanyBranchReq req ) {

			DropdownCommonRes data = new DropdownCommonRes();

			// Save
			List<DropDownRes> res = branchService.getCompanyBranchMasterDropdown(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<DropdownCommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}
		
		@GetMapping("/getallcompanybranches")
		@ApiOperation(value = "This method is get Branch Master Drop Down")

		public ResponseEntity<CommonRes> getAllCompanyBranch(@RequestBody CompanyBranchGetReq req) {

			CommonRes data = new CommonRes();

			// Save
			List<DropDownRes> res = branchService.getBranchMasterDropdown(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}
		
	/*	@PostMapping("/getinduvidualcompanybranches")
		@ApiOperation(value = "This method is get Branch Master Drop Down")

		public ResponseEntity<CommonRes> getBranchMasterDropdown(@RequestBody CompanyBranchGetReq req ) {

			CommonRes data = new CommonRes();

			// Save
			List<DropDownRes> res = branchService.getBranchMasterDropdown();
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		} */
		
		
		
		@PostMapping("/branch/changestatus")
		@ApiOperation(value = "This method is Branch Change Status")
		public ResponseEntity<CommonRes> changeStatusOfBranch(@RequestBody BranchChangeStatusReq req) {

			CommonRes data = new CommonRes();
			// Change Status
			SuccessRes res = branchService.changeStatusOfBranch(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}

/*
	private static final String ENTITY_TITLE = "BranchMaster";


 	public BranchMasterController (BranchMasterService entityService) {
		this.entityService = entityService;
	}
*/

/*	@PostMapping(value = "/Branchmaster")
	public ResponseEntity<BranchMaster> createBranchMaster(@RequestBody  BranchMaster model) {

   		 BranchMaster data = entityService.create(model);
    		if (data != null) {
    			return new ResponseEntity<>(data,HttpStatus.CREATED);
  			  } else {
    			return new ResponseEntity<>(null,HttpStatus.BAD_REQUEST);
   			 }
    }

    @GetMapping(value = "/Branchmaster")
    public ResponseEntity<List<BranchMaster>> getAllBranchMaster() {
        List<BranchMaster> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }
/*
        @GetMapping(value = "/Branchmaster/{id}")
    public ResponseEntity<BranchMaster> getOneBranchMaster(@PathVariable("id") long id) {

            BranchMaster e = entityService.getOne(id);
            if (e == null) {
            	return new ResponseEntity<>(null,HttpStatus.NOT_FOUND);
            }
            return new ResponseEntity<>(e, HttpStatus.OK);
    }

*/
		

}
