package com.maan.eway.master.controller;
/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/

import java.util.Collections;
import java.util.List;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.error.Error;
import com.maan.eway.master.req.CurrencyDropDownReq;
import com.maan.eway.master.req.CurrencyMasterChangeStatusReq;
import com.maan.eway.master.req.CurrencyMasterGetAllReq;

import com.maan.eway.master.req.CurrencyMasterGetReq;
import com.maan.eway.master.req.CurrencyMasterSaveReq;
import com.maan.eway.master.req.ProductCurrDropDownReq;
import com.maan.eway.master.res.CurrencyMasterRes;
import com.maan.eway.master.service.CurrencyMasterService;
import com.maan.eway.common.req.CommonErrorModuleReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.res.CuurencyDropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * <h2>CurrencyMasterController</h2>
 */
@RestController
@Api(tags = "MASTER : Currency Master ", description = "API's")
@RequestMapping("/master")
public class CurrencyMasterController {

	@Autowired
	private CurrencyMasterService currencyService;

	@Autowired
	private PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;
	

	// save
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/insertcurrency")
	@ApiOperation(value = "This method is Insert Currency Details")
	public ResponseEntity<CommonRes> insertCurrency(@RequestBody CurrencyMasterSaveReq req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes = currencyService.validateCurrencyDetails(req);
		List<Error> validation = null;
		if (validationCodes != null && validationCodes.size() > 0) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
			comErrDescReq.setInsuranceId(req.getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");

			validation = errorDescService.getErrorDesc(validationCodes, comErrDescReq);
		}
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			// Get All
			SuccessRes res = currencyService.insertCurrency(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

	// Get All Currency Master
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/getallcurrencydetails")
	@ApiOperation("This method is getall Currency Details")
	public ResponseEntity<CommonRes> getallCurrencyDetails(@RequestBody CurrencyMasterGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<CurrencyMasterRes> res = currencyService.getallCurrencyDetails(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get Active Currency Master
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/getactivecurrency")
	@ApiOperation("This method is get Active Currency Details")
	public ResponseEntity<CommonRes> getActiveCurrencyDetails(@RequestBody CurrencyMasterGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<CurrencyMasterRes> res = currencyService.getActiveCurrencyDetails(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get By Currency Id
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/getbycurrencyid")
	@ApiOperation("This Method is to get by Currency id")
	public ResponseEntity<CommonRes> getByCurrencyId(@RequestBody CurrencyMasterGetReq req) {
		CommonRes data = new CommonRes();
		CurrencyMasterRes res = currencyService.getByCurrencyId(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
		@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")	
	@PostMapping("/changestatuscurrencydetails")
	@ApiOperation("This method is change Status Currency Details")
	public ResponseEntity<CommonRes>changeStatusCurrencyDetails(@RequestBody CurrencyMasterChangeStatusReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		SuccessRes res = currencyService.changeStatusCurrencyDetails(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	
	
	// Currency Master Drop Down Type
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping(value="/dropdown/currency",produces = "application/json")
	@ApiOperation(value = "This method is get Currency Master Drop Down")

	public ResponseEntity<CommonRes> getCurrencyMasterDropdown(@RequestBody CurrencyDropDownReq req) {

		CommonRes data = new CommonRes();

		// dropdown
		List<CuurencyDropDownRes> res = currencyService.getCurrencyMasterDropdown(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		// dropdown
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}
	
	// Currency Master Drop Down Type
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping(value="/dropdown/productcurrency")
	@ApiOperation(value = "This method is get Currency Master Drop Down")

	public ResponseEntity<CommonRes> getProductCurrencyMasterDropdown(@RequestBody ProductCurrDropDownReq req) {

		CommonRes data = new CommonRes();

		// dropdown
		List<CuurencyDropDownRes> res = currencyService.getProductCurrencyMasterDropdown(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		// dropdown
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}
	
}
