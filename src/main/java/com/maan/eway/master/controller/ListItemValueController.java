/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-11-19 ( Date ISO 2022-11-19 - Time 13:30:17 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.ListItemValueSaveReq;
import com.maan.eway.master.req.LovChangeStatusReq;
import com.maan.eway.master.req.LovDropDownReq;
import com.maan.eway.master.req.LovGetAllReq;
import com.maan.eway.master.req.LovGetReq;
import com.maan.eway.master.res.LovDetailsGetRes;
import com.maan.eway.master.service.ListItemValueService;
import com.maan.eway.common.req.CommonErrorModuleReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.res.TitleType;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>ListItemValueController</h2>
*/
@RestController
@RequestMapping("/master")
@Api(tags = "MASTER : L.O.V Master ", description = "API's")
public class ListItemValueController {

	@Autowired
	private  ListItemValueService service;

	@Autowired
	private  PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;
	
/*
	private static final String ENTITY_TITLE = "ListItemValue";


 	public ListItemValueController (ListItemValueService entityService) {
		this.entityService = entityService;
	}
*/
	
	// save
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/insertlovdetails")
			@ApiOperation(value = "This method is Lov Master")
			public ResponseEntity<CommonRes> insertLovDetails(@RequestBody ListItemValueSaveReq req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes =  service.validateLovDetails(req);
		List<Error> validation = null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode(req.getBranchCode());
			comErrDescReq.setInsuranceId(req.getInsuranceId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}

			
				// validation
				if (validation != null && validation.size() != 0) {
					data.setCommonResponse(null);
					data.setIsError(true);
					data.setErrorMessage(validation);
					data.setMessage("Failed");
					return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

				} else {

					// Get All
					SuccessRes res = service.insertLovDetails(req);
					data.setCommonResponse(res);
					data.setIsError(false);
					data.setErrorMessage(Collections.emptyList());
					data.setMessage("Success");

					if (res != null) {
						return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
					} else {
						return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
					}
				}

			}
			
			//  Get All Occupation Master
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/getalllovdetails")
			@ApiOperation("This method is getall Occupation")
			public ResponseEntity<CommonRes> getallLovDetails(@RequestBody LovGetAllReq req)
			{
				CommonRes data = new CommonRes();
				reqPrinter.reqPrint(req);
				
				List<LovDetailsGetRes> res =service.getallLovDetails(req);
				data.setCommonResponse(res);
				data.setErrorMessage(Collections.emptyList());
				data.setIsError(false);
				data.setMessage("Success");
				
				if(res!= null) {
					return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
				}
				else {
					return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
				}
			}
			
		//  Get Active Occupation Master
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
				@PostMapping("/getactivelovdetails")
				@ApiOperation("This method is get Active Lov Details")
				public ResponseEntity<CommonRes> getActiveLovDetails(@RequestBody LovGetAllReq req)
				{
					CommonRes data = new CommonRes();
					reqPrinter.reqPrint(req);
					
					List<LovDetailsGetRes> res = service.getActiveLovDetails(req);
					data.setCommonResponse(res);
					data.setErrorMessage(Collections.emptyList());
					data.setIsError(false);
					data.setMessage("Success");
					
					if(res!= null) {
						return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
					}
					else {
						return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
					}
				}
			
			// Get By  Id
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/getbyidlovdetails")
			@ApiOperation("This Method is to get by  id Lov Details")
			public ResponseEntity<CommonRes> getByIdLovDetails(@RequestBody LovGetReq req)
			{
			CommonRes data = new CommonRes();
			LovDetailsGetRes res = service.getByIdLovDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
			
			// Occupation Master Drop Down Type
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/dropdown/lovlist")
			@ApiOperation(value = "This method is get Occupation Master Drop Down")

			public ResponseEntity<CommonRes> getLovMasterDropdown(@RequestBody LovDropDownReq req ) {

				CommonRes data = new CommonRes();

				// Save
				List<DropDownRes> res = service.getLovMasterDropdown(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}

			}

			/*		
			// Occupation Master Drop Down Type
			@PostMapping("/dropdown/acexecutives")
			@ApiOperation(value = "This method is get Occupation Master Drop Down")

			public ResponseEntity<CommonRes> getAcExecutivesDropdown(@RequestBody AcExecutiveDropDownReq req) {

				CommonRes data = new CommonRes();

				// Save
				List<DropDownRes> res = service.getAcExecutivesDropdown(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}

			}

			*/

	        @PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/lovdetails/changestatus")
			@ApiOperation(value = "This method is get Lov Details Change Status")
			public ResponseEntity<CommonRes> changeStatusOfOccupation(@RequestBody LovChangeStatusReq req) {

				CommonRes data = new CommonRes();
				// Change Status
				SuccessRes res = service.changeStatusOfLovDetails(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}

			}

			// Get By Item value
			@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/getbyitemvalue")
			@ApiOperation("This Method is to get by  id Lov Details")
			public ResponseEntity<CommonRes> getByItemValue(@RequestBody LovGetReq req) {
				CommonRes data = new CommonRes();
				List<DropDownRes> res = service.getByItemValue(req);
				data.setCommonResponse(res);
				data.setErrorMessage(Collections.emptyList());
				data.setIsError(false);
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}
			
			@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
			@PostMapping("/getbytitletype")
			@ApiOperation("This Method is to get by  id Lov Details")
			public ResponseEntity<CommonRes> getByTitleType(@RequestBody LovGetReq req) {
				CommonRes data = new CommonRes();
				TitleType res = service.getByTitleType(req);
				data.setCommonResponse(res);
				data.setErrorMessage(Collections.emptyList());
				data.setIsError(false);
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

}
