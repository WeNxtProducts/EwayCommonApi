package com.maan.eway.master.controller;
/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.error.Error;
import com.maan.eway.master.req.EmiEndtDetailsReq;
import com.maan.eway.master.req.EmiInstallmentDetailsReq;
import com.maan.eway.master.req.EmiTransactionDetailsGetReq;
import com.maan.eway.master.req.EmiTransactionDetailsNextReq;
import com.maan.eway.master.req.EmiTransactionDetailsSaveReq;
import com.maan.eway.master.req.EmiTransactionDetailsUpdateReq;
import com.maan.eway.master.res.EmiTransactionDetailsRes;
import com.maan.eway.master.res.EmiDisplayRes;
import com.maan.eway.master.service.EmiTransactionDetailsService;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.res.CuurencyDropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * <h2>CurrencyMasterController</h2>
 */

@RestController
@Api(tags = "API : Emi Transaction Details ", description = "API's")
@RequestMapping("/api")
public class EmiTransactionDetailsController {

	@Autowired
	private EmiTransactionDetailsService service;

	@Autowired
	private PrintReqService reqPrinter;

	// save
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/insertemitransactiondetails")
	@ApiOperation(value = "This method is Insert Emi Transaction Details")
	public ResponseEntity<CommonRes> insertEmiTransactionDetails(@RequestBody EmiTransactionDetailsSaveReq req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		List<Error> validation = service.validateEmiTransactionDetails(req);
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			// Get All
			SuccessRes res = service.insertEmiTransactionDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}
	
	//Update
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/updateemitransactiondetails")
	@ApiOperation(value = "This method is Insert Emi Transaction Details")
	public ResponseEntity<CommonRes> updateEmiTransactionDetails(@RequestBody List<EmiTransactionDetailsUpdateReq> req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		List<Error> validation = service.validateUpdateEmiTransactionDetails(req);
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			// Get All
			SuccessRes res = service.updateEmiTransactionDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

	//Emi Details
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getemidetailsbyquoteno")
	@ApiOperation("This method is get Emi Transaction Details")
	public ResponseEntity<CommonRes> getEmiDetailsByQuoteNo(@RequestBody EmiTransactionDetailsGetReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<EmiTransactionDetailsRes> res = service.getEmiDetailsByQuoteNo(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// View Emi Installment Details
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/viewemi")
	@ApiOperation("This method is get Emi Installment Details")
	public ResponseEntity<CommonRes> viewEmiInstallmentDetails(@RequestBody EmiInstallmentDetailsReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);
		List<Error> validation = service.validateEmiInstallmentDetails(req);
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			List<EmiDisplayRes> res = service.viewEmiInstallmentDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
	}

	
	//Get Next Emi Details
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
		@PostMapping("/getnextemidetails")
		@ApiOperation("This method is  Get Next Emi Transaction Details")
		public ResponseEntity<CommonRes> getNextEmiDetails(@RequestBody EmiTransactionDetailsNextReq req) {
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);

			List<EmiTransactionDetailsRes> res = service.getNextEmiDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

   //Endorsement Emi Calculation
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
		@PostMapping("/emiendtcalc")
		@ApiOperation("This method is  Endorsement Emi Calculation s")
		public ResponseEntity<CommonRes> getEndorsementEmiDetails(@RequestBody EmiTransactionDetailsSaveReq req) {
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);

			SuccessRes res = service.getEndorsementEmiDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
}
