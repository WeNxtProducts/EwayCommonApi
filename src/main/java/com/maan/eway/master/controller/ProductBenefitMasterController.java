package com.maan.eway.master.controller;
/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.maan.eway.common.req.CommonErrorModuleReq;
import com.maan.eway.common.req.ProductBenefitDropDownReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.CommonValidationException;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.ProductBenefitChangeStatusReq;
import com.maan.eway.master.req.ProductBenefitGetAllReq;
import com.maan.eway.master.req.ProductBenefitGetReq;
import com.maan.eway.master.req.ProductBenefitSaveReq;
import com.maan.eway.master.res.ProductBenefitGetRes;
import com.maan.eway.master.service.ProductBenefitMasterService;
import com.maan.eway.res.ProductBenefitDropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>CurrencyMasterController</h2>
*/
@RestController
@Api(tags = "MASTER : Benefit Master ", description = "API's")
@RequestMapping("/master")
public class ProductBenefitMasterController {

	@Autowired
	private  ProductBenefitMasterService service;
	
	@Autowired
	private  PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;
	
/*	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/insertproductbenefit")
	@ApiOperation(value="This Method is to save Product Benefit Master")
	public ResponseEntity<CommonRes> saveExclusion(@RequestParam("File") Object file, @RequestParam("Req") String jsonString ) throws CommonValidationException, JsonMappingException, JsonProcessingException{
	//	ProductBenefitSaveReq
		ProductBenefitSaveReq req =  new ObjectMapper().readValue(jsonString, ProductBenefitSaveReq.class);
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);
	//	req.setImageFile(file)	;
		
	List<Error> validation = service.validateProductBenefit(req);
	//validation
	if(validation !=null && validation.size()!=0) {
		data.setCommonResponse(null);
		data.setIsError(true);
		data.setErrorMessage(validation);
		data.setMessage("Failed");
		return new ResponseEntity<CommonRes>(data,HttpStatus.OK);
	} else {
		//save
		SuccessRes res = service.saveProductBenefit(req , file);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		
		if(res!=null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	}
*/
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/insertproductbenefit")
	@ApiOperation(value="This Method is to save Product Benefit Master")
	public ResponseEntity<CommonRes> saveExclusion(@RequestBody ProductBenefitSaveReq req){
		
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes = service.validateProductBenefit(req);
		List<Error> validation = null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode(req.getBranchCode());
			comErrDescReq.setInsuranceId(req.getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}
		
	
	//validation
	if(validation !=null && validation.size()!=0) {
		data.setCommonResponse(null);
		data.setIsError(true);
		data.setErrorMessage(validation);
		data.setMessage("Failed");
		return new ResponseEntity<CommonRes>(data,HttpStatus.OK);
	} else {
		//save
		SuccessRes res = service.saveProductBenefit(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		
		if(res!=null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	}
	//  Get All Exclusion Master
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/getallproductbenefit")
	@ApiOperation("This method is getall Product Benefit")
	public ResponseEntity<CommonRes> getallProductBenefit(@RequestBody ProductBenefitGetAllReq req)
	{
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);
		
		List<ProductBenefitGetRes> res =service.getallProductBenefit(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");
		
		if(res!= null) {
			return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
		}
	}

	//  Get Active Exclusion Master
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
		@PostMapping("/getactiveproductbenefit")
		@ApiOperation("This method is get Active Benefit")
		public ResponseEntity<CommonRes> getActiveExclusion(@RequestBody ProductBenefitGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<ProductBenefitGetRes> res = service.getActiveProductBenefit(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}

	// Get By Exclusion Id
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/getbyproductbenefitid")
	@ApiOperation("This Method is to get by Benefit id")
	public ResponseEntity<CommonRes> getByProductBenefitId(@RequestBody ProductBenefitGetReq req)
	{
	CommonRes data = new CommonRes();
	ProductBenefitGetRes res = service.getByProductBenefitId(req);
	data.setCommonResponse(res);
	data.setErrorMessage(Collections.emptyList());
	data.setIsError(false);
	data.setMessage("Success");

	if (res != null) {
		return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

	} else {
		return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
	}
	}
		
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping("/benefit/changestatus")
	@ApiOperation(value = "This method is get Product Benefit Change Status")
	public ResponseEntity<CommonRes> changeStatusOfProductBenefit(@RequestBody ProductBenefitChangeStatusReq req) {

		CommonRes data = new CommonRes();
		// Change Status
		SuccessRes res = service.changeStatusOfProductBenefit(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}

	//Exclusion Master Drop Down Type
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping(value="/dropdown/productbenefit",produces = "application/json")
	@ApiOperation(value = "This method is get Product Benefit Master Drop Down")

	public ResponseEntity<CommonRes> getExclusionMasterDropdown(@RequestBody ProductBenefitDropDownReq req) {

		CommonRes data = new CommonRes();

		// Save
		List<ProductBenefitDropDownRes> res = service.getProductBenefitDropdown(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}

	
}
