/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.res.CommonRes;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.AcExecutiveGetReq;
import com.maan.eway.master.req.AcExecutiveGetallReq;
import com.maan.eway.master.req.AcExecutiveNonSelectedReq;
import com.maan.eway.master.req.AcExecutiveProductDropDownReq;
import com.maan.eway.master.req.AcExecutiveSaveReq;
import com.maan.eway.master.req.AcExecutiveUpdateReq;
import com.maan.eway.master.res.AcExecutiveGetRes;
import com.maan.eway.master.res.AcExecutiveProductDropdownRes;
import com.maan.eway.master.res.CompanyProductMasterRes;
import com.maan.eway.master.service.AcExecutiveProductMasterService;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * <h2>BankMasterController</h2>
 */

@RestController
@Api(tags = "MASTER : AC Executive Product Master ", description = "API's")
@RequestMapping("/master")
public class AcExecutiveProductMasterController {

	@Autowired
	private PrintReqService reqPrinter;
	
	@Autowired
	private AcExecutiveProductMasterService service;
	
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/saveacexecutive")
	public ResponseEntity<CommonRes> saveacexecutive(@RequestBody AcExecutiveSaveReq req){
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);
		List<Error> validation = service.validateacexecutive(req);
		if(validation!=null && validation.size()>0) {
			data.setCommonResponse(null);
			data.setErrorMessage(validation);
			data.setIsError(true);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);
		}
		else {
			SuccessRes res = service.saveacexecutive(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			if(res!=null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
	}
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/updateacexecutive")
	public ResponseEntity<CommonRes> updateacexecutive(@RequestBody AcExecutiveUpdateReq req){
		CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			List<Error> validation = service.validateupdateacexecutive(req);
			if(validation!=null && validation.size()>0) {
				data.setCommonResponse(null);
				data.setErrorMessage(validation);
				data.setIsError(true);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);
			}
			else {
			
			SuccessRes res = service.updateacexecutive(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			if(res!=null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	}
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getacexecutive")
	public ResponseEntity<CommonRes> getacexecutive(@RequestBody AcExecutiveGetReq req){
		CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			AcExecutiveGetRes res = service.getacexecutive(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			if(res!=null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getallacexecutive")
	public ResponseEntity<CommonRes> getallacexecutive(@RequestBody AcExecutiveGetallReq req){
		CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			List<AcExecutiveGetRes> res = service.getallacexecutive(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			if(res!=null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getallnonselectedproducts")
	@ApiOperation("This method is getall non selected products")
	public ResponseEntity<CommonRes> getallNonSelectedProducts(@RequestBody AcExecutiveNonSelectedReq req)
	{
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);
		
		List<CompanyProductMasterRes> res = service.getallNonSelectedProducts(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");
		
		if(res!= null) {
			return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
		}
	}


	// Dropdown
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER','ROLE_ADMIN')")
	@PostMapping(value="/dropdown/acexecutive",produces = "application/json")
	public ResponseEntity<CommonRes> dropdownacexecutive(@RequestBody AcExecutiveProductDropDownReq req){
		CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			List<AcExecutiveProductDropdownRes> res = service.dropdownacexecutive(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			if(res!=null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	
}
