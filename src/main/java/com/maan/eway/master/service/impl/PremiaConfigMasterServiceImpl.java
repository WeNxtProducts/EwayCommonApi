/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import com.google.gson.Gson;
import com.maan.eway.bean.PremiaConfigDataMaster;
import com.maan.eway.bean.PremiaConfigMaster;
import com.maan.eway.master.req.PremiaConfigMasterChangeStatusReq;
import com.maan.eway.master.req.PremiaConfigMasterDropDownReq;
import com.maan.eway.master.req.PremiaConfigMasterGetAllReq;
import com.maan.eway.master.req.PremiaConfigMasterGetReq;
import com.maan.eway.master.req.PremiaConfigMasterSaveReq;
import com.maan.eway.master.req.PremiaTableColumnDropDownReq;
import com.maan.eway.master.res.PremiaConfigMasterRes;
import com.maan.eway.master.service.PremiaConfigMasterService;
import com.maan.eway.repository.PremiaConfigMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>BankMasterServiceimpl</h2>
*/
@Service
@Transactional
public class PremiaConfigMasterServiceImpl implements PremiaConfigMasterService {



private  Query query =null;

@PersistenceContext
private EntityManager em;

@Autowired
private PremiaConfigMasterRepository repo;

Gson json = new Gson();

private Logger log=LogManager.getLogger(PremiaConfigMasterServiceImpl.class);
	

public Integer getMasterTableCount(String companyId, String branchCode, String productId, String sectionId)	{

	Integer data =0;
	try {
		List<PremiaConfigMaster> list = new ArrayList<PremiaConfigMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PremiaConfigMaster> query = cb.createQuery(PremiaConfigMaster.class);
		//Find all
		Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);
		// Select
		query.select(b);
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<PremiaConfigMaster> ocpm1 = effectiveDate.from(PremiaConfigMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("premiaId"),b.get("premiaId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"),b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
		Predicate a5 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));

		effectiveDate.where(a1,a2,a3,a4,a5);
	
		//OrderBy
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("premiaId")));
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"),effectiveDate);
		Predicate n2 = cb.equal(b.get("companyId"),companyId);
		Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		Predicate n6 = cb.equal(b.get("productId"),productId);
		Predicate n7 = cb.equal(b.get("productId"), "99999");
		Predicate n8 = cb.or(n6,n7);
		Predicate n9 = cb.equal(b.get("sectionId"),sectionId);
		Predicate n10 = cb.equal(b.get("sectionId"), "99999");
		Predicate n11 = cb.or(n9,n10);
		
		query.where(n1,n2,n5,n8,n11).orderBy(orderList);
		
		
		
		// Get Result
		TypedQuery<PremiaConfigMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ? Integer.valueOf(list.get(0).getPremiaId()) : 0 ;
	}
	catch(Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
	}
	return data;
}




public List<PremiaConfigMaster> getPremiaNameExistDetails(String premiaName , String InsuranceId , String branchCode, String productId, String sectionId) {
	List<PremiaConfigMaster> list = new ArrayList<PremiaConfigMaster>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PremiaConfigMaster> query = cb.createQuery(PremiaConfigMaster.class);

		// Find All
		Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PremiaConfigMaster> ocpm1 = amendId.from(PremiaConfigMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("premiaId"), b.get("premiaId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		//Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		//Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
		Predicate a6 = cb.equal(ocpm1.get("productId"), b.get("productId"));
		Predicate a7 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
		
		//amendId.where(a1,a2,a3,a4,a5,a6);
		amendId.where(a1,a2,a3,a6,a7);
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(cb.lower( b.get("premiaTableName")), premiaName.toLowerCase());
		Predicate n3 = cb.equal(b.get("companyId"),InsuranceId);
		Predicate n4 = cb.equal(b.get("branchCode"), StringUtils.isBlank(branchCode)?"99999":branchCode);
		Predicate n7 = cb.equal(b.get("productId"), productId);
		Predicate n8 = cb.equal(b.get("sectionId"),StringUtils.isBlank(sectionId)?"99999":sectionId);
		
		query.where(n1,n2,n3,n4,n7,n8);
		
		// Get Result
		TypedQuery<PremiaConfigMaster> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}



@Override
public List<String> validatePremiaConfig(PremiaConfigMasterSaveReq req) {
	List<String> errorList = new ArrayList<String>();

	try {
		if (StringUtils.isBlank(req.getPremiaTableName())) {
//			errorList.add(new Error("02", "PremiaTableName", "Please Select PremiaTableName"));
			errorList.add("1870");
		}else if (req.getPremiaTableName().length() > 100){
//			errorList.add(new Error("02","PremiaTableName", "Please Enter PremiaTableName 100 Characters"));
			errorList.add("1871");
			}
		
		else if (StringUtils.isBlank(req.getPremiaId()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())&& StringUtils.isNotBlank(req.getSectionId())) {
			List<PremiaConfigMaster> PremiaList = getPremiaNameExistDetails(req.getPremiaTableName() , req.getCompanyId() , req.getBranchCode() , req.getProductId(),req.getSectionId());
			if (PremiaList.size()>0 ) {
//				errorList.add(new Error("01", "Premia Table Name", "This Premia Table Name Already Exist "));
				errorList.add("1872");
			}
		}else if (StringUtils.isNotBlank(req.getPremiaId()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())&& StringUtils.isNotBlank(req.getSectionId())) {
			List<PremiaConfigMaster> PremiaList = getPremiaNameExistDetails(req.getPremiaTableName() , req.getCompanyId() , req.getBranchCode(), req.getProductId(), req.getSectionId());
			
			if (PremiaList.size()>0 &&  (! req.getPremiaId().equalsIgnoreCase(PremiaList.get(0).getPremiaId().toString())) ) {
//				errorList.add(new Error("01", "Premia Table Name", "This Premia Table Name Already Exist "));
				errorList.add("1872");
			}
			
		}
		
		if (StringUtils.isBlank(req.getCompanyId())) {
//			errorList.add(new Error("02", "CompanyId", "Please Enter CompanyId"));
			errorList.add("1255");
		}
		
		if (StringUtils.isBlank(req.getBranchCode())) {
//			errorList.add(new Error("02", "BranchCode", "Please Select BranchCode"));
			errorList.add("1256");
		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
//			errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));
			errorList.add("1261");

		} else if (req.getEffectiveDateStart().before(today)) {
//			errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errorList.add("1262");
		}
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
//			errorList.add(new Error("05", "Status", "Please Select Status  "));
			errorList.add("1263");
		} else if (req.getStatus().length() > 1) {
//			errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			errorList.add("1264");
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
//			errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("1265");
		}

		if (StringUtils.isBlank(req.getCreatedBy())) {
//			errorList.add(new Error("09", "CreatedBy", "Please Select CreatedBy"));
			errorList.add("1270");
		}else if (req.getCreatedBy().length() > 100){
//			errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy within 100 Characters")); 
			errorList.add("1271");
		}		
	
		if (StringUtils.isBlank(req.getQueryKey())) {
//			errorList.add(new Error("10", "QueryKey", "Please Enter QueryKey"));
			errorList.add("1873");
		}
		else if ((StringUtils.isNotBlank(req.getQueryKey())) && req.getQueryKey().length() > 100){
//				errorList.add(new Error("10","QueryKey", "Please Enter QueryKey within 100 Characters")); 
				errorList.add("1874");
			}		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}


@Override
public SuccessRes insertPremiaConfig(PremiaConfigMasterSaveReq req) {
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	PremiaConfigMaster saveData = new PremiaConfigMaster();
	List<PremiaConfigMaster> list  = new ArrayList<PremiaConfigMaster>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId = 0;
		Date StartDate = req.getEffectiveDateStart();
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLS_IN_A_DAY = 1000*60*60*24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime()- MILLS_IN_A_DAY);
		Date entryDate = null;
		String createdBy ="";
		String premiaid = "";
		if(StringUtils.isBlank(req.getPremiaId())) {
			Integer totalCount = getMasterTableCount(req.getCompanyId(),req.getBranchCode(), req.getProductId(),req.getSectionId());
			Integer premia = totalCount+1;
			premiaid = premia.toString();
			entryDate = new Date();
			createdBy = req.getCreatedBy();
			res.setResponse("Saved Successfully");
			res.setSuccessId(premia.toString());
		}
		else {
			premiaid = req.getPremiaId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<PremiaConfigMaster> query = cb.createQuery(PremiaConfigMaster.class);
			//Findall
			Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);
			//select
			query.select(b);
			//Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			//Where
			Predicate n1 = cb.equal(b.get("premiaId"),req.getPremiaId());
			Predicate n2 = cb.equal(b.get("companyId"),req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"),req.getBranchCode());
			Predicate n4 = cb.equal(b.get("productId"),req.getProductId());
			Predicate n5 = cb.equal(b.get("sectionId"),req.getSectionId());
			
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<PremiaConfigMaster> result = em.createQuery(query);
			int limit=0, offset=2;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime()- MILLS_IN_A_DAY);
				if(list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
					amendId = list.get(0).getAmendId()+1;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					PremiaConfigMaster lastRecord = list.get(0);
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repo.saveAndFlush(lastRecord);
				}
				else {
					amendId = list.get(0).getAmendId();
					entryDate = list.get(0).getEntryDate();
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0);
					if(list.size()>1) {
						PremiaConfigMaster lastRecord = list.get(1);	
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				}
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(premiaid.toString());
		}
		dozerMapper.map(req, saveData);
		saveData.setPremiaId(Integer.valueOf(premiaid));
		saveData.setEffectiveDateStart(StartDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setEntryDate(new Date());
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setUpdatedDate(new Date());
		saveData.setAmendId(amendId);
		saveData.setBranchCode(req.getBranchCode());
		saveData.setProductId(req.getProductId());
		saveData.setSectionId(req.getSectionId()==null?"99999":req.getSectionId());
		saveData.setQueryKey(StringUtils.isBlank(req.getQueryKey())?"": req.getQueryKey());
		saveData.setPremiaTableName(req.getPremiaTableName());
		saveData.setEntityName(req.getEntityName());
		/*	String key = "";
		List<String> keys = req.getSourceTableName();
		for (String menuId : keys) {
		key = StringUtils.isBlank(key) ? menuId  :key + "," + menuId;
		}
		key = key.replaceAll(",","~");               

		saveData.setSourceTableName(key);
		*/
		repo.saveAndFlush(saveData);	
		log.info("Saved Details is --> " + json.toJson(saveData));	
		}
	catch(Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
	}
	return res;
	}





@Override
public PremiaConfigMasterRes getPremiaConfig(PremiaConfigMasterGetReq req) {
	PremiaConfigMasterRes res = new PremiaConfigMasterRes();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<PremiaConfigMaster> list = new ArrayList<PremiaConfigMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PremiaConfigMaster> query = cb.createQuery(PremiaConfigMaster.class);

		// Find All
		Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PremiaConfigMaster> ocpm1 = amendId.from(PremiaConfigMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("premiaId"), b.get("premiaId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
		Predicate a5 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));

		amendId.where(a1, a2,a3,a4,a5);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("premiaId")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("premiaId"), req.getPremiaId());
		Predicate n5 = cb.equal(b.get("productId"), req.getProductId());
		Predicate n6 = cb.equal(b.get("sectionId"), req.getSectionId());
		Predicate n7 = cb.equal(b.get("sectionId"),"99999");
		Predicate n8 = cb.or(n6,n7);	
		Predicate n9 = cb.equal(b.get("branchCode"), "99999");
		Predicate n10 = cb.or(n3,n9);
	
		query.where(n1,n2,n10,n4,n5,n8).orderBy(orderList);
		
		// Get Result
		TypedQuery<PremiaConfigMaster> result = em.createQuery(query);

		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPremiaId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(PremiaConfigMaster :: getPremiaTableName ));
		if(list.size()>0 && list!=null) {
		res.setPremiaId(list.get(0).getPremiaId().toString());
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		res.setCompanyId(list.get(0).getCompanyId());
		res.setBranchCode(list.get(0).getBranchCode());
		res.setProductId(list.get(0).getProductId());
		res.setSectionId(list.get(0).getSectionId()==null?"":list.get(0).getSectionId());
		res.setStatus(list.get(0).getStatus());		
		res.setAmendId(list.get(0).getAmendId().toString());
		res.setCreatedBy(list.get(0).getCreatedBy());
		res.setUpdatedBy(list.get(0).getUpdatedBy());
		res.setUpdatedDate(list.get(0).getUpdatedDate());
		res.setRemarks(list.get(0).getRemarks());;
		res.setPremiaTableName(list.get(0).getPremiaTableName());
		res.setEntityName(list.get(0).getEntityName());
		res.setQueryKey(StringUtils.isBlank(list.get(0).getQueryKey())?"":list.get(0).getQueryKey());		
	/*	String tablename = list.get(0).getSourceTableName();
		List<String> tablenames = tablename!=null ? new ArrayList<String>(Arrays.asList(tablename.split("~"))) : new ArrayList<String>() ;
		tablenames = tablenames.stream().filter( o -> ! o.equals("")).collect(Collectors.toList());
		
		res.setSourceTableName(tablenames);	
	*/	
	}
	}catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}


private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}





@Override
public List<PremiaConfigMasterRes> getallPremiaConfig(PremiaConfigMasterGetAllReq req) {
	List<PremiaConfigMasterRes> resList = new ArrayList<PremiaConfigMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<PremiaConfigMaster> list = new ArrayList<PremiaConfigMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PremiaConfigMaster> query = cb.createQuery(PremiaConfigMaster.class);

		// Find All
		Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PremiaConfigMaster> ocpm1 = amendId.from(PremiaConfigMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a2 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a3 = cb.equal(ocpm1.get("premiaId"), b.get("premiaId"));
		Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));

		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		
		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		Predicate n6 = cb.equal(b.get("productId"),req.getProductId());
		Predicate n7 = cb.equal(b.get("productId"),"99999");
		Predicate n8 = cb.or(n6,n7);
		if((StringUtils.isNotBlank(req.getProductId()))) {
		query.where(n1,n2,n5,n8).orderBy(orderList);
		}
		
		else {
			query.where(n1,n2,n5).orderBy(orderList);
			
		}
		
		// Get Result
		TypedQuery<PremiaConfigMaster> result = em.createQuery(query);

		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPremiaId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(PremiaConfigMaster :: getPremiaTableName ));
		if(list.size()>0 && list!=null) {
	
		for(PremiaConfigMaster data : list) {	
		
		PremiaConfigMasterRes res = new PremiaConfigMasterRes();
	
		res.setPremiaId(data.getPremiaId().toString());
		res.setEntryDate(data.getEntryDate());
		res.setEffectiveDateStart(data.getEffectiveDateStart());
		res.setEffectiveDateEnd(data.getEffectiveDateEnd());
		res.setCompanyId(data.getCompanyId());
		res.setBranchCode(data.getBranchCode());
		res.setProductId(data.getProductId());
		res.setSectionId(data.getSectionId()==null?"":data.getSectionId());
		res.setStatus(data.getStatus());		
		res.setAmendId(data.getAmendId().toString());
		res.setCreatedBy(data.getCreatedBy());
		res.setUpdatedBy(data.getUpdatedBy());
		res.setUpdatedDate(data.getUpdatedDate());
		res.setRemarks(data.getRemarks());
		res.setPremiaTableName(data.getPremiaTableName());
		res.setQueryKey(StringUtils.isBlank(data.getQueryKey())?"":data.getQueryKey());		
		res.setEntityName(data.getEntityName());
		/*
		String tablename = data.getSourceTableName();
		List<String> tablenames = tablename!=null ? new ArrayList<String>(Arrays.asList(tablename.split("~"))) : new ArrayList<String>() ;
		tablenames = tablenames.stream().filter( o -> ! o.equals("")).collect(Collectors.toList());
		
		res.setSourceTableName(tablenames);	
		*/
		resList.add(res);
		}
	}
	}catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}





@Override
public List<PremiaConfigMasterRes> getactivePremiaConfig(PremiaConfigMasterGetAllReq req) {
	List<PremiaConfigMasterRes> resList = new ArrayList<PremiaConfigMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<PremiaConfigMaster> list = new ArrayList<PremiaConfigMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PremiaConfigMaster> query = cb.createQuery(PremiaConfigMaster.class);

		// Find All
		Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PremiaConfigMaster> ocpm1 = amendId.from(PremiaConfigMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a2 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a3 = cb.equal(ocpm1.get("premiaId"), b.get("premiaId"));

		amendId.where(a1, a2,a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("status"), "Y");
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3,n5);
	
		query.where(n1,n2,n6,n4).orderBy(orderList);
		
		// Get Result
		TypedQuery<PremiaConfigMaster> result = em.createQuery(query);

		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPremiaId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(PremiaConfigMaster :: getPremiaTableName ));
		if(list.size()>0 && list!=null) {
	
		for(PremiaConfigMaster data : list) {	
		
		PremiaConfigMasterRes res = new PremiaConfigMasterRes();
	
		res.setPremiaId(data.getPremiaId().toString());
		res.setEntryDate(data.getEntryDate());
		res.setEffectiveDateStart(data.getEffectiveDateStart());
		res.setEffectiveDateEnd(data.getEffectiveDateEnd());
		res.setCompanyId(data.getCompanyId());
		res.setBranchCode(data.getBranchCode());
		res.setProductId(data.getProductId());
		res.setSectionId(data.getSectionId()==null?"": data.getSectionId());
		res.setStatus(data.getStatus());		
		res.setAmendId(data.getAmendId().toString());
		res.setCreatedBy(data.getCreatedBy());
		res.setUpdatedBy(data.getUpdatedBy());
		res.setUpdatedDate(data.getUpdatedDate());
		res.setRemarks(data.getRemarks());
		res.setPremiaTableName(data.getPremiaTableName());
		res.setQueryKey(StringUtils.isBlank(data.getQueryKey())?"":data.getQueryKey());		
		res.setEntityName(data.getEntityName());

		/*
		String tablename = data.getSourceTableName();
		List<String> tablenames = tablename!=null ? new ArrayList<String>(Arrays.asList(tablename.split("~"))) : new ArrayList<String>() ;
		tablenames = tablenames.stream().filter( o -> ! o.equals("")).collect(Collectors.toList());
		
		res.setSourceTableName(tablenames);
		*/	
		resList.add(res);
		}
	}
	}catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}





@Override
public SuccessRes changeStatusPremiaConfig(PremiaConfigMasterChangeStatusReq req) {
	SuccessRes res = new SuccessRes();
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	List<PremiaConfigMaster> list = new ArrayList<PremiaConfigMaster>(); 
	PremiaConfigMaster saveData = new PremiaConfigMaster(); 
	try {
		Integer amendId = 0;
		Date StartDate = req.getEffectiveDateStart();
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLS_IN_A_DAY = 1000*60*60*24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime()- MILLS_IN_A_DAY);
		Date entryDate = null;
		String createdBy ="";
		String premiaId = "";
		
		premiaId = req.getPremiaId();
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PremiaConfigMaster> query = cb.createQuery(PremiaConfigMaster.class);
		//Findall
		Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);
		//select
		query.select(b);
		//Orderby
		Subquery<Long> amendId2 = query.subquery(Long.class);
		Root<PremiaConfigMaster> ocpm1 = amendId2.from(PremiaConfigMaster.class);
		amendId2.select(cb.max(ocpm1.get("amendId")));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
		Predicate a5 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));
		Predicate a6 = cb.equal(ocpm1.get("premiaId"),b.get("premiaId"));

		amendId2.where( a2,a3,a4,a5,a6);
		//Orderby
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("premiaId")));
		//Where
		Predicate n2 = cb.equal(b.get("companyId"),req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"),req.getBranchCode());
		Predicate n4 = cb.equal(b.get("amendId"),amendId2);
		Predicate n5 = cb.equal(b.get("productId"),req.getProductId());
		Predicate n6 = cb.equal(b.get("sectionId"),req.getSectionId());
		Predicate n7 = cb.equal(b.get("premiaId"),req.getPremiaId());
		Predicate n8 = cb.equal(b.get("sectionId"),"99999");
		Predicate n9 = cb.or(n6,n8);			
		Predicate n10 = cb.equal(b.get("branchCode"), "99999");
		Predicate n11 = cb.or(n3,n10);
	
		query.where(n2,n11,n4,n5,n9,n7).orderBy(orderList);
		
		// Get Result
		TypedQuery<PremiaConfigMaster> result = em.createQuery(query);
		int limit=0, offset=2;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		if (list.size() > 0) {

			Date beforeOneDay = new Date(new Date().getTime()- MILLS_IN_A_DAY);
			if(list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
				amendId = list.get(0).getAmendId()+1;
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				PremiaConfigMaster lastRecord = list.get(0);
				lastRecord.setEffectiveDateEnd(oldEndDate);
				repo.saveAndFlush(lastRecord);
			}
			else  {
				amendId = list.get(0).getAmendId();
				entryDate = list.get(0).getEntryDate();
				createdBy = list.get(0).getCreatedBy();
				saveData = list.get(0);
				if (list.size()>1 ) {
				PremiaConfigMaster lastRecord = list.get(1);	
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repo.saveAndFlush(lastRecord);
				}
			}
		}
		res.setResponse("Updated Successfully");
		res.setSuccessId(premiaId.toString());
			
		dozerMapper.map(list.get(0), saveData);
		saveData.setEffectiveDateStart(StartDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setUpdatedDate(new Date());
		saveData.setAmendId(amendId);
		saveData.setStatus(req.getStatus());
		saveData.setBranchCode(req.getBranchCode());
		saveData.setEntityName(list.get(0).getEntityName());

		repo.saveAndFlush(saveData);	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getPremiaId());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;
}





@Override
public List<DropDownRes> getPremiaConfigMasterDropdown(PremiaConfigMasterDropDownReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PremiaConfigMaster> query=  cb.createQuery(PremiaConfigMaster.class);
		List<PremiaConfigMaster> list = new ArrayList<PremiaConfigMaster>();
		// Find All
		Root<PremiaConfigMaster> b = query.from(PremiaConfigMaster.class);
		//Select
		query.select(b);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<PremiaConfigMaster> ocpm1 = effectiveDate.from(PremiaConfigMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(b.get("premiaId"),ocpm1.get("premiaId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a3 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a4 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a5 = cb.equal(ocpm1.get("productId"), b.get("productId"));
		Predicate a6 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));

		effectiveDate.where(a1,a2,a3,a4,a5,a6);
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<PremiaConfigMaster> ocpm2 = effectiveDate2.from(PremiaConfigMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a7 = cb.equal(b.get("premiaId"),ocpm2.get("premiaId"));
		Predicate a8 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a9 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
		Predicate a10 = cb.equal(ocpm2.get("branchCode"),b.get("branchCode"));
		Predicate a11 = cb.equal(ocpm2.get("productId"), b.get("productId"));
		Predicate a12 = cb.equal(ocpm2.get("sectionId"), b.get("sectionId"));

		effectiveDate2.where(a7,a8,a9,a10,a11,a12);
		// Where
		Predicate n1 = cb.equal(b.get("status"),"Y");
		Predicate n11 = cb.equal(b.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		Predicate n2 = cb.equal(b.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(b.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(b.get("companyId"),req.getCompanyId());
		Predicate n5 = cb.equal(b.get("branchCode"),req.getBranchCode());
		Predicate n6 = cb.equal(b.get("productId"),req.getProductId());
		Predicate n7 = cb.equal(b.get("sectionId"),req.getSectionId());
		Predicate n8 = cb.equal(b.get("sectionId"),"99999");
		Predicate n9 = cb.or(n8,n7);			
		Predicate n10 = cb.equal(b.get("branchCode"), "99999");
		Predicate n13 = cb.or(n5,n10);
	
		query.where(n12,n2,n3,n4,n13,n6,n9).orderBy(orderList);
		// Get Result
		TypedQuery<PremiaConfigMaster> result = em.createQuery(query);
		list = result.getResultList();
		for (PremiaConfigMaster data : list) {
			// Response 
			DropDownRes res = new DropDownRes();
			res.setCode(data.getPremiaId().toString());
			res.setCodeDesc(data.getPremiaTableName());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
	}
		catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is --->"+e.getMessage());
			return null;
			}
		return resList;
}




@Override
public List<DropDownRes> getPremiaTableDropdown(PremiaTableColumnDropDownReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		
		List<String> object=getPremiaXlColumns(req);
		if(object!=null) {
	
		for (String data : object) {
			// Response 
			DropDownRes res = new DropDownRes();
			res.setCode(data);
			res.setCodeDesc(data);
			resList.add(res);
		}
		}
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return resList;
}




@SuppressWarnings("unchecked")
public List<String> getPremiaXlColumns(PremiaTableColumnDropDownReq req) {
	List<String> display_columns = new ArrayList<String>();
	try {
		query =em.createQuery("SELECT p FROM PremiaConfigDataMaster p where"
				+ " p.companyId=:companyId and p.productId=:productId and p.premiaId=:premiaId");
		query.setParameter("companyId", req.getCompanyId());
		query.setParameter("productId", req.getProductId());
		query.setParameter("premiaId",req.getPremiaId() );
		List<PremiaConfigDataMaster> premiaList=query.getResultList(); 
		if(!CollectionUtils.isEmpty(premiaList)) {
				for (PremiaConfigDataMaster fac :premiaList) {
						display_columns.add(fac.getColumnName());
					}
		}
	}catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return display_columns;
}








}
