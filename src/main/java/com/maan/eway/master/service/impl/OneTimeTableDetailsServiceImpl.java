/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.OneTimeTableDetails;
import com.maan.eway.master.req.ColumnNameDropDownlReq;
import com.maan.eway.master.req.OneTimeTableReq;
import com.maan.eway.master.service.OneTimeTableDetailsService;
import com.maan.eway.repository.OneTimeTableDetailsRepository;
import com.maan.eway.res.DropDownRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>BankMasterServiceimpl</h2>
*/
@Service
@Transactional
public class OneTimeTableDetailsServiceImpl implements OneTimeTableDetailsService {

@PersistenceContext
private EntityManager em;

@Autowired
private OneTimeTableDetailsRepository repo;

Gson json = new Gson();

private Logger log=LogManager.getLogger(OneTimeTableDetailsServiceImpl.class);


@Override
public List<DropDownRes> tableName() {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		//List<OneTimeTableDetails> getList = repo.findByItemTypeAndStatusOrderByItemCodeAsc("ONE_TIME_TABLE", "Y");
		List<OneTimeTableDetails> getList = new ArrayList<OneTimeTableDetails>();
		String itemType = "ONE_TIME_TABLE"; 
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<OneTimeTableDetails> query=  cb.createQuery(OneTimeTableDetails.class);
		// Find All
		Root<OneTimeTableDetails> c = query.from(OneTimeTableDetails.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("itemId")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm1 = effectiveDate.from(OneTimeTableDetails.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate b4 = cb.equal(c.get("parentId"),ocpm1.get("parentId"));
		effectiveDate.where(a1,a2,b2,b4);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm2 = effectiveDate2.from(OneTimeTableDetails.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b5 = cb.equal(c.get("parentId"),ocpm2.get("parentId"));
		effectiveDate2.where(a3,a4,b3,b5);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), "99999");
		Predicate n10 = cb.equal(c.get("itemType"),itemType);
		
	
		query.where(n2,n3,n4,n10,n1).orderBy(orderList);
	

		TypedQuery<OneTimeTableDetails> result = em.createQuery(query);
		getList = result.getResultList();
		
		for (OneTimeTableDetails data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemValue());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
		resList.sort(Comparator.comparing(DropDownRes :: getCodeDesc));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}
@Override
public List<DropDownRes> masterTable(OneTimeTableReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		//List<OneTimeTableDetails> getList = repo.findByItemTypeAndStatusOrderByItemCodeAsc("MASTER_TABLE", "Y");
		List<OneTimeTableDetails> getList = new ArrayList<OneTimeTableDetails>();
		String itemType = "MASTER_TABLE"; 
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<OneTimeTableDetails> query=  cb.createQuery(OneTimeTableDetails.class);
		// Find All
		Root<OneTimeTableDetails> c = query.from(OneTimeTableDetails.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("itemId")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm1 = effectiveDate.from(OneTimeTableDetails.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate b4 = cb.equal(c.get("parentId"),ocpm1.get("parentId"));
		effectiveDate.where(a1,a2,b2,b4);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm2 = effectiveDate2.from(OneTimeTableDetails.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b5 = cb.equal(c.get("parentId"),ocpm2.get("parentId"));
		effectiveDate2.where(a3,a4,b3,b5);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"),req.getInsuranceId());
		Predicate n10 = cb.equal(c.get("itemType"),itemType);
		
	
		query.where(n2,n3,n4,n10,n1).orderBy(orderList);
	

		TypedQuery<OneTimeTableDetails> result = em.createQuery(query);
		getList = result.getResultList();
		for (OneTimeTableDetails data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemValue());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
		resList.sort(Comparator.comparing(DropDownRes :: getCodeDesc));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}
@Override
public List<DropDownRes> eserviceTable(OneTimeTableReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
	//	List<OneTimeTableDetails> getList = repo.findByItemTypeAndStatusOrderByItemCodeAsc("ESERVICE_TABLE", "Y");
		List<OneTimeTableDetails> getList = new ArrayList<OneTimeTableDetails>();
		String itemType = "ESERVICE_TABLE"; 
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<OneTimeTableDetails> query=  cb.createQuery(OneTimeTableDetails.class);
		// Find All
		Root<OneTimeTableDetails> c = query.from(OneTimeTableDetails.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("itemId")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm1 = effectiveDate.from(OneTimeTableDetails.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate b4 = cb.equal(c.get("parentId"),ocpm1.get("parentId"));
		effectiveDate.where(a1,a2,b2,b4);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm2 = effectiveDate2.from(OneTimeTableDetails.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b5 = cb.equal(c.get("parentId"),ocpm2.get("parentId"));
		effectiveDate2.where(a3,a4,b3,b5);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n10 = cb.equal(c.get("itemType"),itemType);
		
	
		query.where(n2,n3,n4,n10,n1).orderBy(orderList);
	

		TypedQuery<OneTimeTableDetails> result = em.createQuery(query);
		getList = result.getResultList();
		for (OneTimeTableDetails data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemCode().replaceAll("\\d", "").replaceAll("([A-Z])", " $1"));
			res.setStatus(data.getStatus());
			resList.add(res);
		}
		resList = resList.stream().filter(distinctByKey(o -> Arrays.asList(o.getCode()))).collect(Collectors.toList());
		resList.sort(Comparator.comparing(DropDownRes :: getCodeDesc));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}

private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}

@Override
public List<DropDownRes> columnName(ColumnNameDropDownlReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		List<OneTimeTableDetails> getList = repo.findByItemIdAndStatusOrderByItemCodeAsc(Integer.valueOf(req.getItemId()), "Y");
		for (OneTimeTableDetails data : getList) {
			if(!data.getItemType().equalsIgnoreCase("ONE_TIME_TABLE")) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getDisplayName());
			res.setStatus(data.getStatus());
			resList.add(res);
			}
		}
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}
@Override
public List<DropDownRes> sourcetable(OneTimeTableReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
	//	List<OneTimeTableDetails> getList = repo.findByItemTypeAndStatusOrderByItemCodeAsc("SOURCE_TABLE", "Y");
		List<OneTimeTableDetails> getList = new ArrayList<OneTimeTableDetails>();
		String itemType = "SOURCE_TABLE"; 
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<OneTimeTableDetails> query=  cb.createQuery(OneTimeTableDetails.class);
		// Find All
		Root<OneTimeTableDetails> c = query.from(OneTimeTableDetails.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("itemId")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm1 = effectiveDate.from(OneTimeTableDetails.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate b4 = cb.equal(c.get("parentId"),ocpm1.get("parentId"));
		effectiveDate.where(a1,a2,b2,b4);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm2 = effectiveDate2.from(OneTimeTableDetails.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b5 = cb.equal(c.get("parentId"),ocpm2.get("parentId"));
		effectiveDate2.where(a3,a4,b3,b5);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n10 = cb.equal(c.get("itemType"),itemType);
		query.where(n2,n3,n4,n10,n1).orderBy(orderList);
		

		TypedQuery<OneTimeTableDetails> result = em.createQuery(query);
		getList = result.getResultList();
		
		for (OneTimeTableDetails data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemValue());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
		resList.sort(Comparator.comparing(DropDownRes :: getCodeDesc));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}
@Override
public List<DropDownRes> integrationtable(OneTimeTableReq req) {
	// TODO Auto-generated method stub
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
	//	List<OneTimeTableDetails> getList = repo.findByItemTypeAndStatusOrderByItemCodeAsc("INTEGRATION_TABLE", "Y");
		List<OneTimeTableDetails> getList = new ArrayList<OneTimeTableDetails>();
		String itemType = "INTEGRATION_TABLE"; 
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<OneTimeTableDetails> query=  cb.createQuery(OneTimeTableDetails.class);
		// Find All
		Root<OneTimeTableDetails> c = query.from(OneTimeTableDetails.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("itemId")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm1 = effectiveDate.from(OneTimeTableDetails.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate b4 = cb.equal(c.get("parentId"),ocpm1.get("parentId"));
		effectiveDate.where(a1,a2,b2,b4);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm2 = effectiveDate2.from(OneTimeTableDetails.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b5 = cb.equal(c.get("parentId"),ocpm2.get("parentId"));
		effectiveDate2.where(a3,a4,b3,b5);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n10 = cb.equal(c.get("itemType"),itemType);
		query.where(n2,n3,n4,n10,n1).orderBy(orderList);
		

		TypedQuery<OneTimeTableDetails> result = em.createQuery(query);
		getList = result.getResultList();
		for (OneTimeTableDetails data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemValue());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
		resList.sort(Comparator.comparing(DropDownRes :: getCodeDesc));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}
@Override
public List<DropDownRes> exceltable(String type) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
	//	List<OneTimeTableDetails> getList = repo.findByItemTypeAndStatusOrderByItemCodeAsc(type, "Y");
		List<OneTimeTableDetails> getList = new ArrayList<OneTimeTableDetails>();
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<OneTimeTableDetails> query=  cb.createQuery(OneTimeTableDetails.class);
		// Find All
		Root<OneTimeTableDetails> c = query.from(OneTimeTableDetails.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("itemId")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm1 = effectiveDate.from(OneTimeTableDetails.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate b4 = cb.equal(c.get("parentId"),ocpm1.get("parentId"));
		effectiveDate.where(a1,a2,b2,b4);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<OneTimeTableDetails> ocpm2 = effectiveDate2.from(OneTimeTableDetails.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b5 = cb.equal(c.get("parentId"),ocpm2.get("parentId"));
		effectiveDate2.where(a3,a4,b3,b5);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), "99999");
		Predicate n10 = cb.equal(c.get("itemType"),type);
		
	
		query.where(n2,n3,n4,n10,n1).orderBy(orderList);
	

		TypedQuery<OneTimeTableDetails> result = em.createQuery(query);
		getList = result.getResultList();
		
		for (OneTimeTableDetails data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemValue());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}

}
