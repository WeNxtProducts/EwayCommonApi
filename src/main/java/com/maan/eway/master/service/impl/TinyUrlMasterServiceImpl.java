/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.TinyurlMaster;
import com.maan.eway.bean.TinyurlRequestDetails;
import com.maan.eway.master.req.TinyUrlChangeStatusReq;
import com.maan.eway.master.req.TinyUrlDropdownReq;
import com.maan.eway.master.req.TinyUrlMasterGetReq;
import com.maan.eway.master.req.TinyUrlMasterGetallReq;
import com.maan.eway.master.req.TinyUrlMasterSaveReq;
import com.maan.eway.master.res.TinyUrlMasterRes;
import com.maan.eway.master.service.TinyUrlMasterService;
import com.maan.eway.repository.TinyurlMasterRepository;
import com.maan.eway.repository.TinyurlRequestDetailsRepository;
import com.maan.eway.req.TinyUrlYnDetailsSaveReq;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>CurrencyMasterServiceimpl</h2>
*/
@Service
@Transactional
public class TinyUrlMasterServiceImpl implements TinyUrlMasterService {

@PersistenceContext
private EntityManager em;

@Autowired
private TinyurlMasterRepository repo;

@Autowired
private TinyurlRequestDetailsRepository tinyReqRepo;
Gson json = new Gson();

private Logger log=LogManager.getLogger(TinyUrlMasterServiceImpl.class);

@Override
public List<String> validateTinyUrl(TinyUrlMasterSaveReq req) {
	List<String> errorList = new ArrayList<String>();

	try {

	
	if (StringUtils.isBlank(req.getType())) {
//		errorList.add(new Error("01", "Type", "Please Enter Type"));
		errorList.add("1710");
	}else if (req.getType().length() > 500){
//		errorList.add(new Error("01","Type", "Please Enter Type 500 Characters")); 
		errorList.add("1711");
	}else if (StringUtils.isBlank(req.getSno()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())) {
		List<TinyurlMaster> typelist = getTypeExistDetails(req.getType(),req.getCompanyId() , req.getBranchCode() , req.getProductId());
		if (typelist.size()>0 ) {
//			errorList.add(new Error("01", "Type", "This Type Already Exist "));
			errorList.add("1712");
		}
		
	}else if (StringUtils.isNotBlank(req.getSno()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())) {
		List<TinyurlMaster> typelist = getTypeExistDetails(req.getType() , req.getCompanyId() , req.getBranchCode() , req.getProductId());
		
		if (typelist.size()>0 &&  (! req.getSno().equalsIgnoreCase(typelist.get(0).getSno().toString())) ) {
//			errorList.add(new Error("01", "Type", "This Type Already Exist "));
			errorList.add("1712");
		}
		
	}
	
	if (StringUtils.isBlank(req.getCompanyId())) {
//		errorList.add(new Error("02", "InsuranceId", "Please Enter InsuranceId"));
		errorList.add("1255");
	}
	
	if (StringUtils.isBlank(req.getBranchCode())) {
	//	errorList.add(new Error("02", "BranchCode", "Please Select BranchCode"));
		errorList.add("1256");
	}

	if (StringUtils.isBlank(req.getProductId())) {
//		errorList.add(new Error("06", "ProductId", "Please Select ProductId"));
		errorList.add("1313");
	}

	
	if (StringUtils.isBlank(req.getRemarks())) {
//		errorList.add(new Error("04", "Remarks", "Please Select Remarks "));
		errorList.add("1259");
	}else if (req.getRemarks().length() > 100){
//		errorList.add(new Error("04","Remarks", "Please Enter Remarks within 100 Characters")); 
		errorList.add("1260");
	}
	
	// Date Validation 
	Calendar cal = new GregorianCalendar();
	Date today = new Date();
	cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
	today = cal.getTime();
	if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
//		errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));
		errorList.add("1261");

	} else if (req.getEffectiveDateStart().before(today)) {
//		errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
		errorList.add("1262");
	}
	//Status Validation
	if (StringUtils.isBlank(req.getStatus())) {
//		errorList.add(new Error("05", "Status", "Please Select Status  "));
		errorList.add("1263");
	} else if (req.getStatus().length() > 1) {
//		errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
		errorList.add("1264");
	}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
//		errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
		errorList.add("1265");
	}
	if(!("Y".equalsIgnoreCase(req.getNotifYn())||"N".equalsIgnoreCase(req.getNotifYn()))) {
//		errorList.add(new Error("06", "getNotifYn", "Please Select NotifYn Y or N "));
		errorList.add("1863");
	}if (StringUtils.isBlank(req.getNotifDesc())) {
//		errorList.add(new Error("07", "NotifDesc", "Please Enter NotifDesc"));
		errorList.add("1864");
	}else if (req.getNotifDesc().length() > 500){
	//	errorList.add(new Error("07","NotifDesc", "Please Enter NotifDesc 500 Characters")); 
		errorList.add("1865");
	}else if (!StringUtils.isAlphaSpace(req.getNotifDesc())){
	//	errorList.add(new Error("07","NotifDesc", "Please Enter Valid Notif Description ")); 
		errorList.add("1866");
	}
	if (req.getRequestYn().equalsIgnoreCase("Y")) {
		Long row = 0L;
		for (TinyUrlYnDetailsSaveReq data : req.getTinyUrlYnDetails()) {
			row = row + 1;

			if (StringUtils.isBlank(data.getRequestColumn())) {
			//	errorList.add(new Error("01", "RequestColumn", "Please Enter Request Column in Row No : " + row));
				errorList.add("1867" + "," + row);
			}
			if (StringUtils.isBlank(data.getRequestJsonKey())) {
		//		errorList.add(new Error("01", "RequestJsonKey", "Please Enter Request Json Key in Row No : " + row));
						
				errorList.add("1868" + "," + row);
			}
			if (StringUtils.isBlank(data.getRequestTable())) {
			//	errorList.add(new Error("01", "RequestTable", "Please Enter Request Table in Row No : " + row));
				errorList.add("1869" + "," + row);
			}
//			if (StringUtils.isBlank(data.getDropdownYn())) {
//				errorList.add(new Error("01", "RequestTable", "Please Enter Request Table in Row No : " + row));
//			}

		}
	}
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}


public List<TinyurlMaster> getTypeExistDetails(String type , String InsuranceId , String branchCode, String productId) {
	List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlMaster> query = cb.createQuery(TinyurlMaster.class);

		// Find All
		Root<TinyurlMaster> b = query.from(TinyurlMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<TinyurlMaster> ocpm1 = amendId.from(TinyurlMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
		Predicate a6 = cb.equal(ocpm1.get("productId"), b.get("productId"));

		amendId.where(a1,a2,a3,a4,a5,a6);

		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(cb.lower( b.get("type")), type.toLowerCase());
		Predicate n3 = cb.equal(b.get("companyId"),InsuranceId);
		Predicate n4 = cb.equal(b.get("companyId"), "99999");
		Predicate n5 = cb.or(n3,n4);		
		Predicate n6 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(b.get("branchCode"), "99999");
		Predicate n8 = cb.or(n6,n7);
		Predicate n9 = cb.equal(b.get("productId"), productId);
		Predicate n10 = cb.equal(b.get("productId"), "99999");
		Predicate n11 = cb.or(n9,n10);
		
		query.where(n1,n2,n5,n8,n11);
		
		// Get Result
		TypedQuery<TinyurlMaster> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}



@Override
public SuccessRes insertTinyUrl(TinyUrlMasterSaveReq req) {
	// TODO Auto-generated method stub
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	TinyurlMaster saveData = new TinyurlMaster();
	List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId=0;
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = null ;
		String createdBy = "" ;
		
		Integer sno = 0 ;
		if(StringUtils.isBlank(req.getSno())) {
			// Save
			Integer totalCount = getMasterTableCount( req.getCompanyId() , req.getBranchCode(), req.getProductId());
			sno =  totalCount+1 ;
			entryDate = new Date();
			createdBy = req.getCreatedBy();
			res.setResponse("Saved Successfully");
			res.setSuccessId(sno.toString());
		}
		else {
			// Update
			sno = Integer.valueOf(req.getSno());
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<TinyurlMaster> query = cb.createQuery(TinyurlMaster.class);
			//Find all
			Root<TinyurlMaster> b = query.from(TinyurlMaster.class);
			//Select 
			query.select(b);
//			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Where
		//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("sno"), req.getSno());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n5 = cb.equal(b.get("productId"), req.getProductId());
			
			query.where(n2,n3,n4,n5).orderBy(orderList);
			
			// Get Result 
			TypedQuery<TinyurlMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					TinyurlMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if (list.size()>1 ) {
						TinyurlMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				
			    }
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(sno.toString());
		}
		dozerMapper.map(req, saveData);
		saveData.setSno(sno);
		saveData.setEffectiveDateStart(startDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(req.getCreatedBy());
		saveData.setStatus(req.getStatus());
		saveData.setCompanyId(req.getCompanyId());
		saveData.setProductId(Integer.valueOf(req.getProductId()));
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedDate(new Date());
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setAmendId(amendId);
		repo.saveAndFlush(saveData);
		log.info("Saved Details is --> " + json.toJson(saveData));
		//
		Integer itemId = 0;
		if (req.getRequestYn().equalsIgnoreCase("Y")) {
			List<TinyurlRequestDetails> tinyReqList=tinyReqRepo.findByTinyId(sno);
			if(tinyReqList.size()>0 || tinyReqList!=null) {
				tinyReqRepo.deleteByTinyId(sno);
			}
			for (TinyUrlYnDetailsSaveReq data : req.getTinyUrlYnDetails()) {
				
				TinyurlRequestDetails tinyUrlYnDetails = new TinyurlRequestDetails();
				itemId = itemId + 1;
				dozerMapper.map(data, tinyUrlYnDetails);
				tinyUrlYnDetails.setItemId(itemId);
				tinyUrlYnDetails.setTinyId(sno);
				tinyUrlYnDetails.setEffectiveDateStart(startDate);
				tinyUrlYnDetails.setEffectiveDateEnd(endDate);
				tinyUrlYnDetails.setEntryDate(entryDate);
				tinyUrlYnDetails.setAmendId(0);
				tinyUrlYnDetails.setStatus(req.getStatus());
				tinyUrlYnDetails.setCompanyId(req.getCompanyId());
//				tinyUrlYnDetails.setBranchCode(req.getBranchCode());
				tinyUrlYnDetails.setBranchCode("99999");
				tinyUrlYnDetails.setProductId(Integer.valueOf(req.getProductId()));
				tinyUrlYnDetails.setEntryDate(entryDate);
				tinyUrlYnDetails.setCreatedBy(createdBy);
				tinyUrlYnDetails.setUpdatedDate(new Date());
				tinyUrlYnDetails.setUpdatedBy(req.getCreatedBy());
				tinyReqRepo.saveAndFlush(tinyUrlYnDetails);
				log.info("Saved Details is --> " + json.toJson(tinyUrlYnDetails));
			}
		}
		}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> "+ e.getMessage());
		return null;
	}
	return res;
	}


public Integer getMasterTableCount(String companyId , String branchCode, String productId) {
	Integer data =0;
	try {
		List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlMaster> query = cb.createQuery(TinyurlMaster.class);
	// Find all
		Root<TinyurlMaster> b = query.from(TinyurlMaster.class);
		//Select 
		query.select(b);

		//Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<TinyurlMaster> ocpm1 = effectiveDate.from(TinyurlMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
		
		effectiveDate.where(a1,a2,a3,a4);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("sno")));
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		Predicate n2 = cb.equal(b.get("companyId"), companyId);
		Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		Predicate n6 = cb.equal(b.get("productId"), productId);
		Predicate n7 = cb.equal(b.get("productId"), "99999");
		Predicate n8 = cb.or(n6,n7);
		query.where(n1,n2,n5,n8).orderBy(orderList);
		
		
		
		// Get Result
		TypedQuery<TinyurlMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ? list.get(0).getSno() : 0 ;
	}
	catch(Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
	}
	return data;
}




@Override
public List<TinyUrlMasterRes> getallTinyUrl(TinyUrlMasterGetallReq req) {
	List<TinyUrlMasterRes> resList = new ArrayList<TinyUrlMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlMaster> query = cb.createQuery(TinyurlMaster.class);

		// Find All
		Root<TinyurlMaster> b = query.from(TinyurlMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<TinyurlMaster> ocpm1 = amendId.from(TinyurlMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));

		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
		Predicate n7 = cb.equal(b.get("productId"), "99999");
		Predicate n8 = cb.or(n6,n7);
	
		query.where(n1,n2,n5,n8).orderBy(orderList);
		
		// Get Result
		TypedQuery<TinyurlMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSno()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(TinyurlMaster :: getType ));
		// Map
		for (TinyurlMaster data : list) {
			TinyUrlMasterRes res = new TinyUrlMasterRes();

			res = mapper.map(data, TinyUrlMasterRes.class);

			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}


@Override
public TinyUrlMasterRes getTinyUrl(TinyUrlMasterGetReq req) {
	TinyUrlMasterRes res = new TinyUrlMasterRes();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlMaster> query = cb.createQuery(TinyurlMaster.class);

		// Find All
		Root<TinyurlMaster> b = query.from(TinyurlMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<TinyurlMaster> ocpm1 = amendId.from(TinyurlMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));

		amendId.where(a1, a2,a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("sno"), req.getSno());
		query.where(n1,n2,n4,n3).orderBy(orderList);
		
		// Get Result
		TypedQuery<TinyurlMaster> result = em.createQuery(query);

		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSno()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(TinyurlMaster :: getType ));
		res = mapper.map(list.get(0), TinyUrlMasterRes.class);
		res.setSno(list.get(0).getSno().toString());
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		List<TinyUrlYnDetailsSaveReq> dropdownList = new ArrayList<TinyUrlYnDetailsSaveReq>();
		if (list.get(0).getRequestYn().equalsIgnoreCase("Y")) {
			List<TinyurlRequestDetails> tinyrequestres = getTinyUrlRequestDetailsById(req);
			for (TinyurlRequestDetails data : tinyrequestres) {
				TinyUrlYnDetailsSaveReq dropRes=new TinyUrlYnDetailsSaveReq();
				dropRes=mapper.map(data, TinyUrlYnDetailsSaveReq.class);
				dropdownList.add(dropRes);
			}
		}
		res.setTinyUrlYnDetails(dropdownList);
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}

public List<TinyurlRequestDetails> getTinyUrlRequestDetailsById(TinyUrlMasterGetReq req) {
//	List<DropdownTableDetails> res = new ArrayList<DropdownTableDetails>();
	List<TinyurlRequestDetails> list = new ArrayList<TinyurlRequestDetails>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlRequestDetails> query = cb.createQuery(TinyurlRequestDetails.class);

		// Find All
		Root<TinyurlRequestDetails> b = query.from(TinyurlRequestDetails.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<TinyurlRequestDetails> ocpm1 = amendId.from(TinyurlRequestDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("tinyId"), b.get("tinyId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("tinyId"), req.getSno());
		Predicate n8 = cb.equal(b.get("productId"),req.getProductId());
		query.where(n1,n2,n4,n3,n8).orderBy(orderList);
		
		// Get Result
		TypedQuery<TinyurlRequestDetails> result = em.createQuery(query);
		list = result.getResultList();
		
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return list;
}

@Override
public List<TinyUrlMasterRes> getactiveTinyUrl(TinyUrlMasterGetallReq req) {
	List<TinyUrlMasterRes> resList = new ArrayList<TinyUrlMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlMaster> query = cb.createQuery(TinyurlMaster.class);

		// Find All
		Root<TinyurlMaster> b = query.from(TinyurlMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<TinyurlMaster> ocpm1 = amendId.from(TinyurlMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));

		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
		Predicate n7 = cb.equal(b.get("productId"), "99999");
		Predicate n8 = cb.or(n6,n7);
		Predicate n9 = cb.equal(b.get("status"), "Y");

		query.where(n1,n2,n5,n8,n9).orderBy(orderList);
		
		// Get Result
		TypedQuery<TinyurlMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSno()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(TinyurlMaster :: getType ));
		// Map
		for (TinyurlMaster data : list) {
			TinyUrlMasterRes res = new TinyUrlMasterRes();

			res = mapper.map(data, TinyUrlMasterRes.class);

			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


@Override
public SuccessRes changestatusTinyUrl(TinyUrlChangeStatusReq req) {
	SuccessRes res = new SuccessRes();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
		
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlMaster> query = cb.createQuery(TinyurlMaster.class);
		// Find all
		Root<TinyurlMaster> b = query.from(TinyurlMaster.class);
		//Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<TinyurlMaster> ocpm1 = amendId.from(TinyurlMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));

		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("sno"), req.getSno());
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3,n5);
		Predicate n7 = cb.equal(b.get("productId"), req.getProductId());
		Predicate n8 = cb.equal(b.get("productId"), "99999");
		Predicate n9 = cb.or(n7,n8);
		
		query.where(n1,n2,n4,n6,n9).orderBy(orderList);
		
		// Get Result 
		TypedQuery<TinyurlMaster> result = em.createQuery(query);
		list = result.getResultList();
		TinyurlMaster updateRecord = list.get(0);
		if(  req.getBranchCode().equalsIgnoreCase(updateRecord.getBranchCode())) {
			updateRecord.setStatus(req.getStatus());
			repo.save(updateRecord);
		} else {
			TinyurlMaster saveNew = new TinyurlMaster();
			dozerMapper.map(updateRecord,saveNew);
			saveNew.setBranchCode(req.getBranchCode());
			saveNew.setStatus(req.getStatus());
			repo.save(saveNew);
		}
	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getSno());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;
}


@Override
public List<DropDownRes> getTinyUrlDropdown(TinyUrlDropdownReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<TinyurlMaster> query=  cb.createQuery(TinyurlMaster.class);
		List<TinyurlMaster> list = new ArrayList<TinyurlMaster>();
		// Find All
		Root<TinyurlMaster> c = query.from(TinyurlMaster.class);
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<TinyurlMaster> ocpm1 = effectiveDate.from(TinyurlMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("sno"),ocpm1.get("sno"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
		Predicate a9 = cb.equal(c.get("productId"),ocpm1.get("productId"));

		effectiveDate.where(a1,a2,a5,a6,a9);
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<TinyurlMaster> ocpm2 = effectiveDate2.from(TinyurlMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("sno"),ocpm2.get("sno"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
		Predicate a10 = cb.equal(c.get("productId"),ocpm2.get("productId"));
		
		effectiveDate2.where(a3,a4,a7,a8,a10);
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n11 = cb.equal(c.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"),req.getCompanyId());
		Predicate n5 = cb.equal(c.get("branchCode"),req.getBranchCode());
		Predicate n6 = cb.equal(c.get("branchCode"),"99999");
		Predicate n7 = cb.or(n5,n6);
		Predicate n8 = cb.equal(c.get("productId"),req.getProductId());
		Predicate n9 = cb.equal(c.get("productId"),"99999");
		Predicate n10 = cb.or(n8,n9);

		query.where(n12,n2,n3,n4,n7,n10).orderBy(orderList);
		
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSno()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(TinyurlMaster :: getType ));
		
		// Get Result
		TypedQuery<TinyurlMaster> result = em.createQuery(query);
		list = result.getResultList();
		for (TinyurlMaster data : list) {
			// Response 
			DropDownRes res = new DropDownRes();
			res.setCode(data.getSno().toString());
			res.setCodeDesc(data.getType());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
	}
		catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is --->"+e.getMessage());
			return null;
			}
		return resList;
	}


}