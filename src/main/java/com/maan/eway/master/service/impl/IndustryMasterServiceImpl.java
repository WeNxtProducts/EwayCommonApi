/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.IndustryMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.master.req.IndustryMasterChangeStatusReq;
import com.maan.eway.master.req.IndustryMasterDropdownReq;
import com.maan.eway.master.req.IndustryMasterGetReq;
import com.maan.eway.master.req.IndustryMasterGetallReq;
import com.maan.eway.master.req.IndustryMasterSaveReq;
import com.maan.eway.master.res.IndustryMasterRes;
import com.maan.eway.master.service.IndustryMasterService;
import com.maan.eway.repository.IndustryMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.res.IndustryDropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>CityMasterServiceimpl</h2>
 */
@Service
@Transactional
public class IndustryMasterServiceImpl implements IndustryMasterService {

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private IndustryMasterRepository industryrepo;

	@Autowired
	private ListItemValueRepository listrepo;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(IndustryMasterServiceImpl.class);

	@Override
	public List<IndustryDropDownRes> getIndustryMasterDropdown(IndustryMasterDropdownReq req) {
		List<IndustryDropDownRes> resList = new ArrayList<IndustryDropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query=  cb.createQuery(IndustryMaster.class);
			List<IndustryMaster> list = new ArrayList<IndustryMaster>();
			// Find All
			Root<IndustryMaster> c = query.from(IndustryMaster.class);
			//Select
			query.select(c);
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm1 = effectiveDate.from(IndustryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("categoryId"),ocpm1.get("categoryId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate a9 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			Predicate a10 = cb.equal(c.get("industryId"),ocpm1.get("industryId"));
		//	Predicate a10 = cb.lessThanOrEqualTo(c.get("effectiveDateStart"),today);

			effectiveDate.where(a1,a2,a5,a6,a9,a10);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm2 = effectiveDate2.from(IndustryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("categoryId"),ocpm2.get("categoryId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			Predicate a11 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			Predicate a12 = cb.equal(c.get("industryId"),ocpm2.get("industryId"));
		//	Predicate a12 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);

			effectiveDate2.where(a3,a4,a7,a8,a11,a12);
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),req.getCompanyId());
			Predicate n5 = cb.equal(c.get("branchCode"),req.getBranchCode());
			Predicate n6 = cb.equal(c.get("branchCode"),"99999");
			Predicate n7 = cb.or(n5,n6);
			Predicate n8 = cb.equal(c.get("productId"),req.getProductId());
			Predicate n9 = null ;
			if(StringUtils.isNotBlank(req.getCategoryId()) ) {
				n9 = cb.equal(c.get("categoryId"),req.getCategoryId());	
					
			} else {
				n9 = cb.isNotNull(c.get("categoryId"));
			
			}
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("industryName")));
						
			
			if(StringUtils.isBlank(req.getProductId())) {
				query.where(n12,n2,n3,n4,n7,n9).orderBy(orderList);
				
			}
			else {
			query.where(n12,n2,n3,n4,n7,n8,n9).orderBy(orderList);
			}
			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			list = result.getResultList();
		
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getIndustryId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(IndustryMaster :: getIndustryName ));
			
			for (IndustryMaster data : list) {
				// Response 
				IndustryDropDownRes res = new IndustryDropDownRes();
				res.setCode(data.getIndustryId().toString());
				res.setCodeDesc(data.getIndustryName());
				res.setStatus(data.getStatus());
				res.setCategoryId(data.getCategoryId());
				res.setCategoryDesc(data.getCategoryDesc());
				
				resList.add(res);
			}
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return resList;
			
	}
			
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	@Override
	public List<String> validateIndustryDetails(IndustryMasterSaveReq req) {
		// TODO Auto-generated method stub
		List<String> errorList = new ArrayList<String>();

		try {
		
			if (StringUtils.isBlank(req.getIndustryName())) {
			//	errorList.add(new Error("02", "IndustryName", "Please Enter IndustryName"));
				errorList.add("1388");
				
			}else if (req.getIndustryName().length() > 100){
			//	errorList.add(new Error("02","IndustryName", "Please Enter IndustryName 100 Characters")); 
				errorList.add("1389");
			}else if (StringUtils.isBlank(req.getIndustryId()) &&  StringUtils.isNotBlank(req.getCategoryId()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())) {
				List<IndustryMaster> industrylist = getCategoryDescExistDetails( req.getIndustryName(), req.getCategoryId() , req.getCompanyId() , req.getBranchCode() , req.getProductId());
				if (industrylist.size()>0 ) {
				//	errorList.add(new Error("01", "IndustryName", "This IndustryName Already Exist "));
					errorList.add("1390");
				}
			}else if (StringUtils.isNotBlank(req.getIndustryId()) && StringUtils.isNotBlank(req.getCategoryId()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())) {
				List<IndustryMaster> industrylist = getCategoryDescExistDetails(req.getIndustryName(),req.getCategoryId() , req.getCompanyId() , req.getBranchCode(), req.getProductId());
				
				if (industrylist.size()>0 &&  (! req.getCategoryId().equalsIgnoreCase(industrylist.get(0).getCategoryId().toString())) ) {
				//	errorList.add(new Error("01", "IndustryName", "This Industry Name Already Exist "));
					errorList.add("1390");
				}
				
			}
			
			
			
			if (StringUtils.isBlank(req.getCompanyId())) {
				//errorList.add(new Error("02", "CompanyId", "Please Enter CompanyId"));
				errorList.add("1255");
			}
			
			if (StringUtils.isBlank(req.getBranchCode())) {
			//	errorList.add(new Error("02", "BranchCode", "Please Select BranchCode"));
				errorList.add("1256");
			}
			
			if (StringUtils.isBlank(req.getRemarks())) {
			//	errorList.add(new Error("04", "Remarks", "Please Enter Remarks "));
				errorList.add("1259");
			}else if (req.getRemarks().length() > 100){
			//	errorList.add(new Error("04","Remarks", "Please Enter Remarks within 100 Characters")); 
				errorList.add("1260");
			}
			
			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
			//	errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));
				errorList.add("1261");

			} else if (req.getEffectiveDateStart().before(today)) {
			//	errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("1262");
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
			//	errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("1265");
			}

			if (StringUtils.isBlank(req.getCoreAppCode())) {
				//errorList.add(new Error("07", "CoreAppCode", "Please Enter CoreAppCode"));
				errorList.add("1266");
			}else if (req.getCoreAppCode().length() > 20){
			//	errorList.add(new Error("07","CoreAppCode", "Please Enter CoreAppCode within 20 Characters")); 
				errorList.add("1267");
			}
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
			//	errorList.add(new Error("08", "RegulatoryCode", "Please Enter RegulatoryCode"));
				errorList.add("1268");
			}else if (req.getRegulatoryCode().length() > 20){
			//	errorList.add(new Error("08","RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters")); 
				errorList.add("1269");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("09", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("1270");
			}else if (req.getCreatedBy().length() > 100){
				//errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy within 100 Characters")); 
				errorList.add("1271");
			}
			if (StringUtils.isBlank(req.getProductId())) {
			//	errorList.add(new Error("10", "ProductId", "Please Select ProductId"));
				errorList.add("1313");
			}
			
			if (StringUtils.isBlank(req.getCategoryId())) {
			//	errorList.add(new Error("11", "CategoryId", "Please Enter CategoryId"));
				errorList.add("1391");
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}
	private List<IndustryMaster> getCategoryDescExistDetails(String industryName,String categoryId, String companyId, String branchCode,
			String productId) {
		// TODO Auto-generated method stub
		List<IndustryMaster> list = new ArrayList<IndustryMaster>();
		try {
			Date today = new Date();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);

			// Find All
			Root<IndustryMaster> b = query.from(IndustryMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<IndustryMaster> ocpm1 = amendId.from(IndustryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
			Predicate a6 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			
			amendId.where(a1,a2,a3,a4,a5,a6);

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(cb.lower( b.get("industryName")), industryName.toLowerCase());
			Predicate n3 = cb.equal(b.get("companyId"),companyId);
			Predicate n4 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n5 = cb.equal(b.get("branchCode"), "99999");
			Predicate n6 = cb.or(n4,n5);
			Predicate n7 = cb.equal(b.get("productId"), productId);
			Predicate n8 = cb.equal(b.get("categoryId"), categoryId);
			
			query.where(n1,n2,n3,n6,n7,n8);
			
			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}


	@Override
	public SuccessRes insertIndustry(IndustryMasterSaveReq req) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		IndustryMaster saveData = new IndustryMaster();
		List<IndustryMaster> list = new ArrayList<IndustryMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			
			Integer industryId = 0 ;
			ListItemValue data = listrepo.findByItemTypeAndItemCodeAndCompanyId("INDUSTRY_CATEGORY",req.getCategoryId(),req.getCompanyId());

			if(StringUtils.isBlank(req.getIndustryId())) {
				// Save
				Integer totalCount = getMasterTableCount(req.getCategoryId(),req.getBranchCode(), req.getProductId(), req.getCompanyId());
				industryId =  totalCount+1 ;
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Saved Successfully");
				res.setSuccessId(industryId.toString());
			}
			else {
				// Update
				industryId = Integer.valueOf(req.getIndustryId());
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
				//Find all
				Root<IndustryMaster> b = query.from(IndustryMaster.class);
				//Select 
				query.select(b);
//				
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));
				
				// Where
			//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n2 = cb.equal(b.get("categoryId"), req.getCategoryId());
				Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
				Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
				Predicate n5 = cb.equal(b.get("productId"), req.getProductId());
				Predicate n6 = cb.equal(b.get("industryId"), req.getIndustryId());
				
				query.where(n2,n3,n4,n5,n6).orderBy(orderList);
				
				// Get Result 
				TypedQuery<IndustryMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						IndustryMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							industryrepo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							IndustryMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							industryrepo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(industryId.toString());
			}
			dozerMapper.map(req, saveData);
			saveData.setIndustryId(industryId);
			saveData.setIndustryName(req.getIndustryName());
			saveData.setCategoryId(req.getCategoryId());
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setCompanyId(req.getCompanyId());
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setCoreAppCode(req.getCoreAppCode());
			saveData.setCategoryDesc(data.getItemValue());
		    saveData.setIndustryNameLocal(req.getCodeDescLocal());
			industryrepo.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
			
			}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> "+ e.getMessage());
			return null;
		}
		return res;
		}


	public Integer getMasterTableCount(String categoryId , String branchCode, String productId, String companyId) {
		Integer data =0;
		try {
			List<IndustryMaster> list = new ArrayList<IndustryMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
		// Find all
			Root<IndustryMaster> b = query.from(IndustryMaster.class);
			//Select 
			query.select(b);

			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm1 = effectiveDate.from(IndustryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a5 = cb.equal(ocpm1.get("industryId"), b.get("industryId"));

			effectiveDate.where(a1,a2,a3,a4,a5);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("industryId")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n4 = cb.equal(b.get("branchCode"), "99999");
			Predicate n5 = cb.or(n3,n4);
			Predicate n6 = cb.equal(b.get("productId"),productId);
			Predicate n7 = cb.equal(b.get("categoryId"),categoryId);

			query.where(n1,n2,n5,n6,n7).orderBy(orderList);
			
			
			
			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			int limit = 0 , offset = 1 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			data = list.size() > 0 ? Integer.valueOf(list.get(0).getIndustryId()) : 0 ;
		}
		catch(Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}

	
	
	@Override
	public List<IndustryMasterRes> getallIndustry(IndustryMasterGetallReq req) {
		// TODO Auto-generated method stub
		List<IndustryMasterRes> resList = new ArrayList<IndustryMasterRes>();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			List<IndustryMaster> list = new ArrayList<IndustryMaster>();
			//Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
		
			//FindAll
			Root<IndustryMaster> b = query.from(IndustryMaster.class);
			
			// Select 
			query.select(b);
			/*
			//Amend Id Max
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<IndustryMaster> ocpm1 = amendId.from(IndustryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
			
			amendId.where(a1, a2,a3,a4);
			*/
			
			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm1 = effectiveDate.from(IndustryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a9 = cb.equal(ocpm1.get("industryId"),b.get("industryId"));
			Predicate a10 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today);

			effectiveDate.where(a1,a2,a3,a4,a10,a9);

			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm2 = effectiveDate2.from(IndustryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(ocpm2.get("categoryId"), b.get("categoryId"));
			Predicate a6 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a7 = cb.equal(ocpm2.get("branchCode"), b.get("branchCode"));
			Predicate a8 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a12 = cb.equal(ocpm2.get("industryId"),b.get("industryId"));
			Predicate a11 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"),todayEnd);

			effectiveDate2.where(a5,a6,a7,a8,a11,a12);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("industryName")));

			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
			//Predicate n4 = cb.equal(b.get("branchCode"), "99999");
			//Predicate n5 = cb.or(n3,n4);
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n7 = cb.equal(b.get("categoryId"),req.getCategoryId());
			Predicate n8 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);

			
			query.where(n1,n2,n3,n6,n7,n8).orderBy(orderList);
			
			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getIndustryId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(IndustryMaster :: getIndustryName ));
			// Map
			for (IndustryMaster data : list) {
				IndustryMasterRes res = new IndustryMasterRes();

				res = dozermapper.map(data, IndustryMasterRes.class);
				res.setCompanyId(data.getCompanyId());
				res.setCodeDescLocal(data.getIndustryNameLocal());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	

	@Override
	public List<IndustryMasterRes> getActiveIndustryMaster(IndustryMasterGetallReq req) {
		// TODO Auto-generated method stub
		List<IndustryMasterRes> resList = new ArrayList<IndustryMasterRes>();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			List<IndustryMaster> list = new ArrayList<IndustryMaster>();
			//Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
		
			//FindAll
			Root<IndustryMaster> b = query.from(IndustryMaster.class);
			
			// Select 
			query.select(b);
			/*
			//Amend Id Max
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<IndustryMaster> ocpm1 = amendId.from(IndustryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));

			amendId.where(a1, a2,a3,a4);
			*/
			
			
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm1 = effectiveDate.from(IndustryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a10 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today);

			effectiveDate.where(a1,a2,a3,a4,a10);

			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm2 = effectiveDate2.from(IndustryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(ocpm2.get("categoryId"), b.get("categoryId"));
			Predicate a6 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a7 = cb.equal(ocpm2.get("branchCode"), b.get("branchCode"));
			Predicate a8 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a11 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"),todayEnd);

			effectiveDate2.where(a5,a6,a7,a8,a11);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("categoryId")));

			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n4 = cb.equal(b.get("branchCode"), "99999");
			Predicate n5 = cb.or(n3,n4);
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());			
			Predicate n7 = cb.equal(b.get("status"),"Y");
			Predicate n8 = cb.equal(b.get("categoryId"),req.getCategoryId());
			Predicate n9 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);

			query.where(n1,n2,n5,n6,n7,n8,n9).orderBy(orderList);
			
			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getIndustryId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(IndustryMaster :: getIndustryName ));
			// Map
			for (IndustryMaster data : list) {
				IndustryMasterRes res = new IndustryMasterRes();

				res = dozermapper.map(data, IndustryMasterRes.class);
				res.setCompanyId(data.getCompanyId());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public IndustryMasterRes getByIndustryId(IndustryMasterGetReq req) {
		// TODO Auto-generated method stub
		IndustryMasterRes res = new IndustryMasterRes();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			List<IndustryMaster> list = new ArrayList<IndustryMaster>();
			//Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
		
			//FindAll
			Root<IndustryMaster> b = query.from(IndustryMaster.class);
			
			// Select 
			query.select(b);
			/*
			//Amend Id Max
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<IndustryMaster> ocpm1 = amendId.from(IndustryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));

			amendId.where(a1, a2,a3,a4);
			 */
			
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm1 = effectiveDate.from(IndustryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("categoryId"), b.get("categoryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a9 = cb.equal(ocpm1.get("industryId"), b.get("industryId"));
			Predicate a11 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today);

			effectiveDate.where(a1,a2,a3,a4,a9,a11);

			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<IndustryMaster> ocpm2 = effectiveDate2.from(IndustryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(ocpm2.get("categoryId"), b.get("categoryId"));
			Predicate a6 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a7 = cb.equal(ocpm2.get("branchCode"), b.get("branchCode"));
			Predicate a8 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a10 = cb.equal(ocpm2.get("industryId"), b.get("industryId"));
			Predicate a13 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"),todayEnd);

			effectiveDate2.where(a5,a6,a7,a8,a10,a13);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("industryId")));

			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n4 = cb.equal(b.get("branchCode"), "99999");
			Predicate n5 = cb.or(n3,n4);
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());			
			Predicate n7 = cb.equal(b.get("categoryId"),req.getCategoryId());
			Predicate n8 = cb.equal(b.get("industryId"),req.getIndustryId());
			Predicate n10 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);

			query.where(n1,n2,n5,n6,n7,n8,n10).orderBy(orderList);
			
			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getIndustryId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(IndustryMaster :: getIndustryName ));
				res = dozermapper.map(list.get(0), IndustryMasterRes.class);
				res.setCodeDescLocal(list.get(0).getIndustryNameLocal());
			

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}

	@Override
	public SuccessRes changeStatus(IndustryMasterChangeStatusReq req) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		IndustryMaster saveData = new IndustryMaster();
		List<IndustryMaster> list = new ArrayList<IndustryMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
				//Find all
				Root<IndustryMaster> b = query.from(IndustryMaster.class);
				//Select 
				query.select(b);
//				
				
				// Where
			//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n2 = cb.equal(b.get("categoryId"), req.getCategoryId());
				Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
				Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
				Predicate n5 = cb.equal(b.get("productId"), req.getProductId());
				Predicate n6 = cb.equal(b.get("industryId"),req.getIndustryId());

				
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));

				
				query.where(n2,n3,n4,n5,n6).orderBy(orderList);

				
				
				// Get Result 
				TypedQuery<IndustryMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						IndustryMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							industryrepo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							IndustryMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							industryrepo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Status Changed Successfully");
				res.setSuccessId(req.getIndustryId());
			
			dozerMapper.map(list.get(0), saveData);
			saveData.setEffectiveDateStart(req.getEffectiveDateStart());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setCompanyId(req.getCompanyId());
			saveData.setUpdatedDate(new Date());
			industryrepo.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
			
			}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> "+ e.getMessage());
			return null;
		}
		return res;
		}
}
