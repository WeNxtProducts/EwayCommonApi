/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.admin.req.AttachCompnayProductRequest;
import com.maan.eway.admin.req.BrokerCreationReq;
import com.maan.eway.admin.req.BrokerLoginInfoReq;
import com.maan.eway.admin.req.BrokerPersonalInfoReq;
import com.maan.eway.admin.req.DirectBrokerCreateReq;
import com.maan.eway.admin.res.LoginCreationRes;
import com.maan.eway.admin.service.LoginDetailsService;
import com.maan.eway.auth.dto.LoginBranchDetailsRes;
import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CompanyRegionMaster;
import com.maan.eway.bean.EndtTypeMaster;
import com.maan.eway.bean.LoginBranchMaster;
import com.maan.eway.bean.LoginBranchMasterArch;
import com.maan.eway.bean.LoginProductMaster;
import com.maan.eway.bean.SeqAgencycode;
import com.maan.eway.bean.StateMaster;
import com.maan.eway.master.req.BranchChangeStatusReq;
import com.maan.eway.master.req.BranchMasterGetAllReq;
import com.maan.eway.master.req.BranchMasterGetReq;
import com.maan.eway.master.req.BranchMasterSaveReq;
import com.maan.eway.master.req.CompanyBranchGetReq;
import com.maan.eway.master.req.CompanyBranchReq;
import com.maan.eway.master.res.BranchMasterRes;
import com.maan.eway.master.service.BranchMasterService;
import com.maan.eway.repository.BranchMasterRepository;
import com.maan.eway.repository.LoginBranchMasterArchRepository;
import com.maan.eway.repository.LoginBranchMasterRepository;
import com.maan.eway.repository.LoginProductMasterRepository;
import com.maan.eway.repository.SeqAgencycodeRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Tuple;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.CriteriaUpdate;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>BranchMasterServiceimpl</h2>
*/
@Service
@Transactional
public class BranchMasterServiceImpl implements BranchMasterService {

@PersistenceContext
private EntityManager em;

@Autowired
private BranchMasterRepository branchRepo;

@Autowired
private LoginBranchMasterRepository loginBrokerRepo;

@Autowired
private LoginBranchMasterArchRepository loginBrokerArchRepo;

@Autowired
private LoginProductMasterRepository loginProductRepo;

@Autowired
private SeqAgencycodeRepository seqAgencyRepo;

@Autowired
private LoginDetailsService loginService ;

Gson json = new Gson();

private Logger log=LogManager.getLogger(BranchMasterServiceImpl.class);

//************************************************INSERT/UPDATE BRANCH DETAILS******************************************************\\
@Transactional
@Override
public SuccessRes insertBranch(BranchMasterSaveReq req) {
    SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
	SuccessRes res = new SuccessRes();
	BranchMaster saveData = new BranchMaster();
	List<BranchMaster> list = new ArrayList<BranchMaster>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Integer amendId = 0 ;
		String branchCode = "";
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdformat.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = null ;
		String createdBy = "" ;
		if (StringUtils.isBlank(req.getBranchCode())) {
				// Save
				Integer totalCount=getMasterTableCount();
				if(totalCount<=9) {
					branchCode = "0"+ totalCount+1 ;
							
				}
				else {
					Integer total = totalCount+1;
					branchCode =  total.toString();
					
				}
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Saved Successfully");
				res.setSuccessId(branchCode);
				}
		else {
			branchCode = req.getBranchCode();

				// Update
				// Get Less than Equal Today Record 
				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);

				// Find All
				Root<BranchMaster> b = query.from(BranchMaster.class);

				// Select
				query.select(b);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));
				
				Predicate n1 = cb.equal(b.get("companyId"), req.getCompanyId());
				Predicate n2 = cb.equal(b.get("branchCode"), req.getBranchCode());

				query.where(n1,n2).orderBy(orderList);

				// Get Result 
				TypedQuery<BranchMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						BranchMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							branchRepo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							BranchMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							branchRepo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(req.getBranchCode().toString());
			}
				
			mapper.map(req, saveData);
			
			saveData.setBranchCode(branchCode);
			saveData.setRegionCode(req.getRegionCode());
			saveData.setCompanyId(req.getCompanyId());
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setCreatedBy(createdBy);
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setSalePointCode(req.getSalePointCode());
			// Direct Broker Details
			String createLoginId = req.getBranchName().replaceAll(" ", "").replaceAll("_", "").replaceAll("-", "")  ; 			
			String brokerLoginId = createLoginId + "_" + "brokerId" ;
			saveData.setDirectBrokerId(brokerLoginId);
			
			
			String countryCode = req.getCountryId();
			List<Tuple> stateCity =   getStateAndCityName(countryCode ,  req.getStateCode() ) ;
			String stateName      =  stateCity.size()>0 ? stateCity.get(0).get("stateName").toString() : "";
		//	String cityName       =   stateCity.size()>0 ? stateCity.get(0).get("cityName").toString() :  "" ;
			saveData.setStateName(stateName);
			saveData.setCityName(req.getCityName());		
			
			// Login Branch Setup
			BrokerLoginInfoReq loginReq =  new BrokerLoginInfoReq();
			loginReq.setAgencyCode(StringUtils.isNotBlank(saveData.getBrokerAgencyCode()) ? saveData.getBrokerAgencyCode() :saveData.getBrokerAgencyCode());
			loginReq.setAttachedCompanies(null);
			loginReq.setBrokerCompanyYn("N");
			loginReq.setCompanyId(req.getCompanyId());
			loginReq.setCreatedBy(req.getCreatedBy());
			loginReq.setEffectiveDateStart(new Date());
			loginReq.setLoginId(brokerLoginId);
			loginReq.setOaCode(StringUtils.isNotBlank(saveData.getBrokerAgencyCode()) ? saveData.getBrokerAgencyCode() :saveData.getBrokerAgencyCode());
			loginReq.setPassword("BgBn8jBhAYu3paFVGk54PlgnOGo=");
			loginReq.setStatus("Y");
			loginReq.setSubUserType("direct");
			loginReq.setUserType("Broker");
			
			BrokerPersonalInfoReq personalInfo = new BrokerPersonalInfoReq();
			personalInfo.setAcExecutiveId("");
			personalInfo.setAddress1(saveData.getAddress1());
			personalInfo.setAddress2(saveData.getAddress2());
			personalInfo.setAddress3(saveData.getAddress2());
		//	personalInfo.setCheckerYn("Y");
		//	personalInfo.setCityCode(saveData.getCityCode()==null?"":saveData.getCityCode() );
			personalInfo.setCityName(saveData.getCityName());
		//	personalInfo.setCommissionVatYn("N");
		//	personalInfo.setCompanyName(cityName);
			personalInfo.setContactPersonName(saveData.getBranchName());
			personalInfo.setCoreAppBrokerCode(saveData.getCoreAppCode());
			personalInfo.setCountryCode(saveData.getCountryId());
		//	personalInfo.setCustConfirmYn("Y");
			personalInfo.setDesignation(saveData.getBranchName());
			personalInfo.setFax("");
		//	personalInfo.setMakerYn("Y");
			personalInfo.setMobileCode("");
			personalInfo.setPobox("" );
			personalInfo.setRemarks(saveData.getRemarks() );
			personalInfo.setStateCode(saveData.getStateCode()==null?"":String.valueOf(saveData.getStateCode()));
			personalInfo.setUserMail(saveData.getEmail());
			personalInfo.setUserMobile(saveData.getMobileNumber());
			personalInfo.setUserName(saveData.getBranchName());
		//	personalInfo.setVatRegNo("");
			personalInfo.setWhatsappCode("");
			personalInfo.setWhatsappNo("");
			
			BrokerCreationReq createBrokerReq = new BrokerCreationReq();
			createBrokerReq.setLoginInformation(loginReq)	;
			createBrokerReq.setPersonalInformation(personalInfo);
			
			LoginCreationRes loginRes = loginService.createBroker(createBrokerReq,null) ;
			saveData.setBrokerAgencyCode(loginRes.getAgencyCode());
			branchRepo.saveAndFlush(saveData);
			
			log.info("Saved Details is ---> " + json.toJson(saveData));
			
			DirectBrokerCreateReq brokerReq = new DirectBrokerCreateReq();
			brokerReq.setBranchCode(saveData.getBranchCode());
			brokerReq.setCreatedBy(saveData.getCreatedBy());
			brokerReq.setInsuranceId(saveData.getCompanyId());
			LoginCreationRes brokerRes = createDirectCompanyBrokerBranch(brokerReq) ;
			
} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return res;
}

public String generateAgencyCode() {
    try {
     	SeqAgencycode entity;
         entity = seqAgencyRepo.save(new SeqAgencycode());          
         return String.format("%05d",entity.getAgencyCode()) ;
     } catch (Exception ex) {
			log.error(ex);
         return null;
     }
    
 }
public String getCountryCode(String regionCode  ) {
	String countryId = "" ; 
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

	try {
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);   cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()); cal.set(Calendar.SECOND, today.getSeconds());
		today = cal.getTime() ;
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);
		List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();
		
		// Find All
		Root<CompanyRegionMaster>    c = query.from(CompanyRegionMaster.class);		
		
		// Select
		query.select(c );
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<CompanyRegionMaster> ocpm1 = effectiveDate.from(CompanyRegionMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("regionCode"),ocpm1.get("regionCode") );
		jakarta.persistence.criteria.Predicate a2 = cb.equal(c.get("countryId"),ocpm1.get("countryId") );
		jakarta.persistence.criteria.Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today );
		effectiveDate.where(a1,a2,a3);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("effectiveDateStart")));
		
	    // Where	
	
		jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("effectiveDateStart"), effectiveDate);		
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("regionCode"),regionCode ) ;
		
		query.where(n1 ,n2).orderBy(orderList);
		
		// Get Result
		TypedQuery<CompanyRegionMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		if (list.size()>0  ) {
			countryId = list.get(0).getCountryId()==null? "" : String.valueOf(list.get(0).getCountryId()) ;
		}
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return countryId;
}

public List<Tuple> getStateAndCityName(String countryId , String stateId  ) {
	List<Tuple> list = new ArrayList<Tuple>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
		Root<StateMaster> s = query.from(StateMaster.class);
		
		Subquery<Long> amendId2 = query.subquery(Long.class);
		Root<StateMaster> ocpm2 = amendId2.from(StateMaster.class);
		amendId2.select(cb.max(ocpm2.get("amendId")));
		Predicate seff1 = cb.equal(ocpm2.get("stateId"), s.get("stateId"));
		Predicate seff2 = cb.equal(ocpm2.get("countryId"), s.get("countryId"));
		Predicate seff3 = cb.equal(ocpm2.get("status"),s.get("status"));
		amendId2.where(seff1,seff2,seff3);
		
		// Select
		query.multiselect( s.get("stateName").alias("stateName")  );
		Predicate s1 = cb.equal(s.get("stateId"), stateId);
		Predicate s2 = cb.equal(s.get("countryId"),countryId);
		Predicate s4 = cb.equal(s.get("amendId"), amendId2);
		
		query.where(s1,s2,s4);
		// Get Result
		TypedQuery<Tuple> result = em.createQuery(query);
		list = result.getResultList();
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;
	}
	return list;
}

@Override
public List<String> validateBranchDetails(BranchMasterSaveReq req) {

	List<String> errorList = new ArrayList<String>();

	try {
	
		if (StringUtils.isBlank(req.getBranchName()) ) {
		//	errorList.add(new Error("02", "BranchName", "Please Select Branch Name "));
			errorList.add("1433");
		}else if (req.getBranchName().length() > 100){
		//	errorList.add(new Error("02","BranchName", "Please Enter Branch  Name within 100 Characters")); 
			errorList.add("1434");
		}
//		else if (StringUtils.isBlank(req.getBranchCode()) ) {
//			List<BranchMaster> list = getBranchNameExistDetails(req.getBranchName());
//			if (list.size()>0 ) {
//				errorList.add(new Error("01", "BranchName", "This Branch Name Already Exist "));
//			}
//		}
//		else if (StringUtils.isNotBlank(req.getBranchCode()) ) {
//			List<BranchMaster> list = getBranchNameExistDetails(req.getBranchName() );
//			
//			if (list.size()>0 &&  (! req.getBranchCode().equalsIgnoreCase(list.get(0).getBranchCode().toString())) ) {
//				errorList.add(new Error("01", "BranchName", "This Branch Name Already Exist "));
//			}
//			
//		}
//			else if (StringUtils.isBlank(req.getBranchCode())) {
//			Long BranchCount = branchRepo.countByBranchNameOrderByEntryDateDesc(req.getBranchName());
//			if (BranchCount > 0 ) {
//				errorList.add(new Error("01", "BranchName", "This Branch Name Alrady Exist "));
//			}
//		}

		if(StringUtils.isBlank(req.getCityName())) {
		//	errorList.add(new Error("03","City","Please Enter City Name "));
			errorList.add("1435");
		}
		if(StringUtils.isBlank(req.getStateCode())) {
		//	errorList.add(new Error("04","State","Please Select State"));
			errorList.add("1436");
		}
		
		if(StringUtils.isBlank(req.getCountryId())) {
		//	errorList.add(new Error("04","CountryID","Please Select CountryId"));
			errorList.add("1437");
		}
		
		
//		if (StringUtils.isBlank(req.getRegionCode())) {
//			errorList.add(new Error("03", "RegionCode", "Please Select Region Code "));
//		}else if (req.getRegionCode().length() > 20){
//			errorList.add(new Error("03","RegionCode", "Please Enter Region Code within 20 Characters")); 
//		}
		
		if (StringUtils.isBlank(req.getCreatedBy())) {
		//	errorList.add(new Error("03", "CreatedBy", "Please Enter CreatedBy"));
			errorList.add("1270");
		} else if (req.getCreatedBy().length() > 100) {
		//	errorList.add(new Error("03", "CreatedBy", "CreatedBy under 100 Characters only allowed"));
			errorList.add("1271");
		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null ) {
		//	errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
			errorList.add("1261");

		} else if (req.getEffectiveDateStart().before(today)) {
		//	errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errorList.add("1262");
		} 
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
			//errorList.add(new Error("05", "Status", "Please Select Status  "));
			errorList.add("1263");
		} else if (req.getStatus().length() > 1) {
		//	errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			errorList.add("1264");
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
		//	errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("1265");
		}
		if (StringUtils.isBlank(req.getCompanyId()) || req.getCompanyId() == null) {
		//	errorList.add(new Error("06", "CompanyId", "Please Select Company Id  "));
			errorList.add("1255");
		}else if (req.getCompanyId().length() > 20){
			//errorList.add(new Error("06","CompanyId", "Please Enter Company Id within 20 Characters")); 
			errorList.add("1256");
		}
		if (StringUtils.isBlank(req.getCoreAppCode()) ){
		//	errorList.add(new Error("07","Core App Code", "Please Enter CoreAppCode")); 
			errorList.add("1266");
		}
//		else if (StringUtils.isNotBlank(req.getCoreAppCode())) {
//			List<BranchMaster> coreAppCode = getCoreAppCodeExistDetails(req.getCompanyId() , null,req.getCoreAppCode());
//			if (coreAppCode.size()>0 ) {
//				errorList.add(new Error("07", "CoreAppCode", "This core App Code  Already Exist "));
//			}
//		}else  {
//			List<BranchMaster> coreAppCode =  getCoreAppCodeExistDetails(req.getCompanyId(),req.getBranchCode(),req.getCoreAppCode());
//			if (coreAppCode.size()>0 &&  (! req.getBranchCode().equalsIgnoreCase(coreAppCode.get(0).getBranchCode().toString())) ) {
//				errorList.add(new Error("08", "Core App Code", "This core App Code Already Exist "));
//			}
//		}
		
		if (StringUtils.isBlank(req.getRegulatoryCode()) ){
			//errorList.add(new Error("08","Regulatory Code", "Please Enter Regulatory Code")); 
			errorList.add("1268");
		}
		if (StringUtils.isBlank(req.getAddress1()) ){
			//errorList.add(new Error("09","Address1", "Please Enter Address1")); 
			errorList.add("1438");
		}
		if (StringUtils.isBlank(req.getAddress1()) ){
		//	errorList.add(new Error("10","Address2", "Please Enter Address2")); 
			errorList.add("1439");
		}
		
		String regex = "^[a-zA-Z0-9_+&*-]+(?:\\." + "[a-zA-Z0-9_+&*-]+)*@" + "(?:[a-zA-Z0-9-]+\\.)+[a-z" + "A-Z]{2,7}$";
		Pattern pattern = Pattern.compile(regex);
		if(StringUtils.isBlank(req.getEmail())) {
			//errorList.add(new Error("11" ,"Email", "please Enter Email"));
			errorList.add("1440");
		}
		else if(StringUtils.isNotBlank(req.getEmail())) {
		Matcher matcher3 = pattern.matcher(req.getEmail());
		if (!matcher3.matches()) {
		//	errorList.add(new Error("11" ,"Email", "please Enter Valid Email"));
			errorList.add("1443");
		}
		}
		

		String regex1 = "(0-9)+";
		
		if (StringUtils.isBlank(req.getMobileNumber())) {
			//errorList.add(new Error("12", "Mobile Number", "Please Enter Mobile Number"));
			errorList.add("1441");
		}
		else if (!req.getMobileNumber().matches("[0-9]+")) {
		//	errorList.add(new Error("12", "Mobile Number","Mobile Number format should be Only Numbers"));
			errorList.add("1442");
		}
		if (StringUtils.isBlank(req.getBranchType())) {
			//errorList.add(new Error("13", "Branch Type", "Please Enter Branch Type"));
			errorList.add("1444");
		}
		else if (req.getBranchType().length()>10) {
		//	errorList.add(new Error("13", "Branch Type", "Please Enter Branch Type within 10 Characters"));
			errorList.add("1445");
		}
		if (StringUtils.isBlank(req.getSalePointCode()) ){
		//	errorList.add(new Error("14","SalePointCode", "Please Enter Sale Point Code")); 
			errorList.add("1446");
		}
		else if (req.getSalePointCode().length() > 100) {
		//	errorList.add(new Error("14", "SalePointCode", "Sale Point Code under 100 Characters only allowed"));
			errorList.add("1447");
		}
		
//		if(StringUtils.isBlank(req.getPoBox())) {
//			errorList.add(new Error("03","PoBox","Please Enter Po Box No"));
//		} else if( req.getPoBox().matches("[0-9]+") ) {
//			errorList.add(new Error("03","PoBox","Please Enter Valid Po Box No"));
//		}
		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}
public List<BranchMaster> getBranchNameExistDetails(String branchName ) {
	List<BranchMaster> list = new ArrayList<BranchMaster>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);

		// Find All
		Root<BranchMaster> b = query.from(BranchMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BranchMaster> ocpm1 = amendId.from(BranchMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a3 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
		amendId.where(a1,a2,a3);

		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(cb.lower( b.get("branchName")), branchName.toLowerCase());

		query.where(n1,n2);
		
		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}


public List<BranchMaster> getCoreAppCodeExistDetails(String companyId, String branchCode, String coreAppCode ) {
	List<BranchMaster> list = new ArrayList<BranchMaster>();
	try {
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);

		// Find All
		Root<BranchMaster> b = query.from(BranchMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		
		effectiveDate.where(a1);

		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		Predicate n2 = cb.equal(b.get("companyId"),companyId);
		Predicate n4 = cb.equal(b.get("coreAppCode"),coreAppCode);
		
		if( StringUtils.isBlank(branchCode)) {
			query.where(n1,n2,n4);	
		} else {
			Predicate n3 = cb.equal(b.get("branchCode"),branchCode);
			query.where(n1,n2,n3,n4);
		}
		
		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}


public Integer getMasterTableCount() {

	Integer data = 0;
	try {

		List<BranchMaster> list = new ArrayList<BranchMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);

		// Find All
		Root<BranchMaster> b = query.from(BranchMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));

		effectiveDate.where(a1);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("branchCode")));
		
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		query.where(n1).orderBy(orderList);
		
		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ?Integer.valueOf(list.get(0).getBranchCode()) : 0 ;
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info(e.getMessage());
			}
			return data;
		}


///*********************************************************************GET ALL******************************************************\\
@Override
public List<BranchMasterRes> getallBranchDetails(BranchMasterGetAllReq req) {
	List<BranchMasterRes> resList = new ArrayList<BranchMasterRes>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
	try {
		List<BranchMaster> list = new ArrayList<BranchMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);

		// Find All
		Root<BranchMaster> b = query.from(BranchMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BranchMaster> ocpm1 = amendId.from(BranchMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

		amendId.where(a1,a2);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));
		
		// Where
		Predicate n1 = cb.equal(b.get("amendId"),amendId);
		Predicate n2 = cb.equal(b.get("companyId"),req.getCompanyId());
		
		query.where(n1,n2).orderBy(orderList);

		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBranchCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(BranchMaster :: getBranchName ));
		// Map
		for (BranchMaster data : list) {
			BranchMasterRes res = new BranchMasterRes();

			res = dozerMapper.map(data, BranchMasterRes.class);
			res.setCoreAppCode(data.getCoreAppCode());

			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}	
		
		


///*********************************************************************GET BY ID******************************************************\\
@Override
public BranchMasterRes getByBranchCode(BranchMasterGetReq req) {
	BranchMasterRes res = new BranchMasterRes();
	DozerBeanMapper mapper = new DozerBeanMapper();
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
		List<BranchMaster> list = new ArrayList<BranchMaster>();
		
		// Find All
		Root<BranchMaster>    c = query.from(BranchMaster.class);		
		
		// Select
		query.select(c );
		
		// amendId Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BranchMaster> ocpm1 = amendId.from(BranchMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
		
		amendId.where(a1);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		// Where
		Predicate n1 = cb.equal(c.get("amendId"), amendId);
		Predicate n4 = cb.equal(c.get("branchCode"), req.getBranchCode());
		query.where(n1,n4).orderBy(orderList);
		
		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBranchCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(BranchMaster :: getBranchName ));
		res = mapper.map(list.get(0) , BranchMasterRes.class);
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}

//**********************************************************DROPDOWN********************************************************************\\
@Override
public List<DropDownRes> getBranchMasterDropdown(CompanyBranchGetReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today   = cal.getTime();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd   = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
		List<BranchMaster> list = new ArrayList<BranchMaster>();
		
		// Find All
		Root<BranchMaster>    c = query.from(BranchMaster.class);		
		
		// Select
		query.select(c );
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchName")));
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
		Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
		Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2,a3);
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a4 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode") );
		Predicate a5 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
		Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a4,a5,a6);
		
	    // Where	
		Predicate n1 = cb.equal(c.get("status"), "Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		Predicate n4 = cb.equal(c.get("companyId"), req.getCompanyId());
		query.where(n1,n2,n3,n4).orderBy(orderList);
		
		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		
		for(BranchMaster data : list ) {
			// Response
			DropDownRes res = new DropDownRes();
			res.setCode(data.getBranchCode().toString());
			res.setCodeDesc(data.getBranchName());
			resList.add(res);
		}		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}

//************************************************GET ACTIVE BRANCH******************************************\\
@Override
public List<BranchMasterRes> getActiveBranchDetails(BranchMasterGetAllReq req) {
	List<BranchMasterRes> resList = new ArrayList<BranchMasterRes>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
	try {
		List<BranchMaster> list = new ArrayList<BranchMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);

		// Find All
		Root<BranchMaster> b = query.from(BranchMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BranchMaster> ocpm1 = amendId.from(BranchMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

		amendId.where(a1,a2);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));
		
		// Where
		Predicate n1 = cb.equal(b.get("amendId"),amendId);
		Predicate n2 = cb.equal(b.get("companyId"),req.getCompanyId());
		Predicate n3 = cb.equal(b.get("status"), "Y");

		query.where(n1,n2,n3).orderBy(orderList);

		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBranchCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(BranchMaster :: getBranchName ));
		// Map
		for (BranchMaster data : list) {
			BranchMasterRes res = new BranchMasterRes();

			res = dozerMapper.map(data, BranchMasterRes.class);
			res.setCoreAppCode(data.getCoreAppCode());

			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}

private List<LoginBranchDetailsRes> getBranchDetails(List<String> branches) {
	List<LoginBranchDetailsRes> loginBranchDetails = new ArrayList<LoginBranchDetailsRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		today = cal.getTime();

		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
		List<BranchMaster> list = new ArrayList<BranchMaster>();

		// Find All
		Root<BranchMaster> b = query.from(BranchMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart") , today);
		effectiveDate.where(a1,a2);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchName")));
		//In 
		Expression<String>e0=b.get("branchCode");
		
		// Where
		Predicate n1 = cb.equal(b.get("status"), "Y");
		Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		Predicate n3 = e0.in(branches) ;

		query.where(n1, n2, n3).orderBy(orderList);

		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);
		list = result.getResultList();
		
		for(BranchMaster data :  list) {
			LoginBranchDetailsRes branchRes = new LoginBranchDetailsRes();
			branchRes.setInsuranceId(data.getCompanyId());
			branchRes.setBranchCode(data.getBranchCode());
			branchRes.setRegionCode(data.getRegionCode());
			branchRes.setBranchName(data.getBranchName());;
			loginBranchDetails.add(branchRes);
		}
		
	}catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
	}
	return loginBranchDetails;
	
}


@Override
public List<DropDownRes> getCompanyBranchMasterDropdown(CompanyBranchReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today   = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
		List<BranchMaster> list = new ArrayList<BranchMaster>();
		
		// Find All
		Root<BranchMaster>    c = query.from(BranchMaster.class);		
		
		// Select
		query.select(c );
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchName")));
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
		jakarta.persistence.criteria.Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
		jakarta.persistence.criteria.Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2,a3);
		
	    // Where	
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n11 = cb.equal(c.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("companyId"),req.getCompanyId() );
		
		query.where(n12,n2,n3).orderBy(orderList);
		
		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		
		for(BranchMaster data : list ) {
			// Response
			DropDownRes res = new DropDownRes();
			res.setCode(data.getBranchCode().toString());
			res.setCodeDesc(data.getBranchName());
			res.setCodeDescLocal(data.getBranchName());
			resList.add(res);
		}		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}

@Override
public SuccessRes changeStatusOfBranch(BranchChangeStatusReq req) {
	SuccessRes res = new SuccessRes();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();

	try {
		
		List<BranchMaster> list = new ArrayList<BranchMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);

		// Find All
		Root<BranchMaster> b = query.from(BranchMaster.class);

		// Select
		query.select(b);

		// AmendId Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BranchMaster> ocpm1 = amendId.from(BranchMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		amendId.where(a1);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"),amendId);
		Predicate n2 = cb.equal(b.get("branchCode"), req.getBranchCode() );
		Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
		
		query.where(n1,n2,n3).orderBy(orderList);

		// Get Result 
		TypedQuery<BranchMaster> result = em.createQuery(query);
		list = result.getResultList();
		BranchMaster updateRecord = list.get(0);
		if(  req.getBranchCode().equalsIgnoreCase(updateRecord.getBranchCode())) {
			updateRecord.setStatus(req.getStatus());
			branchRepo.save(updateRecord);
		} else {
			BranchMaster saveNew = new BranchMaster();
			dozerMapper.map(updateRecord,saveNew);
			saveNew.setBranchCode(req.getBranchCode());
			saveNew.setStatus(req.getStatus());
			branchRepo.save(saveNew);
		}
	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getBranchCode());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;
}




//Create Direct Company Branch & Product hfgfgh
	public LoginCreationRes createDirectCompanyBrokerBranch(DirectBrokerCreateReq req) {
		LoginCreationRes res = new LoginCreationRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat idf = new SimpleDateFormat("yyMMddhhssmmss");
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			// Login Data
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
			List<BranchMaster> branchlist = new ArrayList<BranchMaster>();
			
			// Find All
			Root<BranchMaster>    c = query.from(BranchMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("branchCode")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			effectiveDate.where(a1,a2,a3);
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode") );
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			effectiveDate2.where(a4,a5,a6);
			
			 // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 =cb.equal(c.get("companyId"), req.getInsuranceId());
			if(StringUtils.isNotBlank(req.getBranchCode())  ) {
				Predicate n6 =cb.equal(c.get("branchCode"), req.getBranchCode());
				query.where(n1,n2,n3,n5,n6).orderBy(orderList);	
			} else {
				query.where(n1,n2,n3,n5).orderBy(orderList);
			}
			
			// Get Result
			TypedQuery<BranchMaster> result = em.createQuery(query);			
			branchlist =  result.getResultList();
			
			for ( BranchMaster branch : branchlist ) {
				// Find Data
				String brokerBranchCode = "None";
				String agencyCode =  branch.getBrokerAgencyCode() ;
								LoginBranchMaster findBranch = loginBrokerRepo.findByBrokerBranchCodeAndAgencyCodeAndBranchCodeAndCompanyId(
						brokerBranchCode,Integer.valueOf(agencyCode) , branch.getBranchCode(), branch.getCompanyId());

				LoginBranchMaster saveLB = dozerMapper.map(branch, LoginBranchMaster.class);
				if (findBranch != null) {
					// Delete Old Record
					loginBrokerRepo.delete(findBranch);
					// Save in Arch tables
					String archId = "AI-" + idf.format(new Date());
					LoginBranchMasterArch loginArch = dozerMapper.map(findBranch, LoginBranchMasterArch.class);
					loginArch.setArchId(archId);
					loginBrokerArchRepo.saveAndFlush(loginArch);

					saveLB.setEntryDate(findBranch.getEntryDate());
					saveLB.setCreatedBy(findBranch.getCreatedBy());
					saveLB.setUpdatedBy(req.getCreatedBy());
					saveLB.setUpdatedDate(new Date());
				} else {
					saveLB.setEntryDate(new Date());
					saveLB.setCreatedBy(req.getCreatedBy());
					saveLB.setUpdatedBy(req.getCreatedBy());
					saveLB.setUpdatedDate(new Date());
				}

				saveLB.setOaCode(Integer.valueOf(agencyCode));
				saveLB.setAgencyCode(Integer.valueOf(agencyCode));
				saveLB.setAttachedBranch(branch.getBranchCode());
				saveLB.setAttachedCompany(branch.getCompanyId());
				saveLB.setBrokerBranchCode(brokerBranchCode);
				saveLB.setLoginId(branch.getDirectBrokerId());
				saveLB.setUserType("Broker");
				saveLB.setSubUserType("b2b");
				loginBrokerRepo.saveAndFlush(saveLB);

				log.info("Login Master Updated Details ---> " + json.toJson(saveLB));
				res.setResponse("Branch Added Successfully");
				
				AttachCompnayProductRequest companyProductReq = new AttachCompnayProductRequest(); 
				companyProductReq.setCreatedBy(req.getCreatedBy() );
				companyProductReq.setInsuranceId(req.getInsuranceId() );
				
				// Update Old Login Products 
				Integer amendId = upadateOldLoginProduct(saveLB);
				
				// Insert Login Products
				LoginCreationRes loginRes = saveBrokerProductDetails(saveLB , amendId);
				
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	
	// attach company products
	public LoginCreationRes saveBrokerProductDetails(LoginBranchMaster savedLBReq , Integer amendId) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		LoginCreationRes res = new LoginCreationRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try { 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			Date endDate = sdformat.parse("12/12/2050") ;
			cal.setTime(sdformat.parse("12/12/2050"));  cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 50) ;
			endDate = cal.getTime() ;
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			
			// Find All
			Root<CompanyProductMaster>    c = query.from(CompanyProductMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId") );
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			effectiveDate.where(a1,a2,a3);
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId") );
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			effectiveDate2.where(a4,a5,a6);
			
			//In 
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 =cb.equal(c.get("companyId"),savedLBReq.getCompanyId());
			query.where(n1,n2,n3,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);			
			list =  result.getResultList();
			
			List<LoginProductMaster> saveList = new ArrayList<LoginProductMaster>(); 
			for ( CompanyProductMaster data : list  ) {
				
				LoginProductMaster save = new LoginProductMaster();
				dozerMapper.map(data, save);
				save.setCompanyId(savedLBReq.getCompanyId());
				save.setCreatedBy(savedLBReq.getCreatedBy());
				save.setEffectiveDateStart(effDate);
				save.setEffectiveDateEnd(endDate);
				save.setEntryDate(new Date());
				save.setAmendId(amendId);
				save.setLoginId(savedLBReq.getLoginId());
				save.setAgencyCode(savedLBReq.getAgencyCode() );
				save.setOaCode(savedLBReq.getOaCode());
				save.setOaCode(amendId);
				save.setBackDays(0);
				save.setCommissionPercent(0);
				save.setCommissionVatYn(data.getCommissionVatYn());
				save.setCheckerYn(data.getCheckerYn());
				save.setCustConfirmYn(data.getCustConfirmYn());
				save.setMakerYn(data.getMakerYn());
				save.setUserType(savedLBReq.getUserType());
				save.setSubUserType(savedLBReq.getSubUserType());
				
				String financeid = "";
				String nonfinanceid = "";
				List<EndtTypeMaster> endtids = getEndtId(savedLBReq.getCompanyId(), data.getProductId()); 								
				for(EndtTypeMaster endtid :endtids) {				
					if(endtid.getEndtTypeCategoryId().toString().equalsIgnoreCase("1")) {						
						financeid = financeid+","+endtid.getEndtTypeId().toString();
					}
					else {
						nonfinanceid = nonfinanceid+","+endtid.getEndtTypeId().toString();						
					}					
				}
				financeid=financeid.substring(1);
				nonfinanceid=nonfinanceid.substring(1);
				save.setFinancialEndtIds(financeid);
				save.setNonFinancialEndtIds(nonfinanceid);
				
				
				
				saveList.add(save);
				log.info("Saved Details is ---> " + json.toJson(save));
				
			}		
			loginProductRepo.saveAll(saveList);
			res.setResponse("Products Added Successfully");
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	private List<EndtTypeMaster> getEndtId(String insuranceId, Integer productId) {
		// TODO Auto-generated method stub
		List<EndtTypeMaster> list = new ArrayList<EndtTypeMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EndtTypeMaster> query = cb.createQuery(EndtTypeMaster.class);

			// Find All
			Root<EndtTypeMaster> b = query.from(EndtTypeMaster.class);

			// Select
			query.select(b);

			//Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<EndtTypeMaster> ocpm1 = effectiveDate.from(EndtTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a2 = cb.equal(b.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.equal(b.get("productId"),ocpm1.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("endtTypeId"), b.get("endtTypeId"));
			
			effectiveDate.where(a1,a2,a3,a4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<EndtTypeMaster> ocpm2 = effectiveDate2.from(EndtTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(b.get("endtTypeId"),ocpm2.get("endtTypeId"));
			Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a8 = cb.equal(b.get("companyId"),ocpm2.get("companyId"));
			Predicate a9 = cb.equal(b.get("productId"),ocpm2.get("productId"));
			
			effectiveDate2.where(a6,a7,a8,a9);
			Predicate n1 = cb.equal(b.get("companyId"),insuranceId);
			Predicate n2 = cb.equal(b.get("productId"),productId);
			Predicate n3 = cb.equal(b.get("status"),"Y");
			Predicate n4 = cb.equal(b.get("effectiveDateStart"),effectiveDate);
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"),effectiveDate2);	
			query.where(n1,n2,n3,n4,n5);
			
			// Get Result
			TypedQuery<EndtTypeMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}

	
	// Update Old Login Products
	public Integer upadateOldLoginProduct(LoginBranchMaster savedLBReq ) {
		List<LoginProductMaster> list = new ArrayList<LoginProductMaster>();
		Integer amendId = 0 ;
		try {
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date((new Date()).getTime() - MILLIS_IN_A_DAY);
			Date entryDate = new Date();
			
			// Get Sno Record For Amend ID
			// FInd Old Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<LoginProductMaster> query = cb.createQuery(LoginProductMaster.class);
			//Find all
			Root<LoginProductMaster> b = query.from(LoginProductMaster.class);
			//Select 
			query.select(b);
			
			// Max AmendId
			Subquery<Long> maxAmendId = query.subquery(Long.class);
			Root<LoginProductMaster> ocpm1 = maxAmendId.from(LoginProductMaster.class);
			maxAmendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a3 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
			maxAmendId.where(a1,a2,a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("companyId"),savedLBReq.getCompanyId());
			Predicate n2 = cb.equal(b.get("agencyCode"), savedLBReq.getAgencyCode());
			
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result 
			TypedQuery<LoginProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					
					//UPDATE
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					// create update
					CriteriaUpdate<LoginProductMaster> update = cb2.createCriteriaUpdate(LoginProductMaster.class);
					// set the root class
					Root<LoginProductMaster> m = update.from(LoginProductMaster.class);
					// set update and where clause
					update.set("updatedBy", savedLBReq.getCreatedBy());
					update.set("updatedDate", entryDate);
					update.set("effectiveDateEnd", oldEndDate);
					
					n1 = cb.equal(m.get("companyId"), savedLBReq.getCompanyId());
					n2 = cb.equal(m.get("agencyCode"), savedLBReq.getAgencyCode());
					update.where(n1,n2);
					// perform update
					em.createQuery(update).executeUpdate();
					
				} else {
					amendId = list.get(0).getAmendId() ;
					loginProductRepo.deleteAll(list);
			    }
			}
			
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return amendId;
	}
	
}



