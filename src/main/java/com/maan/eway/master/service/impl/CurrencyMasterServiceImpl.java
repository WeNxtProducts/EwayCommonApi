/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.ExchangeMaster;
import com.maan.eway.master.req.CurrencyDropDownReq;
import com.maan.eway.master.req.CurrencyMasterChangeStatusReq;
import com.maan.eway.master.req.CurrencyMasterGetAllReq;
import com.maan.eway.master.req.CurrencyMasterGetReq;
import com.maan.eway.master.req.CurrencyMasterSaveReq;
import com.maan.eway.master.req.ProductCurrDropDownReq;
import com.maan.eway.master.res.CurrencyMasterRes;
import com.maan.eway.master.service.CurrencyMasterService;
import com.maan.eway.repository.CurrencyMasterRepository;
import com.maan.eway.res.CuurencyDropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Tuple;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>CurrencyMasterServiceimpl</h2>
*/
@Service
@Transactional
public class CurrencyMasterServiceImpl implements CurrencyMasterService {

@PersistenceContext
private EntityManager em;

@Autowired
private CurrencyMasterRepository repo;

@Autowired
private BasicValidationService basicvalidateService;

Gson json = new Gson();

private Logger log=LogManager.getLogger(CurrencyMasterServiceImpl.class);

//************************************************INSERT/UPDATE CURRENCY DETAILS******************************************************\\
@Transactional
@Override
public SuccessRes insertCurrency(CurrencyMasterSaveReq req) {
    SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
	SuccessRes res = new SuccessRes();
	CurrencyMaster saveData = new CurrencyMaster();
	List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
	 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	
	try {
		Integer amendId=0;
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdformat.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = null ;
		String createdBy = "" ;
		String currencyId="";		
		if (StringUtils.isBlank(req.getCurrencyId())) {
				// Save
			   	//Long totalCount = repo.count();
				currencyId = req.getCurrencyShortCode();
				res.setResponse("Saved Successfully ");
				res.setSuccessId(currencyId);
			

			} else {
				// Update
				// Get Less than Equal Today Record 
				// Criteria
				currencyId=req.getCurrencyId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);

				// Find All
				Root<CurrencyMaster> b = query.from(CurrencyMaster.class);

				// Select
				query.select(b);
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));
				
				
				// Where
			//	Predicate n1 = cb.equal(b.get("status"), "Y");
				Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
				Predicate n3 =  cb.equal(b.get("currencyId"), req.getCurrencyId() );

				query.where( n2, n3).orderBy(orderList);

				// Get Result
				TypedQuery<CurrencyMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
					
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
							CurrencyMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							CurrencyMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully ");
				res.setSuccessId(currencyId);
			}
		
		    dozerMapper.map(req, saveData );
			saveData.setCurrencyId(currencyId);
			saveData.setCurrencyName(req.getCurrencyName());
			saveData.setEffectiveDateStart(req.getEffectiveDateStart());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setCoreAppCode(req.getCoreAppCode());
			saveData.setCurrencyShortCode(StringUtils.isBlank(req.getCurrencyShortCode())?"":req.getCurrencyShortCode());
			saveData.setDecimalDigit(Integer.valueOf(req.getDecimalDigit()));
			saveData.setShortName(req.getShortName()==null?"":req.getShortName());
			saveData.setRfactor(StringUtils.isBlank(req.getRfactor())?0:Integer.valueOf(req.getRfactor()));
			saveData.setRegulatoryCode((req.getRegulatoryCode()));
			saveData.setCurrencyNameLocal(req.getCodeDescLocal());
			repo.saveAndFlush(saveData);
			
			log.info("Saved Details is ---> " + json.toJson(saveData));
			
} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return res;
}


@Override
public List<String> validateCurrencyDetails(CurrencyMasterSaveReq req) {
	List<String> errorList = new ArrayList<String>();
	try {
		if (StringUtils.isBlank(req.getRemarks())) {
			//errorList.add(new Error("03", "Remark", "Please Enter Remark "));
			errorList.add("2032");
		}else if (req.getRemarks().length() > 100){
			//errorList.add(new Error("03","Remark", "Please Enter Remark within 100 Characters")); 
			errorList.add("2033");
		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
			//errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start"));
			errorList.add("2034");

		} else if (req.getEffectiveDateStart().before(today)) {
			//errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errorList.add("2035");
		}
		// Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
			//errorList.add(new Error("05", "Status", "Please Enter Status"));
			errorList.add("2036");
		} else if (req.getStatus().length() > 1) {
			//errorList.add(new Error("05", "Status", "Enter Status in One Character Only"));
			errorList.add("2037");
		} else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			//errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("2038");
		}
		if (StringUtils.isBlank(req.getCurrencyShortCode())) {
			//errorList.add(new Error("05", "CurrencyShortCode", "Please Enter CurrencyShortCode"));
			errorList.add("1282");
		} else if (req.getCurrencyShortCode().length() > 5) {
			//errorList.add(new Error("08", "Currency", "Please Enter CurrencyShortCode within 5 Characters"));	
			errorList.add("1283");
		}else if (!StringUtils.isAlpha(req.getCurrencyShortCode())) {
			//errorList.add(new Error("08", "Currency", "Please Enter CurrencyShortCode In Alphabets"));	
			errorList.add("1284");
		} else {
			CurrencyMaster currencyShortCode =   getCurrencyShortCodeRes(req.getCurrencyShortCode(),req.getCompanyId());
			if(StringUtils.isBlank(req.getCurrencyId()) &&  currencyShortCode !=null ) {
				//errorList.add(new Error("08", "Currency", "This CurrencyShortCode Already Exist"));
				errorList.add("1285");
			} else if( currencyShortCode !=null  && StringUtils.isNotBlank(req.getCurrencyId()) ) {
				if(! currencyShortCode.getCurrencyId().equalsIgnoreCase(req.getCurrencyId()) ) {
					//errorList.add(new Error("08", "Currency", "This CurrencyShortCode Already Exist"));	
					errorList.add("1285");
				}			
			}
		}
		
		if (StringUtils.isBlank(req.getCurrencyName())) {
			//errorList.add(new Error("05", "CurrencyName", "Please Enter CurrencyName"));
			errorList.add("1286");
		} else if (req.getCurrencyName().length() > 25) {
			//errorList.add(new Error("08", "Currency Name", "Please Enter Currency Name within 25 Characters"));
			errorList.add("1287");
		}else {
			//String curr = req.getCurrencyName().replaceAll(" ", "") ;
			if (! req.getCurrencyName().matches("[a-zA-Z\\s]+") ) {
				//errorList.add(new Error("08", "CurrencyName", "Please Enter Valid CurrencyName "));	
				errorList.add("1288");
			} else {
				CurrencyMaster currencyName =   getCurrencyNameRes(req.getCurrencyName(),req.getCompanyId());
				if(StringUtils.isBlank(req.getCurrencyId()) &&  currencyName !=null ) {
					//errorList.add(new Error("08", "Currency", "This Currency Name Already Exist"));
					errorList.add("1289");
				} else if( currencyName !=null  && StringUtils.isNotBlank(req.getCurrencyId()) ) {
					if(! currencyName.getCurrencyId().equalsIgnoreCase(req.getCurrencyId()) ) {
						//errorList.add(new Error("08", "Currency", "This Currency Name Already Exist"));	
						errorList.add("1289");
					}			
				}
			}
		}
			
		
		if (StringUtils.isNotBlank(req.getSubCurrency())&& req.getSubCurrency().length() > 10) {
			//errorList.add(new Error("09", "SubCurrency", "Please Enter SubCurrency within 10 Characters"));
			errorList.add("1290");
		}
		
		if (StringUtils.isBlank(req.getMinDiscount())) {
			//errorList.add(new Error("10", "MinDiscount", "Please Enter MinDiscount "));
			errorList.add("1291");
		}
		if (StringUtils.isBlank(req.getMaxLoading())) {
			//errorList.add(new Error("11", "MaxLoading", "Please Enter MaxLoading "));
			errorList.add("1292");
		}
		if (StringUtils.isBlank(req.getDecimalDigit())) {
			//errorList.add(new Error("12", "DecimalDigit", "Please Enter DecimalDigit "));
			errorList.add("1293");
		}else if(req.getDecimalDigit().length()>1) {
			//errorList.add(new Error("12", "DecimalDigit", "Please Enter DecimalDigit Single Digit "));
			errorList.add("1294");
		}else if(!req.getDecimalDigit().matches("[0-3]+") ) {
			//errorList.add(new Error("12", "DecimalDigit", "Please Enter DecimalDigit 0 to 9 "));
			errorList.add("1295");
		}else if(Integer.valueOf(req.getDecimalDigit())<0 ){
			//errorList.add(new Error("12", "DecimalDigit", "Please Enter DecimalDigit greater than 0  "));
			errorList.add("1296");
		}
		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}

public CurrencyMaster getCurrencyShortCodeRes(String currencyShortCode, String companyId) {
	CurrencyMaster currencyRes =null ;
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);

		// Find All
		Root<CurrencyMaster> s = query.from(CurrencyMaster.class);
		
		// State Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate c1 = cb.equal(ocpm1.get("currencyId"), s.get("currencyId"));
		Predicate c2 = cb.equal(ocpm1.get("status"),s.get("status"));
		Predicate c3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate c4 = cb.equal(ocpm1.get("currencyShortCode"), s.get("currencyShortCode"));
		Predicate c5 = cb.equal(ocpm1.get("companyId"),s.get("companyId"));

		effectiveDate.where(c1,c2,c3,c4,c5);
		
		Predicate n1 = cb.equal(s.get("effectiveDateStart"), effectiveDate);
		Predicate n2 = cb.equal(s.get("currencyShortCode"), currencyShortCode);
		Predicate n3 = cb.equal(s.get("status"), "Y");
		Predicate n4 = cb.equal(s.get("companyId"), companyId);
		// Select
		query.select( s );
		
		query.where(n1,n2,n3,n4);
		// Get Result
		TypedQuery<CurrencyMaster> result = em.createQuery(query);
		List<CurrencyMaster> list = result.getResultList();
		if( list.size()>0) {
			currencyRes = list.get(0);
		}
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;
	}
	return currencyRes;
}


public CurrencyMaster getCurrencyNameRes(String currencyName, String companyId) {
	CurrencyMaster currencyRes =null;
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);

		// Find All
		Root<CurrencyMaster> s = query.from(CurrencyMaster.class);
		
		// State Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate c1 = cb.equal(ocpm1.get("currencyId"), s.get("currencyId"));
		Predicate c2 = cb.equal(ocpm1.get("status"),s.get("status"));
		Predicate c3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate c4 = cb.equal(ocpm1.get("currencyShortCode"), s.get("currencyShortCode"));
		Predicate c5 = cb.equal(ocpm1.get("companyId"),s.get("companyId"));
		
		effectiveDate.where(c1,c2,c3,c4,c5);
		
		Predicate n1 = cb.equal(s.get("effectiveDateStart"), effectiveDate);
		Predicate n2 = cb.equal(s.get("currencyName"), currencyName);
		Predicate n3 = cb.equal(s.get("status"), "Y");
		Predicate n4 = cb.equal(s.get("companyId"), companyId);
		
		// Select
		query.select( s );
		
		query.where(n1,n2,n3,n4);
		// Get Result
		TypedQuery<CurrencyMaster> result = em.createQuery(query);
		List<CurrencyMaster> list = result.getResultList();
		if( list.size()>0) {
			currencyRes = list.get(0);
		}
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;
	}
	return currencyRes;
}

public Long getMasterTableCount() {

	Long data = 0L;
	try {

		List<Long> list = new ArrayList<Long>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Long> query = cb.createQuery(Long.class);

		// Find All
		Root<CurrencyMaster> b = query.from(CurrencyMaster.class);

		// Select
		query.multiselect(cb.count(b));

		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("currencyId"), b.get("currencyId"));
		effectiveDate.where(a1);

		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		query.where(n1);
		// Get Result
		TypedQuery<Long> result = em.createQuery(query);
		list = result.getResultList();

		data = list.get(0);

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return data;
}
///*********************************************************************GET ALL******************************************************\\
@Override
public List<CurrencyMasterRes> getallCurrencyDetails(CurrencyMasterGetAllReq req) {
	List<CurrencyMasterRes> resList = new ArrayList<CurrencyMasterRes>();
	ModelMapper mapper = new ModelMapper();
	try {
		List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);

		// Find All
		Root<CurrencyMaster> b = query.from(CurrencyMaster.class);

		// Select
		query.select(b);

		//AmendId Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm1 = amendId.from(CurrencyMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("currencyId"), b.get("currencyId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

		amendId.where(a1,a2);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("companyId")));
		
		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("companyId"), "99999");
		Predicate n4 = cb.or(n2,n3);
		query.where(n1,n4).orderBy(orderList);

		// Get Result
		TypedQuery<CurrencyMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCurrencyId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(CurrencyMaster :: getCurrencyName ));
		
		// Map
		for (CurrencyMaster data : list) {
			CurrencyMasterRes res = new CurrencyMasterRes();

			res = mapper.map(data, CurrencyMasterRes.class);
			mapper.getConfiguration().setAmbiguityIgnored(true);
			res.setCurrencyId(data.getCurrencyId().toString());
			res.setCodeDescLocal(data.getCurrencyNameLocal());
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}
private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}
///*********************************************************************GET BY ID******************************************************\\
@Override
public CurrencyMasterRes getByCurrencyId(CurrencyMasterGetReq req) {
	CurrencyMasterRes res = new CurrencyMasterRes();
	ModelMapper mapper = new ModelMapper();
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
		List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
		
		// Find All
		Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
		
		// Select
		query.select(c );
		
		// amendId Max Filter
		Subquery<Long>amendId = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm1 = amendId.from(CurrencyMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
		Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));

		amendId.where(a1,a2);
		
	
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("companyId")));
		
	    // Where	
	
		jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);		
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("currencyId"),req.getCurrencyId()) ;
		Predicate n3 = cb.equal(c.get("companyId"), req.getCompanyId());
		Predicate n4 = cb.equal(c.get("companyId"), "99999");
		Predicate n5 = cb.or(n3,n4);
		query.where(n1,n2,n5).orderBy(orderList);
		
		// Get Result
		TypedQuery<CurrencyMaster> result = em.createQuery(query);			
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCurrencyId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(CurrencyMaster :: getCurrencyName ));
		res = mapper.map(list.get(0) , CurrencyMasterRes.class);
		res.setCurrencyId(list.get(0).getCurrencyId().toString());
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		res.setCompanyId(list.get(0).getCompanyId());
		res.setShortName(list.get(0).getShortName()==null?"":list.get(0).getShortName());
		res.setRfactor(list.get(0).getRfactor()==null?"":list.get(0).getRfactor().toString());
		res.setCreatedBy(list.get(0).getCreatedBy()==null?"":list.get(0).getCreatedBy());
		res.setUpdatedBy(list.get(0).getUpdatedBy()==null?"":list.get(0).getUpdatedBy());
		res.setCodeDescLocal(list.get(0).getCurrencyNameLocal());
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}
@Override
public List<CuurencyDropDownRes> getCurrencyMasterDropdown( CurrencyDropDownReq req ) {
	List<CuurencyDropDownRes> resList = new ArrayList<CuurencyDropDownRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
		List<Tuple> list = new ArrayList<Tuple>();
		
		// Find All
		Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
		
		Subquery<Long> exchangeRate = query.subquery(Long.class);
		Root<ExchangeMaster> ex = exchangeRate.from(ExchangeMaster.class);
		// Exchange Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate3 = query.subquery(Timestamp.class);
		Root<ExchangeMaster> ocpm3 = effectiveDate3.from(ExchangeMaster.class);
		effectiveDate3.select(cb.greatest(ocpm3.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ex.get("exchangeId"),ocpm3.get("exchangeId"));
		Predicate a2 = cb.equal(ex.get("currencyId"),ocpm3.get("currencyId"));
		Predicate a15 = cb.equal(ex.get("companyId"),ocpm3.get("companyId"));
		Predicate a3 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
		effectiveDate3.where(a1,a2,a3,a15);
		
		// Exhange Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate4 = query.subquery(Timestamp.class);
		Root<ExchangeMaster> ocpm4 = effectiveDate4.from(ExchangeMaster.class);
		effectiveDate4.select(cb.greatest(ocpm4.get("effectiveDateEnd")));
		Predicate a4 = cb.equal(ex.get("exchangeId"),ocpm4.get("exchangeId"));
		Predicate a5 = cb.equal(ex.get("currencyId"),ocpm4.get("currencyId"));
		Predicate a16 = cb.equal(ex.get("companyId"),ocpm4.get("companyId"));
		Predicate a6 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
		effectiveDate4.where(a4,a5,a6,a16);
		
		// Exhange Rate Sub Query
		exchangeRate.select(ex.get("exchangeRate"));
		Predicate a7 = cb.equal(ex.get("currencyId"),c.get("currencyId"));
		Predicate a8 = cb.equal(ex.get("status"),"Y");
		Predicate a20 = cb.equal(ex.get("status"),"R");
		Predicate a21 = cb.or(a8,a20);
		Predicate a9 = cb.equal(ex.get("effectiveDateStart"), effectiveDate3);
		Predicate a10 = cb.equal(ex.get("effectiveDateEnd"), effectiveDate4);
		Predicate a17 = cb.equal(ex.get("companyId"),c.get("companyId"));
		exchangeRate.where(a7,a21,a9,a10,a17);

		// Select
		query.multiselect(c.get("currencyId").alias("currencyId") ,
				c.get("currencyName").alias("currencyName"),
				c.get("status").alias("status") , 
				c.get("minDiscount").alias("minDiscount") , 
				c.get("maxLoading").alias("maxLoading") ,
				exchangeRate.alias("exchangeRate"));
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("currencyName")));
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		jakarta.persistence.criteria.Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
		jakarta.persistence.criteria.Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		jakarta.persistence.criteria.Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
		Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
		
		effectiveDate.where(a11,a12,a18,a22);
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		jakarta.persistence.criteria.Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
		jakarta.persistence.criteria.Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		jakarta.persistence.criteria.Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
		Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
		
		effectiveDate2.where(a13,a14,a19,a23);
		
	    // Where	
		jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
		jakarta.persistence.criteria.Predicate n7 = cb.equal(c.get("status"), "R");
		Predicate n8 = cb.or(n7,n1);
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),req.getInsuranceId());
		Predicate n5 = cb.equal(c.get("companyId"),"99999");
		Predicate n6 = cb.or(n4,n5);
		query.where(n8,n2,n3,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<Tuple> result = em.createQuery(query);			
		list =  result.getResultList();  
		list = list.stream().filter(o -> o.get("currencyId") !=null).filter( distinctByKey(o -> Arrays.asList(o.get("currencyId").toString()) )).collect(Collectors.toList());
		
		for(Tuple data : list ) {
			// Response
			CuurencyDropDownRes res = new CuurencyDropDownRes();
			Double exRate=Double.valueOf(data.get("exchangeRate")==null?"0" : data.get("exchangeRate").toString());
			Double minRate=Double.valueOf(data.get("minDiscount")==null?"0" : data.get("minDiscount").toString());
			Double maxRate=Double.valueOf(data.get("maxLoading")==null?"0" :data.get("maxLoading").toString());
			minRate=exRate-(exRate*minRate/100);
			maxRate=exRate+(exRate*maxRate/100);
			
			res.setCode(data.get("currencyId")==null?"" :data.get("currencyId").toString()  );
			res.setCodeDesc(data.get("currencyName")==null?"" :data.get("currencyName").toString()  );
			res.setExchangeRate(data.get("exchangeRate")==null?"0" : data.get("exchangeRate").toString() );
			res.setMinRate(minRate.toString() );
			res.setMaxRate(maxRate.toString());
			res.setStatus(data.get("status")==null?"":data.get("status").toString());
			resList.add(res);
		}		
		resList.sort(Comparator.comparing(CuurencyDropDownRes ::  getCodeDesc));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}

//************************************************GET ACTIVE CURRENCY******************************************\\
@Override
public List<CurrencyMasterRes> getActiveCurrencyDetails(CurrencyMasterGetAllReq req) {
	List<CurrencyMasterRes> resList = new ArrayList<CurrencyMasterRes>();
	ModelMapper mapper = new ModelMapper();
	try {
		List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);

		// Find All
		Root<CurrencyMaster> b = query.from(CurrencyMaster.class);

		// Select
		query.select(b);

		//AmendId Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm1 = amendId.from(CurrencyMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("currencyId"), b.get("currencyId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

		amendId.where(a1,a2);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("companyId")));
		
		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("companyId"), "99999");
		Predicate n4 = cb.or(n2,n3);
		Predicate n5 = cb.equal(b.get("status"), "Y");

		query.where(n1,n2,n4,n5).orderBy(orderList);

		// Get Result
		TypedQuery<CurrencyMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCurrencyId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(CurrencyMaster :: getCurrencyName ));
		
		// Map
		for (CurrencyMaster data : list) {
			CurrencyMasterRes res = new CurrencyMasterRes();

			res = mapper.map(data, CurrencyMasterRes.class);
			mapper.getConfiguration().setAmbiguityIgnored(true);
			res.setCurrencyId(data.getCurrencyId().toString());
			resList.add(res);
		}



	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


@Override
public SuccessRes changeStatusCurrencyDetails(CurrencyMasterChangeStatusReq req) {
	SuccessRes res = new SuccessRes();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
		
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
		// Find all
		Root<CurrencyMaster> b = query.from(CurrencyMaster.class);
		//Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm1 = amendId.from(CurrencyMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("currencyId"), b.get("currencyId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

		amendId.where(a1, a2);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("companyId")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n4 = cb.equal(b.get("currencyId"), req.getCurrencyId());
		Predicate n5 = cb.equal(b.get("currencyId"), "99999");
		Predicate n6 = cb.or(n2,n5);
		
		query.where(n1,n4,n6).orderBy(orderList);
		
		// Get Result 
		TypedQuery<CurrencyMaster> result = em.createQuery(query);
		list = result.getResultList();
		
		CurrencyMaster updateRecord = list.get(0);
		if(  req.getCompanyId().equalsIgnoreCase(updateRecord.getCompanyId())) {
			updateRecord.setStatus(req.getStatus());
			repo.save(updateRecord);
		} else {
			CurrencyMaster saveNew = new CurrencyMaster();
			dozerMapper.map(updateRecord,saveNew);
			saveNew.setCompanyId(req.getCompanyId());
			saveNew.setStatus(req.getStatus());
			repo.save(saveNew);
		}
	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getCurrencyId());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;

}


@Override
public List<CuurencyDropDownRes> getProductCurrencyMasterDropdown(ProductCurrDropDownReq req) {
	List<CuurencyDropDownRes> resList = new ArrayList<CuurencyDropDownRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Get Product Currency Ids
		List<String> currencyIds = getCompanyProductCurrencyIds(req.getInsuranceId() ,req.getProductId() ) ;
		log.info("Currency ID --->"+currencyIds);
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
		List<Tuple> list = new ArrayList<Tuple>();
		
		// Find All
		Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
		
		Subquery<Long> exchangeRate = query.subquery(Long.class);
		Root<ExchangeMaster> ex = exchangeRate.from(ExchangeMaster.class);
		// Exchange Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate3 = query.subquery(Timestamp.class);
		Root<ExchangeMaster> ocpm3 = effectiveDate3.from(ExchangeMaster.class);
		effectiveDate3.select(cb.greatest(ocpm3.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ex.get("exchangeId"),ocpm3.get("exchangeId"));
		Predicate a2 = cb.equal(ex.get("currencyId"),ocpm3.get("currencyId"));
		Predicate a15 = cb.equal(ex.get("companyId"),ocpm3.get("companyId"));
		Predicate a3 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
		effectiveDate3.where(a1,a2,a3,a15);
		
		// Exhange Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate4 = query.subquery(Timestamp.class);
		Root<ExchangeMaster> ocpm4 = effectiveDate4.from(ExchangeMaster.class);
		effectiveDate4.select(cb.greatest(ocpm4.get("effectiveDateEnd")));
		Predicate a4 = cb.equal(ex.get("exchangeId"),ocpm4.get("exchangeId"));
		Predicate a5 = cb.equal(ex.get("currencyId"),ocpm4.get("currencyId"));
		Predicate a16 = cb.equal(ex.get("companyId"),ocpm4.get("companyId"));
		Predicate a6 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
		effectiveDate4.where(a4,a5,a6,a16);
		
		// Exhange Rate Sub Query
		exchangeRate.select(ex.get("exchangeRate"));
		Predicate a7 = cb.equal(ex.get("currencyId"),c.get("currencyId"));
		Predicate a8 = cb.equal(ex.get("status"),"Y");
		Predicate a24 = cb.equal(ex.get("status"),"R");
		Predicate a25 = cb.or(a8,a24);
		Predicate a9 = cb.equal(ex.get("effectiveDateStart"), effectiveDate3);
		Predicate a10 = cb.equal(ex.get("effectiveDateEnd"), effectiveDate4);
		Predicate a17 = cb.equal(ex.get("companyId"),req.getInsuranceId());
		exchangeRate.where(a25,a7,a25,a9,a10,a17);

		// Select
		query.multiselect(c.get("currencyId").alias("currencyId") ,
				c.get("currencyName").alias("currencyName"),
				c.get("status").alias("status") , 
				c.get("minDiscount").alias("minDiscount") , 
				c.get("maxLoading").alias("maxLoading") ,
				c.get("currencyNameLocal").alias("currencyNameLocal"),
				exchangeRate.alias("exchangeRate"));
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("companyId")));
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		jakarta.persistence.criteria.Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
		jakarta.persistence.criteria.Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		jakarta.persistence.criteria.Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
		Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
		
		effectiveDate.where(a11,a12,a18,a22);
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		jakarta.persistence.criteria.Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
		jakarta.persistence.criteria.Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		jakarta.persistence.criteria.Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
		Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
		
		effectiveDate2.where(a13,a14,a19,a23);
		
	    // Where	
		jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
		jakarta.persistence.criteria.Predicate n8 = cb.equal(c.get("status"),"R");
		jakarta.persistence.criteria.Predicate n10 = cb.or(n8,n1);
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),req.getInsuranceId());
		Predicate n5 = cb.equal(c.get("companyId"),"99999");
		Predicate n6 = cb.or(n4,n5);
		//In 
		Expression<String>e0=c.get("currencyId");
		Predicate n7 = e0.in(currencyIds);
		
		query.where(n10,n2,n3,n6,n7).orderBy(orderList);
		
		// Get Result
		TypedQuery<Tuple> result = em.createQuery(query);			
		list =  result.getResultList();  
		//list.sort(Comparator.comparing(t -> <<get sort key from t>>) ;
		list = list.stream().filter(o -> o.get("currencyId") !=null).filter( distinctByKey(o -> Arrays.asList(o.get("currencyId").toString()) )).collect(Collectors.toList());
		
		for(Tuple data : list ) {
			// Response
			CuurencyDropDownRes res = new CuurencyDropDownRes();
			Double exRate=Double.valueOf(data.get("exchangeRate")==null?"0" : data.get("exchangeRate").toString());
			Double minRate=Double.valueOf(data.get("minDiscount")==null?"0" : data.get("minDiscount").toString());
			Double maxRate=Double.valueOf(data.get("maxLoading")==null?"0" :data.get("maxLoading").toString());
			minRate=exRate-(exRate*minRate/100);
			maxRate=exRate+(exRate*maxRate/100);
			
			res.setCode(data.get("currencyId")==null?"" :data.get("currencyId").toString()  );
			res.setCodeDesc(data.get("currencyName")==null?"" :data.get("currencyName").toString()  );
			res.setCodeDescLocal(data.get("currencyNameLocal")==null?"" :data.get("currencyNameLocal").toString());
			res.setExchangeRate(data.get("exchangeRate")==null?"0" : data.get("exchangeRate").toString() );
			res.setMinRate(minRate.toString() );
			res.setMaxRate(maxRate.toString());
			res.setStatus(data.get("status")==null?"":data.get("status").toString());
			resList.add(res);
		}		
		resList.sort(Comparator.comparing(CuurencyDropDownRes ::  getCodeDesc));
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}


	public List<String> getCompanyProductCurrencyIds(String companyId , String productId) {
		List<String> currencyIds = new ArrayList<String>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query=  cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			//Select
			query.select(c);
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("productId"),productId);
			query.where(n1,n2,n3,n4,n5);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			CompanyProductMaster res = list.size()>0 ? list.get(0) : null ;
			if( res !=null && res.getCurrencyIds()!=null ) {
				currencyIds = new ArrayList<String>(list.get(0).getCurrencyIds()==null?Collections.emptyList() : Arrays.asList(list.get(0).getCurrencyIds().split(",")));
				
			}
			
		}	catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return currencyIds;
		}




}
