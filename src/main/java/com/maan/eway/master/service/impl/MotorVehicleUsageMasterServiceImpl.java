/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-23 ( Date ISO 2022-09-23 - Time 15:08:00 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.MotorBodyTypeMaster;
import com.maan.eway.bean.MotorVehicleUsageMaster;
import com.maan.eway.common.res.MotorVehicleUsageMasterGetRes;
import com.maan.eway.master.req.MotorVehicleUsageChangeStatusReq;
import com.maan.eway.master.req.MotorVehicleUsageMasterGetReq;
import com.maan.eway.master.req.MotorVehicleUsageMasterGetallReq;
import com.maan.eway.master.req.MotorVehicleUsageMasterSaveReq;
import com.maan.eway.master.req.UsageDropDownReq;
import com.maan.eway.master.service.MotorVeicleUsageMasterService;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.MotorVehicleUsageMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>EserviceCustomerDetailsServiceimpl</h2>
*/
@Service
@Transactional
public class MotorVehicleUsageMasterServiceImpl implements MotorVeicleUsageMasterService {

@Autowired
private MotorVehicleUsageMasterRepository repo;

@Autowired
private ListItemValueRepository listRepo;

@PersistenceContext
private EntityManager em;


private Logger log=LogManager.getLogger(MotorVehicleUsageMasterServiceImpl.class);

Gson json = new Gson();

@Override
public List<String> validateMotorVehicleUsageDetails(MotorVehicleUsageMasterSaveReq req) {
	List<String> errorList = new ArrayList<String>();

	try {

//		if (StringUtils.isBlank(req.getVehicleUsageId())) {
//			errorList.add(new Error("01", "VehicleUsageId", "Please Enter VehicleUsageId "));
//		}
		if (StringUtils.isBlank(req.getSectionId())) {
			//errorList.add(new Error("01", "SectionId", "Please Enter SectionId "));
			errorList.add("1302");
		}
		if (StringUtils.isBlank(req.getVehicleUsageDesc())) {
			//errorList.add(new Error("02", "VehicleUsageDesc", "Please Enter VehicleUsageDesc"));
			errorList.add("1303");
		}
		else if (req.getVehicleUsageDesc().length()>100) {
			//errorList.add(new Error("02", "VehicleUsageDesc", "Please Enter VehicleUsageDesc within 100 Characters"));
			errorList.add("1304");
		}else if (StringUtils.isBlank(req.getVehicleUsageId()) &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())) {
			List<MotorVehicleUsageMaster> vehList = getVehicleUsageDescExistDetails(req.getVehicleUsageDesc() , req.getInsuranceId() , req.getBranchCode());
			if (vehList.size()>0 ) {
				//errorList.add(new Error("02", "VehicleUsageDesc", "This VehicleUsageDesc Already Exist "));
				errorList.add("1305");
			}
		}else if (StringUtils.isNotBlank(req.getVehicleUsageId()) &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())) {
			List<MotorVehicleUsageMaster> vehList = getVehicleUsageDescExistDetails(req.getVehicleUsageDesc() , req.getInsuranceId() , req.getBranchCode());
			
			if (vehList.size()>0 &&  (! req.getVehicleUsageId().equalsIgnoreCase(vehList.get(0).getVehicleUsageId().toString())) ) {
				//errorList.add(new Error("02", "VehicleUsageDesc", "This VehicleUsageDesc Already Exist "));
				errorList.add("1305");
			}
			
		}
		// Date Validation
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);
		cal.add(Calendar.DAY_OF_MONTH, -1);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 50);
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
			//errorList.add(new Error("03", "EffectiveDateStart", "Please Enter Effective Date Start"));
			errorList.add("2034");

		} else if (req.getEffectiveDateStart().before(today)) {
			//errorList.add(new Error("03", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errorList.add("2035");
		}
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
			//errorList.add(new Error("05", "Status", "Please Select Status  "));
			errorList.add("2036");
		} else if (req.getStatus().length() > 1) {
			//errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			errorList.add("2037");
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			//errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("2038");
		}
		// Claim Status Validation
		if (req.getClaimStatus().length() > 1) {
			//errorList.add(new Error("05", "Claim Status", "Claim Status 1 Character Only"));
			errorList.add("1306");
		} else if (!("Y".equals(req.getClaimStatus()) || "N".equals(req.getClaimStatus()))) {
			//errorList.add(new Error("05", "Claim Status", "Enter Claim Status Y or N Only"));
			errorList.add("1307");
		}
		if (req.getB2cStatus().length() > 1) {
			//errorList.add(new Error("06", "B2C Status", "B2C Status 1 Character Only"));
			errorList.add("1308");
		} else if (!("Y".equals(req.getB2cStatus()) || "N".equals(req.getB2cStatus()))) {
			//errorList.add(new Error("06", "B2C Status", "Enter B2C Status Y or N Only"));
			errorList.add("1309");
		}
		if (StringUtils.isBlank(req.getInsuranceId())) {
			//errorList.add(new Error("07", "InsuranceId", "Please Enter InsuranceId"));
			errorList.add("2101");
		}
		
		if (StringUtils.isBlank(req.getBranchCode())) {
			//errorList.add(new Error("07", "BranchCode", "Please Select BranchCode"));
			errorList.add("1256");
		}
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}

public List<MotorVehicleUsageMaster> getVehicleUsageDescExistDetails(String VehicleUsageDesc , String InsuranceId , String branchCode) {
	List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);

		// Find All
		Root<MotorVehicleUsageMaster> b = query.from(MotorVehicleUsageMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<MotorVehicleUsageMaster> ocpm1 = amendId.from(MotorVehicleUsageMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("vehicleUsageId"), b.get("vehicleUsageId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
		amendId.where(a1,a2,a3,a4,a5);

		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(cb.lower( b.get("vehicleUsageDesc")), VehicleUsageDesc.toLowerCase());
		Predicate n3 = cb.equal(b.get("companyId"),InsuranceId);
		Predicate n4 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n4,n5);
		query.where(n1,n2,n3,n6);
		
		// Get Result
		TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}

@Override
public SuccessRes saveMotorVehicleUsageDetails(MotorVehicleUsageMasterSaveReq req) {
	SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	MotorVehicleUsageMaster saveData = new MotorVehicleUsageMaster();
	List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId=0;
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdformat.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = new Date() ;
		String createdBy = req.getCreatedBy();

		String vehicleUsageId = "";
		if (req.getVehicleUsageId()==null) {
			// Save
			Integer totalCount = getMasterTableCount( req.getInsuranceId() , req.getBranchCode());
			vehicleUsageId = Integer.valueOf(totalCount + 1).toString();
			entryDate = new Date();
			createdBy = req.getCreatedBy();
			res.setResponse("Saved Successfully");
			res.setSuccessId(vehicleUsageId);
		} else {
			// Update
			vehicleUsageId = req.getVehicleUsageId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);
			// Find all
			Root<MotorVehicleUsageMaster> b = query.from(MotorVehicleUsageMaster.class);
			// Select
			query.select(b);
//			// Amend ID Max Filter
//			Subquery<Long> effectiveDate = query.subquery(Long.class);
//			Root<MotorVehicleUsageMaster> ocpm1 = effectiveDate.from(MotorVehicleUsageMaster.class);
//			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
//			Predicate a1 = cb.equal(ocpm1.get("vehicleUsageId"), b.get("vehicleUsageId"));
//			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), startDate);
//			Predicate a3 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
//			effectiveDate.where(a1, a2,a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Where
			Predicate n1 = cb.equal(b.get("status"),"Y");
			Predicate n11 = cb.equal(b.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n3 = cb.equal(b.get("vehicleUsageId"), req.getVehicleUsageId());
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n2 = cb.equal(b.get("companyId"),req.getInsuranceId());
			Predicate n5 = cb.equal(b.get("branchCode"),req.getBranchCode());
			
			query.where(n12,n2,n3,n4,n5).orderBy(orderList);

			// Get Result
			TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					MotorVehicleUsageMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if (list.size()>1 ) {
						MotorVehicleUsageMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				
			    }
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(vehicleUsageId);
		}
		dozerMapper.map(req, saveData);
		saveData.setVehicleUsageId(Integer.valueOf(vehicleUsageId));
		saveData.setEffectiveDateStart(startDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setStatus(req.getStatus());
		saveData.setCompanyId(req.getInsuranceId());
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedDate(new Date());
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setAmendId(amendId);
		saveData.setVehicleUsageDescLocal(req.getCodeDescLocal());
		repo.saveAndFlush(saveData);
	

		log.info("Saved Details is --> " + json.toJson(saveData));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
	}
	return res;
}

public Integer getMasterTableCount(String companyId , String branchCode) {
	Integer data = 0;
	try {
		List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);
		// Find all
		Root<MotorVehicleUsageMaster> b = query.from(MotorVehicleUsageMaster.class);
		// Select
		query.select(b);
		
		// Amend ID Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<MotorVehicleUsageMaster> ocpm1 = effectiveDate.from(MotorVehicleUsageMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("vehicleUsageId"), b.get("vehicleUsageId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		effectiveDate.where(a1,a2,a3);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("vehicleUsageId")));
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		Predicate n2 = cb.equal(b.get("companyId"), companyId);
		Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		query.where(n1,n2,n5).orderBy(orderList);
	
		// Get Result
		TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ? list.get(0).getVehicleUsageId() : 0 ;
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
	}
	return data;
}
private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}

@Override
public MotorVehicleUsageMasterGetRes getMotorVehicleDetails(MotorVehicleUsageMasterGetReq req) {
	MotorVehicleUsageMasterGetRes res = new MotorVehicleUsageMasterGetRes();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);
		List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();

		// Find All
		Root<MotorVehicleUsageMaster> c = query.from(MotorVehicleUsageMaster.class);

		// Select
		query.select(c);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<MotorVehicleUsageMaster> ocpm1 = amendId.from(MotorVehicleUsageMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("vehicleUsageId"), ocpm1.get("vehicleUsageId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), c.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),c.get("branchCode"));
		amendId.where(a1, a2,a3);


		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));

		// Where

		Predicate n1 = cb.equal(c.get("amendId"), amendId);
		Predicate n2 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(c.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(c.get("vehicleUsageId"), req.getVehicleUsageId());
		Predicate n5 = cb.equal(c.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3,n5);
		query.where(n1,n2,n4,n6).orderBy(orderList);


		// Get Result
		TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getVehicleUsageId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(MotorVehicleUsageMaster :: getVehicleUsageDesc ));
		
		res = dozerMapper.map(list.get(0), MotorVehicleUsageMasterGetRes.class);
		res.setVehicleUsageId(list.get(0).getVehicleUsageId().toString());
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		res.setCodeDescLocal(list.get(0).getVehicleUsageDescLocal());
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}

@Override
public List<MotorVehicleUsageMasterGetRes> getallMotorVehicleDetails(MotorVehicleUsageMasterGetallReq req) {
	List<MotorVehicleUsageMasterGetRes> resList = new ArrayList<MotorVehicleUsageMasterGetRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
	//	Date today = req.getEffectiveDateStart() != null ? req.getEffectiveDateStart() : new Date();
//		Calendar cal = new GregorianCalendar();
//		cal.setTime(today);
//		cal.set(Calendar.HOUR_OF_DAY, 23);
//		cal.set(Calendar.MINUTE, 1);
//		today = cal.getTime();

		List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
		
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);

		// Find All
		Root<MotorVehicleUsageMaster> c = query.from(MotorVehicleUsageMaster.class);

		// Select
		query.select(c);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<MotorVehicleUsageMaster> ocpm1 = amendId.from(MotorVehicleUsageMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(c.get("vehicleUsageId"), ocpm1.get("vehicleUsageId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), c.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), c.get("branchCode"));
		//Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		amendId.where(a1, a2, a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(c.get("amendId"), amendId);
		Predicate n2 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(c.get("branchCode"), req.getBranchCode());
	//	Predicate n5 = cb.equal(c.get("branchCode"), "99999");
	//	Predicate n6 = cb.or(n3, n5);
		query.where(n1, n2, n3).orderBy(orderList);

		// Get Result
		TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getVehicleUsageId())))
				.collect(Collectors.toList());
		list.sort(Comparator.comparing(MotorVehicleUsageMaster::getVehicleUsageDesc));

		// Map
		for (MotorVehicleUsageMaster data : list) {
			MotorVehicleUsageMasterGetRes res = new MotorVehicleUsageMasterGetRes();

			res = mapper.map(data, MotorVehicleUsageMasterGetRes.class);
			res.setCodeDescLocal(data.getVehicleUsageDescLocal());
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}

@Override
public List<MotorVehicleUsageMasterGetRes> getactiveMotorVehicleDetails(MotorVehicleUsageMasterGetallReq req) {
	List<MotorVehicleUsageMasterGetRes> resList = new ArrayList<MotorVehicleUsageMasterGetRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
//		Date today = req.getEffectiveDateStart() != null ? req.getEffectiveDateStart() : new Date();
//		Calendar cal = new GregorianCalendar();
//		cal.setTime(today);
//		cal.set(Calendar.HOUR_OF_DAY, 23);
//		cal.set(Calendar.MINUTE, 1);
//		today = cal.getTime();

		List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);

		// Find All
		Root<MotorVehicleUsageMaster> c = query.from(MotorVehicleUsageMaster.class);

		// Select
		query.select(c);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<MotorVehicleUsageMaster> ocpm1 = amendId.from(MotorVehicleUsageMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(c.get("vehicleUsageId"), ocpm1.get("vehicleUsageId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), c.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), c.get("branchCode"));
	//	Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		amendId.where(a1, a2, a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(c.get("amendId"), amendId);

		Predicate n2 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(c.get("branchCode"), req.getBranchCode());
		Predicate n5 = cb.equal(c.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3, n5);
		Predicate n7 = cb.equal(c.get("status"), "Y");
		Predicate n4 = cb.equal(c.get("sectionId"), req.getSectionId());
		query.where(n1, n2, n4, n6, n7).orderBy(orderList);
		
		// Get Result
		TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getVehicleUsageId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(MotorVehicleUsageMaster::getVehicleUsageDesc));
		// Map
		for (MotorVehicleUsageMaster data : list) {
			MotorVehicleUsageMasterGetRes res = new MotorVehicleUsageMasterGetRes();

			res = mapper.map(data, MotorVehicleUsageMasterGetRes.class);
		
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}

@Override
public List<DropDownRes> getVehicleUsageDropdown(UsageDropDownReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);;
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		String bodyType = "";
		if(StringUtils.isNotBlank(req.getBodyId())  ) {
			List<MotorBodyTypeMaster> bodyTypeList =  getBodyTypeMasterDropdown(req.getInsuranceId() , req.getBranchCode() ,req.getSectionId(), req.getBodyId() ) ;
			bodyType = bodyTypeList.size() > 0 ? bodyTypeList.get(0).getBodyType() : "";
		}
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorVehicleUsageMaster> query=  cb.createQuery(MotorVehicleUsageMaster.class);
		List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
		// Find All
		Root<MotorVehicleUsageMaster> c = query.from(MotorVehicleUsageMaster.class);
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("vehicleUsageDesc")));
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<MotorVehicleUsageMaster> ocpm1 = effectiveDate.from(MotorVehicleUsageMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("vehicleUsageId"),ocpm1.get("vehicleUsageId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
		Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
		Predicate a5 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
		effectiveDate.where(a1, a2,a3,a4,a5);
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<MotorVehicleUsageMaster> ocpm2 = effectiveDate2.from(MotorVehicleUsageMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a6 = cb.equal(c.get("vehicleUsageId"),ocpm2.get("vehicleUsageId"));
		Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
		Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
		Predicate a10 = cb.equal(c.get("sectionId"),  ocpm2.get("sectionId"));
		
		effectiveDate2.where(a6,a7,a8,a9,a10);
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n11 = cb.equal(c.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
	//	Predicate n4 = cb.like(c.get("sectionId"), "%" +req.getSectionId() + "%");
		Predicate n5 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n6 = cb.equal(c.get("branchCode"), req.getBranchCode());
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
	     Predicate n8 = cb.or(n6,n7);
		Predicate n4 = cb.or(cb.equal(c.get("sectionId"), req.getSectionId()),cb.equal(c.get("sectionId"), "99999"));
		if(StringUtils.isNotBlank(bodyType)) {
			Predicate n9 = cb.equal(c.get("bodyType"), bodyType);
			query.where(n12,n2,n3,n4,n5,n8,n9).orderBy(orderList);
			
		} else {
			query.where(n12,n2,n3,n4,n5,n8).orderBy(orderList);
			
		}
		
		// Get Result
		TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
		list = result.getResultList();
		for (MotorVehicleUsageMaster data : list) {
			// Response 
			
			
				DropDownRes res = new DropDownRes();
				res.setCode(data.getVehicleUsageId().toString());
				res.setCodeDesc(data.getVehicleUsageDesc());
				res.setCodeDescLocal(data.getVehicleUsageDescLocal());
				res.setStatus(data.getStatus());
				resList.add(res);
			
		}
		
		
	}
		catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is --->"+e.getMessage());
			return null;
			}
		return resList;
	}

@Override
public SuccessRes changeStatusOfVehicleUsage(MotorVehicleUsageChangeStatusReq req) {
	SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	MotorVehicleUsageMaster saveData = new MotorVehicleUsageMaster();
	List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId=0;
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdformat.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = new Date() ;
		String createdBy = req.getCreatedBy();

		String vehicleUsageId = "";
		
		
			// Update
			vehicleUsageId = req.getVehicleUsageId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);
			// Find all
			Root<MotorVehicleUsageMaster> b = query.from(MotorVehicleUsageMaster.class);
			// Select
			query.select(b);
			//Orderby
			Subquery<Long> amendId2 = query.subquery(Long.class);
			Root<MotorVehicleUsageMaster> ocpm1 = amendId2.from(MotorVehicleUsageMaster.class);
			amendId2.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("vehicleUsageId"), b.get("vehicleUsageId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			amendId2.where(a1, a2,a3);
			//Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("branchCode")));
			//Where
			Predicate n1 = cb.equal(b.get("vehicleUsageId"),req.getVehicleUsageId());
			Predicate n2 = cb.equal(b.get("companyId"),req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("branchCode"),req.getBranchCode());
			Predicate n4 = cb.equal(b.get("branchCode"),"99999");
			Predicate n5 = cb.or(n3,n4);
			Predicate n6 = cb.equal(b.get("amendId"),amendId2);
			
			query.where(n1,n2,n5,n6).orderBy(orderList);
			

			// Get Result
			TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			
			if(req.getBranchCode().equalsIgnoreCase(list.get(0).getBranchCode() ) &&  list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					MotorVehicleUsageMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if(req.getBranchCode().equalsIgnoreCase(list.get(0).getBranchCode() ) &&  list.size()>1) {
						MotorVehicleUsageMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				
			    }
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(vehicleUsageId);

		dozerMapper.map(list.get(0), saveData);
		saveData.setVehicleUsageId(Integer.valueOf(vehicleUsageId));
		saveData.setSectionId(list.get(0).getSectionId());
		saveData.setEffectiveDateStart(startDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setStatus(req.getStatus());
		saveData.setCompanyId(req.getInsuranceId());
		saveData.setBranchCode(req.getBranchCode());
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedDate(new Date());
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setAmendId(amendId);
		repo.saveAndFlush(saveData);
	

		log.info("Saved Details is --> " + json.toJson(saveData));
		res.setResponse("Status Changed");
		res.setSuccessId(req.getVehicleUsageId());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;
}


@Override
public List<DropDownRes> getInduvidualVehicleUsageDropdown( UsageDropDownReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);;
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		String bodyType = "";
		if(StringUtils.isNotBlank(req.getBodyId()) && !(req.getInsuranceId().equals("100040") || req.getInsuranceId().equals("100042"))) {
			List<MotorBodyTypeMaster> bodyTypeList =  getBodyTypeMasterDropdown(req.getInsuranceId() , req.getBranchCode() ,"", req.getBodyId() ) ;
			bodyType = bodyTypeList.size() > 0 ? bodyTypeList.get(0).getBodyType() : "";
		}
		
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorVehicleUsageMaster> query=  cb.createQuery(MotorVehicleUsageMaster.class);
		List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
		// Find All
		Root<MotorVehicleUsageMaster> c = query.from(MotorVehicleUsageMaster.class);
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<MotorVehicleUsageMaster> ocpm1 = effectiveDate.from(MotorVehicleUsageMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("vehicleUsageId"),ocpm1.get("vehicleUsageId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate a4 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
		Predicate a10 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId"));

		effectiveDate.where(a1,a2,a3,a4,a10);
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<MotorVehicleUsageMaster> ocpm2 = effectiveDate2.from(MotorVehicleUsageMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a5 = cb.equal(c.get("vehicleUsageId"),ocpm2.get("vehicleUsageId"));
		Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
		Predicate a9 = cb.equal(c.get("sectionId"),ocpm2.get("sectionId"));
		effectiveDate2.where(a5,a6,a7,a8,a9);
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
		Predicate n5 = cb.equal(c.get("branchCode"), req.getBranchCode());
		Predicate n6 = cb.equal(c.get("branchCode"), "99999");
		Predicate n7 = cb.or(n5,n6);
		if(StringUtils.isNotBlank(bodyType)) {
			Predicate n8 = cb.equal(c.get("bodyType"), bodyType);
			query.where(n1,n2,n3,n4,n7,n8).orderBy(orderList);
		} else {
			query.where(n1,n2,n3,n4,n7).orderBy(orderList);
		}	
		// Get Result
		TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
		list = result.getResultList();
		
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getVehicleUsageId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(MotorVehicleUsageMaster :: getVehicleUsageDesc ));
		for (MotorVehicleUsageMaster data : list) {
			// Response 
			if(   (req.getInsuranceId().equals("100040") || req.getInsuranceId().equals("100042")) && req.getBodyId()!=null && req.getBodyId()!="")
			{
				String[] numbers =data.getBodyType()!=null ? data.getBodyType().split(","):null;
				if(numbers!=null) {
				Arrays.stream(numbers)
			    .filter(number -> number.trim().equals(req.getBodyId()))
			    .forEach(number -> {
			        DropDownRes res = new DropDownRes();
			        res.setCode(data.getVehicleUsageId().toString());
			        res.setCodeDesc(data.getVehicleUsageDesc());
			        res.setCodeDescLocal(data.getVehicleUsageDescLocal());
			        res.setStatus(data.getStatus());
			        res.setBodyType(data.getBodyType());
			        resList.add(res);
			    });}

			}else if(!(req.getInsuranceId().equals("100040") || req.getInsuranceId().equals("100042"))) {
				DropDownRes res = new DropDownRes();
				res.setCode(data.getVehicleUsageId().toString());
				res.setCodeDesc(data.getVehicleUsageDesc());
				res.setCodeDescLocal(data.getVehicleUsageDescLocal());
				res.setBodyType(data.getBodyType());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		}
	}
		catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is --->"+e.getMessage());
			return null;
			}
		return resList;
	}


public List<MotorBodyTypeMaster> getBodyTypeMasterDropdown(String companyId , String branchCode ,String sectionId , String bodyId ) {
	List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
	
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		;
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();

		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorBodyTypeMaster> query = cb.createQuery(MotorBodyTypeMaster.class);
		// Find All
		Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
		// Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));

		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
		Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
		Predicate a5 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
		effectiveDate.where(a1, a2,a3,a4,a5);
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a6 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
		Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
		Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
		Predicate a10 = cb.equal(c.get("sectionId"),  ocpm2.get("sectionId"));
		
		effectiveDate2.where(a6,a7,a8,a9,a10);
		// Where
		Predicate n1 = cb.equal(c.get("status"), "Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		Predicate n8 = cb.equal(c.get("companyId"), companyId);
		Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n6 = cb.equal(c.get("branchCode"), "99999");
		Predicate n7 = cb.or(n5,n6);
		Predicate n12 = cb.equal(c.get("status"),"R");
		Predicate n13 = cb.or(n1,n12);
		Predicate n14 = cb.equal(c.get("bodyId"), bodyId );
		if(StringUtils.isNotBlank(sectionId) ) {
			Predicate n15 = cb.equal(c.get("sectionId"), sectionId );
			query.where(n2,n3,n8,n7,n13,n14,n15);
		} else {
			query.where(n2,n3,n8,n7,n13,n14);
		}
		
		// Get Result
		TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBodyId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(MotorBodyTypeMaster :: getBodyNameEn ));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return list;
}



}
