/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-12-05 ( Date ISO 2022-12-05 - Time 13:36:13 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.eway.bean.ProductGroupMaster;
import com.maan.eway.common.req.ProductGrorpMasteReq;
import com.maan.eway.common.res.ProductGroupMasterRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.error.Error;
import com.maan.eway.master.controller.ProductGroupDropDownReq;
import com.maan.eway.master.req.ProductGroupGetAllReq;
import com.maan.eway.master.req.ProductGroupGetReq;
import com.maan.eway.master.res.ProductGroupMasterDropDownRes;
import com.maan.eway.master.service.ProductGroupMasterService;
import com.maan.eway.repository.ProductGroupMasterRepository;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

@Service
@Transactional
public class ProductGroupMasterServiceImpl implements ProductGroupMasterService {

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private ProductGroupMasterRepository repository;


private Logger log=LogManager.getLogger(ProductGroupMasterServiceImpl.class);
/*
public ProductGroupMasterServiceImpl(ProductGroupMasterRepository repo) {
this.repository = repo;
}

 @Override
    public ProductGroupMaster create(ProductGroupMaster d) {

       ProductGroupMaster entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public ProductGroupMaster update(ProductGroupMaster d) {
        ProductGroupMaster c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public ProductGroupMaster getOne(long id) {
        ProductGroupMaster t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }


    @Override
    public List<ProductGroupMaster> getAll() {
        List<ProductGroupMaster> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }

/*
    @Override
    public boolean delete(long id) {
        try {
            repository.deleteById(id);
            return true;

        } catch (Exception ex) {
			log.error(ex);
            return false;
        }
    }

 */


@Override
public List<ProductGroupMasterDropDownRes> getProductGroupMasterDropdown(ProductGroupDropDownReq req) {
List<ProductGroupMasterDropDownRes> resList = new ArrayList<ProductGroupMasterDropDownRes>();
try {
	Date today = new Date();
	Calendar cal = new GregorianCalendar();
	cal.setTime(today);
	today = cal.getTime();
	Date todayEnd = cal.getTime();
	
	// Criteria
	CriteriaBuilder cb = em.getCriteriaBuilder();
	CriteriaQuery<ProductGroupMaster> query = cb.createQuery(ProductGroupMaster.class);
	List<ProductGroupMaster> list = new ArrayList<ProductGroupMaster>();
	// Find All
	Root<ProductGroupMaster> c = query.from(ProductGroupMaster.class);
	// Select
	query.select(c);
	// Order By
	List<Order> orderList = new ArrayList<Order>();
	orderList.add(cb.asc(c.get("groupId")));

	// Effective Date Start Max Filter
	Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
	Root<ProductGroupMaster> ocpm1 = effectiveDate.from(ProductGroupMaster.class);
	effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
	Predicate a1 = cb.equal(c.get("groupId"), ocpm1.get("groupId"));
	Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
	Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
	Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
	Predicate a5 = cb.equal(c.get("productId"), ocpm1.get("productId"));
	effectiveDate.where(a1, a2, a3, a4, a5);
	// Effective Date End Max Filter
	Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
	Root<ProductGroupMaster> ocpm2 = effectiveDate2.from(ProductGroupMaster.class);
	effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
	Predicate a6 = cb.equal(c.get("groupId"), ocpm2.get("groupId"));
	Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
	Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
	Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
	Predicate a10 = cb.equal(c.get("productId"), ocpm2.get("productId"));

	effectiveDate2.where(a6, a7, a8, a9, a10);
	// Where
	Predicate n1 = cb.equal(c.get("status"),"Y");
	Predicate n11 = cb.equal(c.get("status"),"R");
	Predicate n12 = cb.or(n1,n11);
	Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
	Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
	Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
	Predicate n8 = cb.equal(c.get("companyId"), req.getInsuranceId());
	Predicate n5 = cb.equal(c.get("branchCode"), req.getBranchCode());
	Predicate n6 = cb.equal(c.get("branchCode"), "99999");
	Predicate n7 = cb.or(n5, n6);
	query.where(n12, n2, n3, n4, n7, n8).orderBy(orderList);
	// Get Result
	TypedQuery<ProductGroupMaster> result = em.createQuery(query);
	list = result.getResultList();
	list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getGroupId()))).collect(Collectors.toList());
	list.sort(Comparator.comparing(ProductGroupMaster::getGroupDesc));
	for (ProductGroupMaster data : list) {
		// Response 
		ProductGroupMasterDropDownRes res = new ProductGroupMasterDropDownRes();
		res.setCode(data.getGroupId().toString());
		res.setCodeDesc(data.getBandDesc());
		res.setStart(data.getGroupFrom().toString());
		res.setEnd(data.getGroupTo().toString());
		res.setStatus(data.getStatus());
		resList.add(res);
	}
}
	catch(Exception e) {
		e.printStackTrace();
		log.info("Exception is --->"+e.getMessage());
		return null;
		}
	return resList;
}
private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}

@Override
public List<Error> validateProductGroupDetails(ProductGrorpMasteReq req) {
	// TODO Auto-generated method stub
	List<Error> errorList = new ArrayList<Error>();

	try {
	
		if (StringUtils.isBlank(req.getGroupDesc())) {
			errorList.add(new Error("02", "groupDescription", "Please Select groupDescription"));
		}else if (req.getGroupDesc().length() > 200){
			errorList.add(new Error("02","getGroupDesc", "Please Enter getGroupDesc 200 Characters")); 
		}
//		else if (StringUtils.isBlank(req.getGroupId()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())&& StringUtils.isNotBlank(req.getSectionId())) {
//			List<ClausesMaster> ClausesList = getClausesDescriptionExistDetails(req.getGroupDesc() , req.getCompanyId() , req.getBranchCode(), req.getProductId(),req.getSectionId());
//			if (ClausesList.size()>0 ) {
//				errorList.add(new Error("01", "ClausesDescription", "This ClausesDescription Already Exist "));
//			}
//		}else if (StringUtils.isNotBlank(req.getClausesId()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())&& StringUtils.isNotBlank(req.getProductId())&& StringUtils.isNotBlank(req.getSectionId())) {
//			List<ClausesMaster> ClausesList = getClausesDescriptionExistDetails(req.getClausesDescription() , req.getCompanyId() , req.getBranchCode(), req.getProductId(),req.getSectionId());
//			
//			if (ClausesList.size()>0 &&  (! req.getClausesId().equalsIgnoreCase(ClausesList.get(0).getClausesId().toString())) ) {
//				errorList.add(new Error("01", "ClausesDescription", "This ClausesDescription Already Exist "));
//			}
//			
//		}
//		
		
		if (StringUtils.isBlank(req.getCompanyId())) {
			errorList.add(new Error("02", "CompanyId", "Please Enter CompanyId"));
		}
		
		if (StringUtils.isBlank(req.getBranchCode())) {
			errorList.add(new Error("02", "BranchCode", "Please Select BranchCode"));
		}
		
		if (StringUtils.isBlank(req.getRemarks())) {
			errorList.add(new Error("04", "Remarks", "Please Select Remarks "));
		}else if (req.getRemarks().length() > 100){
			errorList.add(new Error("04","Remarks", "Please Enter Remarks within 100 Characters")); 
		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
			errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));

		} else if (req.getEffectiveDateStart().before(today)) {
			errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
		}
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
			errorList.add(new Error("05", "Status", "Please Select Status  "));
		} else if (req.getStatus().length() > 1) {
			errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
		}
		
		if (StringUtils.isBlank(req.getCoreAppCode())) {
			errorList.add(new Error("07", "CoreAppCode", "Please Select CoreAppCode"));
		}else if (req.getCoreAppCode().length() > 20){
			errorList.add(new Error("07","CoreAppCode", "Please Enter CoreAppCode within 20 Characters")); 
		}
//		if (StringUtils.isBlank(req.getRegulatoryCode())) {
//			errorList.add(new Error("08", "RegulatoryCode", "Please Select RegulatoryCode"));
//		}else if (req.getRegulatoryCode().length() > 20){
//			errorList.add(new Error("08","RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters")); 
//		}
		if (StringUtils.isBlank(req.getCreatedBy())) {
			errorList.add(new Error("09", "CreatedBy", "Please Select CreatedBy"));
		}else if (req.getCreatedBy().length() > 100){
			errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy within 100 Characters")); 
		}
		
//		if (StringUtils.isBlank(req.getCoverId())) {
//			errorList.add(new Error("10","CoverId", "Please Enter CoverId ")); 
//		}
//		if (StringUtils.isBlank(req.getExtraCoverId())) {
//			errorList.add(new Error("11","ExtraCoverId", "Please Enter ExtraCoverId ")); 
//		}
//		if (StringUtils.isBlank(req.getDisplayOrder())) {
//			errorList.add(new Error("12","DisplayOrder", "Please Enter DisplayOrder ")); 
//		}
//		if (req.getPdfLocation().length() > 100){
//			errorList.add(new Error("13","IntCode", "Please Enter IntCode  within 100 Characters")); 
//		}
		
		if (StringUtils.isBlank(req.getProductId().toString())) {
			errorList.add(new Error("14", "ProductId", "Please Enter ProductId"));
		}
//		if (StringUtils.isBlank(req.getSectionId())) {
//			errorList.add(new Error("15", "SectionId", "Please Enter SectionId"));
//		}
//		if (StringUtils.isBlank(req.getPolicyType())) {
//			errorList.add(new Error("16", "PolicyType", "Please Enter PolicyType"));
//		}
		
//		if (StringUtils.isBlank(req.getTypeId())) {
//			errorList.add(new Error("16", "TypeId", "Please Enter TypeId"));
//		}
//		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;}
@Override
public SuccessRes insertProductGroup(ProductGrorpMasteReq req) {
	// TODO Auto-generated method stub
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	ProductGroupMaster saveData = new ProductGroupMaster();
	List<ProductGroupMaster> list  = new ArrayList<ProductGroupMaster>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId = 0;
		Date StartDate = req.getEffectiveDateStart();
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLS_IN_A_DAY = 1000*60*60*24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime()- MILLS_IN_A_DAY);
		Date entryDate = null;
		String createdBy ="";
		Integer groupId = 0;
		Long totalCount=0l;
		
//        ProductGroupMasterId  id=new  ProductGroupMasterId();
//        id.setBranchCode(req.getBranchCode());
//        id.setCompanyId(req.getCompanyId());
//        id.setGroupId(req.getGroupId());
//        id.setProductId(req.getProductId());
		if(req.getGroupId()==null) {
			totalCount = repository.count();
			totalCount = totalCount+1;
			entryDate = new Date();
			createdBy = req.getCreatedBy();
			res.setResponse("Saved Successfully");
			res.setSuccessId(groupId.toString());
		}
		else {
			groupId = req.getGroupId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductGroupMaster> query = cb.createQuery(ProductGroupMaster.class);
			//Findall
			Root<ProductGroupMaster> b = query.from(ProductGroupMaster.class);
			//select
			query.select(b);
			//Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			//Where
			Predicate n1 = cb.equal(b.get("productId"),req.getProductId());
			Predicate n2 = cb.equal(b.get("companyId"),req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"),req.getBranchCode());
			Predicate n4 = cb.equal(b.get("productId"),req.getProductId());
			Predicate n5 = cb.equal(b.get("groupId"),req.getGroupId());
			
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductGroupMaster> result = em.createQuery(query);
			int limit=0, offset=2;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime()- MILLS_IN_A_DAY);
				if(list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
					amendId = list.get(0).getAmendId()+1;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					ProductGroupMaster lastRecord = list.get(0);
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repository.saveAndFlush(lastRecord);
				}
				else {
					amendId = list.get(0).getAmendId();
					entryDate = list.get(0).getEntryDate();
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0);
					if(list.size()>1) {
						ProductGroupMaster lastRecord = list.get(1);	
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repository.saveAndFlush(lastRecord);
					}
				}
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(groupId.toString());
		}
	
		dozerMapper.map(req, saveData);
		
		saveData.setGroupId( Long.valueOf(totalCount).intValue());				
		saveData.setEffectiveDateStart(StartDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setUpdatedDate(new Date());
		saveData.setAmendId(amendId);
		saveData.setGroupFrom(req.getGroupFrom());
		saveData.setBranchCode(req.getBranchCode()==null?"99999" :req.getBranchCode());
		saveData.setProductId(req.getProductId());
	
		repository.saveAndFlush(saveData);	
//		log.info("Saved Details is --> " + json.toJson(saveData));	
		}
	catch(Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
	}
	return res;
}


public List<ProductGroupMasterRes> getAllProductGroup(ProductGroupGetAllReq req)
{
	List<ProductGroupMasterRes> resList = new ArrayList<ProductGroupMasterRes>();
	DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		List<ProductGroupMaster> list = new ArrayList<ProductGroupMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ProductGroupMaster> query = cb.createQuery(ProductGroupMaster.class);

		// Find All
		Root<ProductGroupMaster> b = query.from(ProductGroupMaster.class);

		// Select
		query.select(b);

		// Effective Date End
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ProductGroupMaster> ocpm1 = amendId.from(ProductGroupMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a6 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a7 = cb.equal(ocpm1.get("productId"), b.get("productId"));
		Predicate a9 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));

		amendId.where(a6,a7,a9);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("groupDesc")));
		
		
		// Where
		Predicate n1 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
		Predicate n4 = cb.equal(b.get("amendId"), amendId);
		Predicate n5 = cb.equal(b.get("branchCode"), req.getBranchCode());		
		query.where(n1,n2,n4).orderBy(orderList);
		
		// Get Result
		TypedQuery<ProductGroupMaster> result = em.createQuery(query);
		list = result.getResultList();
		
//		// Map
		for (ProductGroupMaster data : list ) {
			ProductGroupMasterRes res = new ProductGroupMasterRes();

			res = dozerMapper.map(data, ProductGroupMasterRes.class);
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

}
	return resList;
}
public ProductGroupMasterRes getProductgroupById(ProductGroupGetReq req)
{
	
	ProductGroupMasterRes res = new ProductGroupMasterRes();
	DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		List<ProductGroupMaster> list = new ArrayList<ProductGroupMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ProductGroupMaster> query = cb.createQuery(ProductGroupMaster.class);

		// Find All
		Root<ProductGroupMaster> b = query.from(ProductGroupMaster.class);

		// Select
		query.select(b);

		// Effective Date End
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ProductGroupMaster> ocpm1 = amendId.from(ProductGroupMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a6 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a7 = cb.equal(ocpm1.get("productId"), b.get("productId"));
		Predicate a9 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a8 = cb.equal(ocpm1.get("groupId"), b.get("groupId"));

		amendId.where(a6,a7,a9,a8);
		
		
		// Where
		Predicate n1 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
		Predicate n4 = cb.equal(b.get("amendId"), amendId);
		Predicate n3 = cb.equal(b.get("groupId"), req.getGroupId());
		Predicate n5 = cb.equal(b.get("branchCode"), req.getBranchCode());		
		query.where(n1,n2,n4,n3);
		
		// Get Result
		TypedQuery<ProductGroupMaster> result = em.createQuery(query);
		list = result.getResultList();
		res = dozerMapper.map(list.get(0), ProductGroupMasterRes.class);	
		
//		// Map
	

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

   }
	return res;
}



}
