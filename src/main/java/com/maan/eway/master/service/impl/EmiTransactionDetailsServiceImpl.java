/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.EmiMaster;
import com.maan.eway.bean.EmiTransactionDetails;
import com.maan.eway.bean.EserviceBuildingDetails;
import com.maan.eway.bean.EserviceCommonDetails;
import com.maan.eway.bean.EserviceLifeDetails;
import com.maan.eway.bean.EserviceMotorDetails;
import com.maan.eway.bean.EserviceTravelDetails;
import com.maan.eway.bean.ExchangeMaster;
import com.maan.eway.bean.HomePositionMaster;
import com.maan.eway.bean.PaymentDetail;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.EmiInstallmentDetailsReq;
import com.maan.eway.master.req.EmiTransactionDetailsGetReq;
import com.maan.eway.master.req.EmiTransactionDetailsNextReq;
import com.maan.eway.master.req.EmiTransactionDetailsSaveReq;
import com.maan.eway.master.req.EmiTransactionDetailsUpdateReq;
import com.maan.eway.master.res.EmiCompanyInfoListRes;
import com.maan.eway.master.res.EmiDisplayListRes;
import com.maan.eway.master.res.EmiDisplayRes;
import com.maan.eway.master.res.EmiInfoListRes;
import com.maan.eway.master.res.EmiTransactionDetailsRes;
import com.maan.eway.master.service.EmiTransactionDetailsService;
import com.maan.eway.repository.EServiceMotorDetailsRepository;
import com.maan.eway.repository.EmiTransactionDetailsRepository;
import com.maan.eway.repository.EserviceBuildingDetailsRepository;
import com.maan.eway.repository.EserviceCommonDetailsRepository;
import com.maan.eway.repository.EserviceLifeDetailsRepository;
import com.maan.eway.repository.EserviceTravelDetailsRepository;
import com.maan.eway.repository.ExchangeMasterRepository;
import com.maan.eway.repository.HomePositionMasterRepository;
import com.maan.eway.repository.PaymentDetailRepository;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>EmiTransactionDetailsServiceimpl</h2>
 */
@Service
@Transactional
public class EmiTransactionDetailsServiceImpl implements EmiTransactionDetailsService {

	@Value(value = "${travel.productId}")
	private String travelProductId;
	
	@PersistenceContext
	private EntityManager em;

	@Autowired
	private EmiTransactionDetailsRepository repo;

	@Autowired
	private ExchangeMasterRepository exchangeMasterRepo;
	
	@Autowired
	private HomePositionMasterRepository homerepo;

	@Autowired
	private PaymentDetailRepository paymentdetailrepo;
	
	@Autowired
	private EServiceMotorDetailsRepository motorRepo;

	@Autowired
	private EserviceTravelDetailsRepository travelRepo;

	@Autowired
	private EserviceBuildingDetailsRepository buildingRepo;
	
	@Autowired
	private EserviceCommonDetailsRepository commonRepo;
	
	@Autowired
	private EserviceLifeDetailsRepository lifeRepo;
	
	Gson json = new Gson();

	private Logger log = LogManager.getLogger(EmiTransactionDetailsServiceImpl.class);

//Insert Validation
	

	@Override
	public List<Error> validateEmiTransactionDetails(EmiTransactionDetailsSaveReq req) {

		List<Error> errorList = new ArrayList<Error>();

		try {

			if(StringUtils.isBlank(req.getEndtTypeId())) {
			if (StringUtils.isBlank(req.getPremiumWithTax())) {
				errorList.add(new Error("01", "PremiumWithTax", "Please Enter PremiumWithTax "));
			} 
			
			if (StringUtils.isBlank(req.getInstallmentPeriod())) {
				errorList.add(new Error("02", "NoOfMonth", "Please Enter NoOfMonth"));
			}
			}

			if (StringUtils.isBlank(req.getQuoteNo())) {
				errorList.add(new Error("03", "QuoteNo", "Please Enter QuoteNo"));
			} 
			else {
			List<EmiTransactionDetails> quoteNo = repo.findByQuoteNoAndCompanyIdAndProductId(req.getQuoteNo(),
					req.getCompanyId(), req.getProductId());
			quoteNo = quoteNo.stream().filter(o -> o.getPaymentStatus().equals("Accept")).collect(Collectors.toList());
			if (quoteNo.size() > 0 && StringUtils.isNotBlank(req.getQuoteNo())) {
				// if (quoteNo.get(0).getPaymentStatus().equalsIgnoreCase("Accept")) {
				errorList.add(new Error("08", "QuoteNo", "This QuoteNo  Already Running"));
			}
		}
		
//			else {
//				List<EmiTransactionDetails> quoteNo = repo.findByQuoteNoAndCompanyIdAndProductId(req.getQuoteNo(),
//						req.getCompanyId(), req.getProductId());
//				quoteNo = quoteNo.stream().filter(o -> o.getQuoteNo() != null)
//						.filter(distinctByKey(o -> o.getQuoteNo())).collect(Collectors.toList());
//				if (quoteNo.size()>0 && StringUtils.isNotBlank(req.getQuoteNo())) {
//					if (quoteNo.get(0).getQuoteNo().equalsIgnoreCase(req.getQuoteNo())) {
//						errorList.add(new Error("08", "QuoteNo", "This QuoteNo  Already Exist"));
//					}
//				}
//			}
			
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
				errorList.add(new Error("05", "Status", "Please Select Status  "));
			} else if (req.getStatus().length() > 1) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy"));
			} else if (req.getCreatedBy().length() > 100) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			}
//			if (StringUtils.isBlank(req.getPaymentDetails())) {
//				errorList.add(new Error("08", "PaymentDetails", "Please Enter PaymentDetails "));
//			}
//			
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	//Insert
	@Transactional
	@Override
	public SuccessRes insertEmiTransactionDetails(EmiTransactionDetailsSaveReq req) {
		SuccessRes res = new SuccessRes();
		DecimalFormat df = new DecimalFormat("0.00");
		EmiTransactionDetails saveData = new EmiTransactionDetails();

		try {
			BigDecimal adv=new BigDecimal(0);
		if("N".equalsIgnoreCase(req.getStatus())) {
			List<EmiTransactionDetails> list = repo.findByQuoteNoAndCompanyIdAndProductId(req.getQuoteNo(),
					req.getCompanyId(), req.getProductId());
			if (list.size() > 0 && StringUtils.isNotBlank(req.getQuoteNo())) {
				repo.deleteAll(list);
			}
			res.setSuccessId(req.getQuoteNo());
			res.setResponse("Saved Successful");
		}else if("Y".equalsIgnoreCase(req.getEmiYn()) && StringUtils.isNotBlank(req.getEndtTypeId()) && "Y".equalsIgnoreCase(req.getStatus())) {
			res= getEndorsementEmiDetails(req);
		}else {
		
			String quoteNo = req.getQuoteNo();
			String insDesc = "";
			Date entryDate = new Date();
			String createdBy = req.getCreatedBy();
			Integer i = 0;
			Double temp = 0d, premiumWithTax, interestPercent, advancePercent, interestAmount, totalLoanAmount,
					advanceAmount, balanceAmount = null, installment = 0d;

			Integer noOfMonth = Integer.valueOf(req.getInstallmentPeriod().toString());

			// Finding Old Record
			List<EmiTransactionDetails> list = repo.findByQuoteNoAndCompanyIdAndProductId(req.getQuoteNo(),
					req.getCompanyId(), req.getProductId());
			//list = list.stream().filter(o -> o.getQuoteNo() == null).collect(Collectors.toList());
			if (list.size() > 0 && StringUtils.isNotBlank(req.getQuoteNo())) {
				// if (!list.get(0).getPaymentStatus().equalsIgnoreCase("Accept")) {
				repo.deleteAll(list);
			}
			
	
			//Getting Record from Emi Master
			List<EmiMaster> emiMasterData = getEmiMasterDataByInsPeriod(req.getCompanyId(), req.getProductId(),
					req.getPolicyType(),	req.getInstallmentPeriod());
			interestPercent = Double.valueOf(emiMasterData.get(0).getInterestPercent().toString());
			advancePercent = Double.valueOf(emiMasterData.get(0).getAdvancePercent().toString());

			// Calculation
			for (i = 0; i <= noOfMonth; i++) {
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.MONTH, i);
				Date dueDate = cal.getTime();

				premiumWithTax = Double.valueOf(req.getPremiumWithTax());
				interestAmount = premiumWithTax * interestPercent / 100;
				interestAmount=interestAmount/12;
				interestAmount=interestAmount*noOfMonth;
				totalLoanAmount = premiumWithTax + interestAmount;
				advanceAmount = totalLoanAmount * advancePercent / 100;
				adv=new BigDecimal(advanceAmount);
				if (i == 0) {
					balanceAmount = totalLoanAmount - advanceAmount;
					installment = balanceAmount / noOfMonth;
				} else {
					temp = balanceAmount;
					temp -= installment;
					balanceAmount = temp;
				}
				// Save
				saveData.setPremiumWithTax(premiumWithTax);
				saveData.setInstallmentPeriod(noOfMonth.toString());
				saveData.setInterest(interestPercent);
				saveData.setAdvance(advancePercent.toString());
				saveData.setInterestAmount((Double.valueOf(Math.round(interestAmount))));
				if (i == 0) {
					saveData.setDueAmount((Double.valueOf(Math.round(advanceAmount))));
					insDesc="Advance Amount";
					//saveData.setPaymentDate(entryDate);
					saveData.setStatus(req.getStatus());
					saveData.setPaymentDetails(req.getPaymentDetails());
				} else {
					saveData.setDueAmount((Double.valueOf(Math.round(installment))));
					insDesc="Installment Amount";
					saveData.setStatus("Y");
					saveData.setPaymentDetails(null);
				}
				saveData.setPaymentDate(null);
				saveData.setPaymentStatus("Pending");
				saveData.setQuoteNo(quoteNo);
				saveData.setProductId(req.getProductId());
				saveData.setCompanyId(req.getCompanyId());
				saveData.setBalanceAmount(Double.valueOf(Math.round(balanceAmount)));
				saveData.setTotalLoanAmount(Double.valueOf(Math.round(totalLoanAmount)));
				saveData.setInstallmentDesc(insDesc);
				saveData.setInstalment(i.toString());
				saveData.setEntryDate(entryDate);
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setUpdatedDate(new Date());
				saveData.setUpdatedBy(createdBy);
				saveData.setDueDate(dueDate);
				saveData.setRemarks(req.getRemarks());
			
				
				repo.saveAndFlush(saveData);
			}
			res.setSuccessId(quoteNo);
			res.setResponse("Saved Successful");
		}
		CompanyProductMaster product = getCompanyProductMasterDropdown(req.getCompanyId(),req.getProductId().toString());
			//Update Home Position Master
			if("Y".equalsIgnoreCase(req.getStatus())) {
				HomePositionMaster homeData=homerepo.findByQuoteNo(req.getQuoteNo());
				homeData.setInstallmentPeriod(req.getInstallmentPeriod());
				homeData.setEmiYn("Y");
				homeData.setNoOfInstallment("0");
				homeData.setEmiPremium(adv);
				homerepo.save(homeData);
				if (product.getMotorYn().equalsIgnoreCase("M")) {
					EserviceMotorDetails motor= saveMotor("Y",adv,req.getQuoteNo(),req.getInstallmentPeriod(),"0");	
				}else if (product.getMotorYn().equalsIgnoreCase("H")&& req.getProductId().equalsIgnoreCase(travelProductId)) {
					EserviceTravelDetails travel= saveTravel("Y",adv,req.getQuoteNo(),req.getInstallmentPeriod(),"0");	
				}else if (product.getMotorYn().equalsIgnoreCase("A")) {
					EserviceBuildingDetails motor= saveBuilding("Y",adv,req.getQuoteNo(),req.getInstallmentPeriod(),"0");	
				}else if (product.getMotorYn().equalsIgnoreCase("L")) {
					EserviceLifeDetails motor= saveLife("Y",adv,req.getQuoteNo(),req.getInstallmentPeriod(),"0");	
				}else {
					EserviceCommonDetails motor= saveCommon("Y",adv,req.getQuoteNo(),req.getInstallmentPeriod(),"0");	
				}
				
			}else {
				HomePositionMaster homeData=homerepo.findByQuoteNo(req.getQuoteNo());
				homeData.setInstallmentPeriod("");
				homeData.setEmiYn("N");
				homeData.setNoOfInstallment(null);
				homeData.setEmiPremium(null);
				homerepo.save(homeData);
				if (product.getMotorYn().equalsIgnoreCase("M")) {
					EserviceMotorDetails motor= saveMotor("N",null,req.getQuoteNo(),"",null);	
				}else if (product.getMotorYn().equalsIgnoreCase("H")&& req.getProductId().equalsIgnoreCase(travelProductId)) {
					EserviceTravelDetails travel= saveTravel("N",null,req.getQuoteNo(),"",null);	
				}else if (product.getMotorYn().equalsIgnoreCase("A")) {
					EserviceBuildingDetails building= saveBuilding("N",null,req.getQuoteNo(),"",null);	
				}else if (product.getMotorYn().equalsIgnoreCase("L")) {
					EserviceLifeDetails life= saveLife("N",null,req.getQuoteNo(),"",null);	
				}else {
					EserviceCommonDetails common= saveCommon("N",null,req.getQuoteNo(),"",null);	
				}
			}
			
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return res;
	}
	
	public EserviceMotorDetails saveMotor(String status,BigDecimal adv,String quoteNo,String installmentPeriod,String noOFIns) {
		EserviceMotorDetails save=new EserviceMotorDetails();
		DozerBeanMapper dozermapper = new DozerBeanMapper ();
		try {
		
			List<EserviceMotorDetails> list=motorRepo.findByQuoteNoOrderByRiskIdAsc(quoteNo);
			if(list!=null && list.size()>0) {
			
				for(EserviceMotorDetails data:list) {
					save=dozermapper.map(data, EserviceMotorDetails.class);
					save.setEmiYn("Y");
					save.setInstallmentPeriod(Integer.valueOf(installmentPeriod != null && !installmentPeriod.isEmpty()? installmentPeriod : "0" ));
					save.setNoOfInstallment(Integer.valueOf(noOFIns != null && !noOFIns.isEmpty() ? noOFIns : "0"));
					save.setEmiPremium(adv);
					motorRepo.save(save);
				}
			}
			

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return save;
	}
	
	public EserviceTravelDetails saveTravel(String status,BigDecimal adv,String quoteNo,String installmentPeriod,String noOFIns) {
		EserviceTravelDetails save=new EserviceTravelDetails();
		DozerBeanMapper dozermapper = new DozerBeanMapper ();
		try {
		
			EserviceTravelDetails data=travelRepo.findByQuoteNo(quoteNo);
			if (data != null) {
				save = dozermapper.map(data, EserviceTravelDetails.class);
				save.setEmiYn("Y");
				save.setInstallmentPeriod(Integer.valueOf(installmentPeriod));
				save.setNoOfInstallment(Integer.valueOf(noOFIns));
				save.setEmiPremium(adv);
				travelRepo.save(save);
				}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return save;
	}
	public EserviceBuildingDetails saveBuilding(String status,BigDecimal adv,String quoteNo,String installmentPeriod,String noOFIns) {
		EserviceBuildingDetails save=new EserviceBuildingDetails();
		DozerBeanMapper dozermapper = new DozerBeanMapper ();
		try {
		
			List<EserviceBuildingDetails> list=buildingRepo.findByQuoteNoOrderByRiskIdAsc(quoteNo);
			if(list!=null && list.size()>0) {
				
				for(EserviceBuildingDetails data:list) {
				save = dozermapper.map(data, EserviceBuildingDetails.class);
				save.setEmiYn("Y");
				save.setInstallmentPeriod(StringUtils.isBlank(installmentPeriod)?null:Integer.valueOf(installmentPeriod));
				save.setNoOfInstallment(StringUtils.isBlank(noOFIns)?null:Integer.valueOf(noOFIns));
				save.setEmiPremium(adv);
				buildingRepo.save(save);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return save;
	}
	
	public EserviceCommonDetails saveCommon(String status,BigDecimal adv,String quoteNo,String installmentPeriod,String noOFIns) {
		EserviceCommonDetails save=new EserviceCommonDetails();
		DozerBeanMapper dozermapper = new DozerBeanMapper ();
		try {
		
			List<EserviceCommonDetails> list=commonRepo.findByQuoteNo(quoteNo);
			if(list!=null && list.size()>0) {
				
				for(EserviceCommonDetails data:list) {
				save = dozermapper.map(data, EserviceCommonDetails.class);
				save.setEmiYn("Y");
				save.setInstallmentPeriod(StringUtils.isBlank(installmentPeriod)?null:Integer.valueOf(installmentPeriod));
				save.setNoOfInstallment(StringUtils.isBlank(noOFIns)?null:Integer.valueOf(noOFIns));
				save.setEmiPremium(adv==null?null:adv);
				commonRepo.save(save);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return save;
	}
	
	public EserviceLifeDetails saveLife(String status,BigDecimal adv,String quoteNo,String installmentPeriod,String noOFIns) {
		EserviceLifeDetails save=new EserviceLifeDetails();
		DozerBeanMapper dozermapper = new DozerBeanMapper ();
		try {
		
			List<EserviceLifeDetails> list=lifeRepo.findByQuoteNo(quoteNo);
			if(list!=null && list.size()>0) {
				
				for(EserviceLifeDetails data:list) {
				save = dozermapper.map(data, EserviceLifeDetails.class);
				save.setEmiYn("Y");
				save.setInstallmentPeriod(Integer.valueOf(installmentPeriod));
				save.setNoOfInstallment(Integer.valueOf(noOFIns));
				save.setEmiPremium(adv);
				lifeRepo.save(save);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return save;
	}
	public synchronized CompanyProductMaster getCompanyProductMasterDropdown(String companyId, String productId) {
		CompanyProductMaster product = new CompanyProductMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			product = list.size() > 0 ? list.get(0) : null;
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return product;
	}


	public List<EmiMaster> getEmiMasterDataByInsPeriod( String companyId, String productId,String policyType,String insPeriod) {
		List<EmiMaster> list = new ArrayList<EmiMaster>();
		
		try {

			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);

			// Find All
			Root<EmiMaster> b = query.from(EmiMaster.class);

			// Select
			query.select( b );

//			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<EmiMaster> ocpm1 = effectiveDate.from(EmiMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal( b.get("emiId"),ocpm1.get("emiId"));
			Predicate a2 = cb.equal( b.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.equal( b.get("productId"),ocpm1.get("productId"));
			Predicate a9 = cb.equal( b.get("policyType"),ocpm1.get("policyType"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);	
			effectiveDate.where(a1, a2, a3, a4,a9);
//			
//			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<EmiMaster> ocpm2 = effectiveDate2.from(EmiMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal( b.get("emiId"),ocpm2.get("emiId"));
			Predicate a6 = cb.equal( b.get("companyId"),ocpm2.get("companyId"));
			Predicate a7 = cb.equal( b.get("productId"),ocpm2.get("productId"));
			Predicate a8 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a10 = cb.equal( b.get("policyType"),ocpm2.get("policyType"));
			effectiveDate2.where(a5, a6, a7, a8,a10);
//			// amendId Max Filter
//			Subquery<Long> amendId = query.subquery(Long.class);
//			Root<EmiMaster> ocpm2 = amendId.from(EmiMaster.class);
//			amendId.select(cb.max(ocpm2.get("amendId")));
//			Predicate a5 = cb.equal( b.get("emiId"),ocpm2.get("emiId"));
//			Predicate a6 = cb.equal( b.get("companyId"),ocpm2.get("companyId"));
//			Predicate a7 = cb.equal( b.get("productId"),ocpm2.get("productId"));
//			Predicate a10 = cb.equal( b.get("policyType"),ocpm2.get("policyType"));
//			amendId.where(a5, a6, a7,a10);
			

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));

			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("companyId"), "99999");
			Predicate n5 = cb.or(n3, n2);
			Predicate n6 = cb.equal(b.get("productId"), productId);
			Predicate n7 = cb.equal(b.get("policyType"),  policyType);
//			Predicate n11 = cb.equal(b.get("policyType"),  "99999");
//			Predicate n12 = cb.or(n7,  n11);
			Predicate n9 = cb.equal(b.get("installmentPeriod"), insPeriod);
			Predicate n10 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n13 = cb.equal(b.get("status"), "Y");
			query.where(n1, n5, n6, n7,n9,n10,n13).orderBy(orderList);

			// Get Result
			TypedQuery<EmiMaster> result = em.createQuery(query);
			
			list = result.getResultList();
			list = list.stream().filter(o -> o.getEmiId() != null)
					.filter(distinctByKey(o -> o.getEmiId() )).collect(Collectors.toList());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	//Update Validation
	@Override
	public List<Error> validateUpdateEmiTransactionDetails(List<EmiTransactionDetailsUpdateReq> reqList) {
		List<Error> errorList = new ArrayList<Error>();

		try {

//			if (StringUtils.isBlank(req.getPremiumWithTax())) {
//				errorList.add(new Error("01", "PremiumWithTax", "Please Enter PremiumWithTax "));
//			} 
			int row=0;
			for(EmiTransactionDetailsUpdateReq req:reqList) {
				row=row+1;
			if (StringUtils.isBlank(req.getInstallmentPeriod())) {
				errorList.add(new Error("02", "InstallmentPeriod", "Please Enter InstallmentPeriod"+row));
			}
			if (StringUtils.isBlank(req.getNoOfInstallment())) {
				errorList.add(new Error("02", "No Of Installment", "Please Enter No Of Installment"+row));
			}
			if (row == 1) {
				if (StringUtils.isNotBlank(req.getQuoteNo()) && StringUtils.isNotBlank(req.getCompanyId())) {
					List<EmiTransactionDetails> list = repo
							.findTop1ByQuoteNoAndCompanyIdAndPaymentStatusOrderByDueDateAsc(req.getQuoteNo(),
									req.getCompanyId(), "Pending");

					if (list != null) {
						if (!list.get(0).getInstalment().equals(req.getNoOfInstallment())) {
							errorList.add(new Error("08", "No Of Installment", "Please Enter Installment" + row));
						}
					}
				}
			}
			if (StringUtils.isBlank(req.getQuoteNo())) {
				errorList.add(new Error("03", "QuoteNo", "Please Enter QuoteNo"+row));
			}
			
//			// Status Validation
//			if (StringUtils.isBlank(req.getStatus())) {
//				errorList.add(new Error("05", "Status", "Please Enter Status"));
//			} else if (req.getStatus().length() > 1) {
//				errorList.add(new Error("05", "Status", "Status 1 Character Only"));
//			} 
			//Payment Staus validation
			else if (!("Paid".equals(req.getPaymentStatus()))) {
				errorList.add(new Error("05", "PaymentStatus", "Please Enter PaymentStatus "+row));
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy"+row));
			} else if (req.getCreatedBy().length() > 100) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters"+row));
			}
			}
	
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}
	
	//Update
	@Override
	public SuccessRes updateEmiTransactionDetails(List<EmiTransactionDetailsUpdateReq> reqList) {
		SuccessRes res = new SuccessRes();
		EmiTransactionDetails saveData = new EmiTransactionDetails();
		List<EmiTransactionDetails> list = new ArrayList<EmiTransactionDetails>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			String productId ="";
			String companyId ="";
			List<EmiTransactionDetails> list1 = repo.findByQuoteNoAndSelectYn(reqList.get(0).getQuoteNo(),"Y");
			if (list1.size() > 0) {
				for(EmiTransactionDetails req:list1) {
					saveData=	dozerMapper.map(req, EmiTransactionDetails.class);
					saveData.setSelectYn("N");
					repo.saveAndFlush(saveData);
				}
			}
			for(EmiTransactionDetailsUpdateReq req:reqList) {
			Date entryDate = null;
			String createdBy = "";
			String quoteNo = req.getQuoteNo();
			
			
			// Update
			productId = req.getProductId();
			companyId =req.getCompanyId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiTransactionDetails> query = cb.createQuery(EmiTransactionDetails.class);
			// Find all
			Root<EmiTransactionDetails> b = query.from(EmiTransactionDetails.class);
			// Select
			query.select(b);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("instalment")));

			// Where
			Predicate n1 = cb.equal(b.get("instalment"), req.getNoOfInstallment());
			Predicate n2 = cb.equal(b.get("productId"), productId);
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("quoteNo"), quoteNo);
			query.where(n1,n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<EmiTransactionDetails> result = em.createQuery(query);
			int limit = 0, offset = 2;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();

			if (list.size() > 0) {
				entryDate = list.get(0).getEntryDate();
				createdBy = list.get(0).getCreatedBy();
				saveData = list.get(0);
				if (list.size() > 1) {
					EmiTransactionDetails lastRecord = list.get(1);
					repo.saveAndFlush(lastRecord);
				}

			}

			res.setResponse("Updated Successfully");
			res.setSuccessId(quoteNo.toString());

			dozerMapper.map(req, saveData);

			saveData.setProductId(productId);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(list.get(0).getStatus());
			saveData.setCompanyId(req.getCompanyId());
			saveData.setEntryDate(entryDate);
			saveData.setPaymentStatus("Pending");
			saveData.setPaymentDate(null);
			saveData.setPaymentDetails(req.getPaymentDetails());
			saveData.setSelectYn(req.getSelectedYn());
			repo.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));

		}
			//Update Home Position Master
			List<EmiTransactionDetails> list2 = repo.findByQuoteNoAndSelectYnOrderByInstalmentDesc(reqList.get(0).getQuoteNo(),"Y");
			
			Double getData = list2.stream()
					.filter(o -> o.getSelectYn().equalsIgnoreCase("Y"))
					.mapToDouble( o ->   o.getDueAmount().doubleValue()).sum();
			BigDecimal adv=new BigDecimal(getData);
			HomePositionMaster homeData = homerepo.findByQuoteNo(list.get(0).getQuoteNo());
			homeData.setInstallmentPeriod(list.get(0).getInstallmentPeriod());
			homeData.setEmiYn("Y");
			homeData.setNoOfInstallment(list2.get(0).getInstalment());
			homeData.setEmiPremium(adv);
			homerepo.save(homeData);
			CompanyProductMaster product = getCompanyProductMasterDropdown(companyId,productId);
			if (product.getMotorYn().equalsIgnoreCase("M")) {
				EserviceMotorDetails motor= saveMotor("Y",adv,list.get(0).getQuoteNo(),list.get(0).getInstallmentPeriod(),list2.get(0).getInstalment());	
			}else if (product.getMotorYn().equalsIgnoreCase("H")&& productId.equalsIgnoreCase(travelProductId)) {
				EserviceTravelDetails travel= saveTravel("Y",adv,list.get(0).getQuoteNo(),list.get(0).getInstallmentPeriod(),list2.get(0).getInstalment());	
			}else if (product.getMotorYn().equalsIgnoreCase("A")) {
				EserviceBuildingDetails motor= saveBuilding("Y",adv,list.get(0).getQuoteNo(),list.get(0).getInstallmentPeriod(),list2.get(0).getInstalment());	
			}else if (product.getMotorYn().equalsIgnoreCase("L")) {
				EserviceLifeDetails motor= saveLife("Y",adv,list.get(0).getQuoteNo(),list.get(0).getInstallmentPeriod(),list2.get(0).getInstalment());	
			}else {
				EserviceCommonDetails motor= saveCommon("Y",adv,list.get(0).getQuoteNo(),list.get(0).getInstallmentPeriod(),list2.get(0).getInstalment());	
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> " + e.getMessage());
			return null;
		}
		return res;
	}
	
	// Get All Emi Transaction Details
	@Override
	public List<EmiTransactionDetailsRes> getEmiDetailsByQuoteNo(EmiTransactionDetailsGetReq req) {
		List<EmiTransactionDetailsRes> resList = new ArrayList<EmiTransactionDetailsRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		DecimalFormat df = new DecimalFormat("0.00");
		try {
			String quoteNo = req.getQuoteNo();
			String productId = req.getProductId();
			List<EmiTransactionDetails> list = new ArrayList<EmiTransactionDetails>();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiTransactionDetails> query = cb.createQuery(EmiTransactionDetails.class);
			// Find all
			Root<EmiTransactionDetails> b = query.from(EmiTransactionDetails.class);
			// Select
			query.select(b);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("instalment")));

			// Where
			Predicate n2 = cb.equal(b.get("productId"), productId);
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("quoteNo"), quoteNo);
			query.where(n2, n3, n4).orderBy(orderList);

			// Get Result
			TypedQuery<EmiTransactionDetails> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().sorted((o1, o2)->Long.valueOf(o1.getInstalment()).compareTo(Long.valueOf(o2.getInstalment()))).collect(Collectors.toList());
			// Map
			List<EmiTransactionDetails> list1 = new ArrayList<EmiTransactionDetails>();
			list1 = repo.findTop1ByQuoteNoAndPaymentStatusOrderByDueDateAsc(quoteNo, "Pending");
			
			for (EmiTransactionDetails data : list) {
				EmiTransactionDetailsRes res = new EmiTransactionDetailsRes();
				res = mapper.map(data, EmiTransactionDetailsRes.class);
				res.setInstallment(data.getInstalment());
				res.setDueAmount((Double.valueOf(Math.round(data.getDueAmount()))).toString());
				res.setBalanceAmount((Double.valueOf(Math.round(data.getBalanceAmount()))).toString());
				res.setPaymentDetails(data.getPaymentDetails());
				PaymentDetail paymentData=paymentdetailrepo.findByPaymentId(data.getPaymentId());
				if(paymentData!=null) {
				res.setMerchantReference(paymentData.getMerchantReference()==null?"":paymentData.getMerchantReference());
				res.setBankName(paymentData.getBankName()==null?"":paymentData.getBankName());
				res.setChequeNo(paymentData.getChequeNo()==null?"":paymentData.getChequeNo());
				res.setChequeDate(paymentData.getChequeDate()==null?null:paymentData.getChequeDate());
				res.setAccountNumber( paymentData.getAccountNumber()==null?"": paymentData.getAccountNumber()  ); 
				res.setIbanNumber(paymentData.getIbanNumber()==null?"": paymentData.getIbanNumber() ); 
				res.setPayments( StringUtils.isBlank(paymentData.getPayments() ) ? "" : paymentData.getPayments()  ); 
				res.setPayeeName(paymentData.getPayeeName()==null?"":paymentData.getPayeeName() );
				res.setMicrNo(paymentData.getMicrNo()==null?"":paymentData.getMicrNo());
				res.setCbcNo(paymentData.getCbcNo()==null?"":paymentData.getCbcNo());
				}
				if (list1 != null && list1.size() > 0) {
					List<EmiTransactionDetails> filter =  list1.stream().filter( o -> o.getInstalment().equals(data.getInstalment())).collect(Collectors.toList());
						if (filter.size()>0) {
							res.setSelectYn("Y");
						} else {
							res.setSelectYn("N");
						}
				}
				resList.add(res);
			}

		}catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return resList;
	}

	//EMI Insatallment Details
	//Validation
	@Override
	public List<Error> validateEmiInstallmentDetails(EmiInstallmentDetailsReq req) {
		List<Error> errorList = new ArrayList<Error>();

		try {

			if (StringUtils.isBlank(req.getPremiumWithTax())) {
				errorList.add(new Error("01", "PremiumWithTax", "Please Enter PremiumWithTax "));
			}else if (!req.getPremiumWithTax().matches("[0-9.]+")) {
				errorList.add(new Error("01", "PremiumWithTax", "Please Enter Valid Number In PremiumStart"));
			}else if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("02", "CompanyId", "Please Enter CompanyId"));
			}else if (StringUtils.isBlank(req.getProductId())) {
				errorList.add(new Error("03", "ProductId", "Please Enter ProductId"));
			}
			if (StringUtils.isBlank(req.getPolicyType())) {
				errorList.add(new Error("04", "PolicyType", "Please Enter PolicyType"));
			}
//			else {
//				List<EmiMaster> policyType =   getEmiMasterData(req.getCompanyId(), req.getProductId(),req.getPolicyType(),req.getPremiumWithTax());
//				if(policyType ==null ) {
//					errorList.add(new Error("05", "PolicyType", "No Data Exist"));
//				} 
//			}
		}catch (Exception e) {
				e.printStackTrace();
				log.info("Log Details" + e.getMessage());
				return null;
			}
		return errorList;
	}

	@Override
	public List<EmiDisplayRes> viewEmiInstallmentDetails(EmiInstallmentDetailsReq req) {
		List<EmiDisplayRes> resList = new ArrayList<EmiDisplayRes>();
		//DecimalFormat df = new DecimalFormat("0.0");
		try {
			Integer i = 0;
			String insDesc = "";
			Double temp = 0d, premiumWithTax, interestPercent, advancePercent, interestAmount, totalLoanAmount,
					advanceAmount, balanceAmount = null, installment = 0d,exchangeDate=0d,curPremium=0d;
			premiumWithTax = Double.valueOf(req.getPremiumWithTax());
			if(!req.getCurrency().equalsIgnoreCase("TZS")) {
				List<ExchangeMaster> exchangeData=exchangeMasterRepo.findByCurrencyIdOrderByAmendIdDesc(req.getCurrency());
				if(exchangeData.size()>0) 
					exchangeDate= exchangeData.get(0).getExchangeRate();
					
					curPremium=exchangeDate*premiumWithTax;
					premiumWithTax=Double.valueOf(Math.round(curPremium));
				
			}
			List<EmiMaster> list = getEmiMasterData(req.getCompanyId(), req.getProductId(), req.getPolicyType(),
					premiumWithTax);
			EmiDisplayRes res=null;
			if (list.size()>0) {
				for (EmiMaster data : list) {
					 res = new EmiDisplayRes();
					Integer noOfMonth = Integer.valueOf(data.getInstallmentPeriod().toString());
					interestPercent = Double.valueOf(data.getInterestPercent().toString());
					advancePercent = Double.valueOf(data.getAdvancePercent().toString());
					// Calculation
					for (i = 0; i <= noOfMonth; i++) {
						// Response
						
						interestAmount = premiumWithTax * interestPercent / 100;
						interestAmount=interestAmount/12;
						interestAmount=interestAmount*noOfMonth;
						totalLoanAmount = premiumWithTax + interestAmount;
						advanceAmount = totalLoanAmount * advancePercent / 100;
						if (i == 0) {
							balanceAmount = totalLoanAmount - advanceAmount;
							installment = balanceAmount / noOfMonth;
							insDesc="Advance Amount";
						} else {
							temp = balanceAmount;
							temp -= installment;
							balanceAmount = temp;
							insDesc="Installment Amount";
						}
						EmiInfoListRes emiInfoListRes = new EmiInfoListRes();
						emiInfoListRes.setPremiumWithTax(Long.valueOf(Math.round(premiumWithTax)).toString());
						emiInfoListRes.setNoOfMonth(noOfMonth.toString());
						emiInfoListRes.setInterestAmount(Long.valueOf(Math.round(interestAmount)).toString());
					//	emiInfoListRes.setAdvanceAmount(df.format(advanceAmount));
						emiInfoListRes.setAdvanceAmount(Long.valueOf(Math.round(advanceAmount)).toString());
						emiInfoListRes.setBalanceAmount(Long.valueOf(Math.round(balanceAmount)).toString());
						emiInfoListRes.setTotalLoanAmount(Long.valueOf(Math.round(totalLoanAmount)).toString());
					//	emiInfoListRes.setInstallment((df.format(installment)));
						emiInfoListRes.setInstallment(Long.valueOf(Math.round(installment)).toString());
						res.setEmiInfoRes(emiInfoListRes);

						EmiCompanyInfoListRes compInfoRes = new EmiCompanyInfoListRes();
						compInfoRes.setPremiumStart(data.getPremiumStart().toString());
						compInfoRes.setPremiumEnd(data.getPremiumEnd().toString());
						compInfoRes.setInterest(interestPercent.toString());
						compInfoRes.setAdvance(advancePercent.toString());
						res.setCompanyEmiInfo(compInfoRes);

						List<EmiDisplayListRes> emiPremiumResList = new ArrayList<EmiDisplayListRes>();
						for (i = 0; i <= noOfMonth; i++) {
							EmiDisplayListRes emiPremiumRes = new EmiDisplayListRes();
							Calendar cal = Calendar.getInstance();
							cal.add(Calendar.MONTH, i);
							Date dueDate = cal.getTime();
							if (i == 0) {
								insDesc="Advance Amount";
								emiPremiumRes.setInstallment(Long.valueOf(Math.round(advanceAmount)).toString());
							} else {
								insDesc="Installment Amount";
								emiPremiumRes.setInstallment(Long.valueOf(Math.round(installment)).toString());
							}
							emiPremiumRes.setNoOfInstallment(i.toString());
							emiPremiumRes.setDueDate(dueDate);
							emiPremiumRes.setInstallmentDesc(insDesc);
							emiPremiumResList.add(emiPremiumRes);

						}
						res.setEmiPremium(emiPremiumResList);
						res.setEmiYn("Y");
						res.setEmiYnDesc("Emi Data");
					}

					resList.add(res);
				}

			}else if(list.size() == 0){
				 res = new EmiDisplayRes();
				res.setEmiYn("N");
				res.setEmiYnDesc("Emi Option is not Available ");
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return resList;
	}
	public List<EmiMaster> getEmiMasterData( String companyId, String productId,String policyType,Double amt) {
		List<EmiMaster> list = new ArrayList<EmiMaster>();
		
		try {

			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);

			// Find All
			Root<EmiMaster> b = query.from(EmiMaster.class);

			// Select
			query.select( b );

//			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<EmiMaster> ocpm1 = effectiveDate.from(EmiMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal( b.get("emiId"),ocpm1.get("emiId"));
			Predicate a2 = cb.equal( b.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.equal( b.get("productId"),ocpm1.get("productId"));
			Predicate a9 = cb.equal( b.get("policyType"),ocpm1.get("policyType"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);	
			effectiveDate.where(a1, a2, a3, a4,a9);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<EmiMaster> ocpm2 = effectiveDate2.from(EmiMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal( b.get("emiId"),ocpm2.get("emiId"));
			Predicate a6 = cb.equal( b.get("companyId"),ocpm2.get("companyId"));
			Predicate a7 = cb.equal( b.get("productId"),ocpm2.get("productId"));
			Predicate a10 = cb.equal( b.get("policyType"),ocpm2.get("policyType"));
			Predicate a8 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6, a7, a8,a10);
//			// AmendI Max Filter
//			
//			Subquery<Long> amendId = query.subquery(Long.class);
//			Root<EmiMaster> ocpm2 = amendId.from(EmiMaster.class);
//			amendId.select(cb.max(ocpm2.get("amendId")));
//			Predicate a5 = cb.equal( b.get("emiId"),ocpm2.get("emiId"));
//			Predicate a6 = cb.equal( b.get("companyId"),ocpm2.get("companyId"));
//			Predicate a7 = cb.equal( b.get("productId"),ocpm2.get("productId"));
//			Predicate a10 = cb.equal( b.get("policyType"),ocpm2.get("policyType"));
//			amendId.where(a5, a6, a7,a10);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));

			// Where
		//	Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("companyId"), "99999");
			Predicate n5 = cb.or(n3, n2);
			Predicate n6 = cb.equal(b.get("productId"), productId);
			Predicate n7 = cb.equal(b.get("policyType"), policyType);
//			Predicate n11 = cb.equal(b.get("policyType"), "99999");
//			Predicate n12 = cb.or(n7, n11);
			Predicate n9 = cb.between(cb.literal(amt).as(Double.class) , b.get("premiumStart").as(Double.class), b.get("premiumEnd").as(Double.class));
			Predicate n10 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n13 = cb.equal(b.get("status"), "Y");
			query.where(n1, n5, n6,n7,n9,n13,n10).orderBy(orderList);

			// Get Result
			TypedQuery<EmiMaster> result = em.createQuery(query);
			
			list = result.getResultList();
			list = list.stream().filter(o -> o.getEmiId() != null)
					.filter(distinctByKey(o -> o.getEmiId() )).collect(Collectors.toList());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
	// Get Next Emi Transaction Details
	@Override
	public List<EmiTransactionDetailsRes> getNextEmiDetails(EmiTransactionDetailsNextReq req) {
		List<EmiTransactionDetailsRes> resList = new ArrayList<EmiTransactionDetailsRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			String quoteNo = req.getQuoteNo();
			List<EmiTransactionDetails> list = new ArrayList<EmiTransactionDetails>();
			list = repo.findTop1ByQuoteNoAndPaymentStatusOrderByDueDateAsc(quoteNo, "Pending");

			// Map
			for (EmiTransactionDetails data : list) {
				EmiTransactionDetailsRes res = new EmiTransactionDetailsRes();
				res = mapper.map(data, EmiTransactionDetailsRes.class);
				res.setInstallment(data.getInstalment());
				res.setDueAmount((Double.valueOf(Math.round(data.getDueAmount()))).toString());
				res.setBalanceAmount((Double.valueOf(Math.round(data.getBalanceAmount()))).toString());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return resList;
	}

	private static <T> java.util.function.Predicate<T> distinctByKey(
			java.util.function.Function<? super T, ?> keyExtractor) {
		Map<Object, Boolean> seen = new ConcurrentHashMap<>();
		return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	@Override
	public SuccessRes getEndorsementEmiDetails(EmiTransactionDetailsSaveReq req) {
		EmiTransactionDetails saveData = new EmiTransactionDetails();
		SuccessRes res = new SuccessRes();
		DecimalFormat df = new DecimalFormat("0.00");
		try {
			if("Y".equalsIgnoreCase(req.getEmiYn()) && StringUtils.isNotBlank(req.getEndtTypeId())) {
				// Finding Old Record
				List<EmiTransactionDetails> list = repo.findByQuoteNoAndCompanyIdAndProductId(req.getQuoteNo(),
						req.getCompanyId(), req.getProductId());
				if (list.size() > 0 && StringUtils.isNotBlank(req.getQuoteNo())) {
					if(StringUtils.isNotBlank(list.get(0).getEndtTypeId()) && (!list.get(0).getEndtTypeId().equals(req.getEndtTypeId())) ) {
						repo.deleteAll(list);
					}else {
						repo.deleteAll(list);
					}
				}
				
				
				//Prevous Policy No
				HomePositionMaster homedata=homerepo.findByPolicyNo(req.getEndtPrevPolicyNo());
				
				//Endt Policy No
				HomePositionMaster endthomedata=homerepo.findByQuoteNo(req.getQuoteNo());
				
				//Emi 
				List<EmiTransactionDetails> emiList=repo.findByQuoteNoAndCompanyIdAndProductId(homedata.getQuoteNo(), req.getCompanyId(), req.getProductId());
				Long pendingMonth =  emiList.stream().filter(e -> e.getPaymentStatus().equalsIgnoreCase("Pending")).mapToLong(i->Long.valueOf(i.getInstalment())).count();
				Double pendingAmt = emiList.stream().filter(e -> e.getPaymentStatus().equalsIgnoreCase("Pending")).mapToDouble(i->i.getDueAmount().doubleValue()).sum();
				Double paidAmt = emiList.stream().filter(e -> e.getPaymentStatus().equalsIgnoreCase("Paid")).mapToDouble(i->i.getDueAmount().doubleValue()).sum();
//				Double diffAmt =Math.abs(paidAmt- Double.valueOf(endthomedata.getOverallPremiumLc().toString()));
				Double diffAmt =Double.valueOf( endthomedata.getEndtPremiumLc().toString());
				List<EmiTransactionDetails> emiList2= repo.findTop1ByQuoteNoAndPaymentStatusOrderByDueDateAsc(homedata.getQuoteNo(), "Pending");
				Integer pendingIns=Integer.valueOf(emiList2.get(0).getInstalment());
				Double premium= null;
				
				if(diffAmt>0) {
					premium=Math.abs(pendingAmt+diffAmt);
				}else if(diffAmt<0) {
					premium=Math.abs(pendingAmt-diffAmt);
				}
				
				String quoteNo = req.getQuoteNo();
				String insDesc = "";
				Date entryDate = new Date();
				String createdBy = req.getCreatedBy();
				Integer i = 0;
				Double temp = 0d, premiumWithTax, interestPercent, interestAmount, totalLoanAmount,
						 balanceAmount = null, installment = 0d;

				Integer noOfMonth = Integer.valueOf(homedata.getInstallmentPeriod().toString());

				
				
		
				//Getting Record from Emi Master
				List<EmiMaster> emiMasterData = getEmiMasterDataByInsPeriod(req.getCompanyId(), req.getProductId(),
						req.getPolicyType(),	homedata.getInstallmentPeriod());
				interestPercent = Double.valueOf(emiMasterData.get(0).getInterestPercent().toString());

				// Calculation
				for (i = pendingIns; i <= pendingMonth; i++) {
					Calendar cal = Calendar.getInstance();
					cal.add(Calendar.MONTH, i);
					Date dueDate = cal.getTime();

					premiumWithTax = Double.valueOf(premium);
					interestAmount = premiumWithTax * interestPercent / 100;
					interestAmount=interestAmount/12;
					interestAmount=interestAmount*noOfMonth;
					totalLoanAmount = premiumWithTax + interestAmount;
					
			
					installment = totalLoanAmount / pendingMonth;
					balanceAmount=totalLoanAmount-installment;
					temp = balanceAmount;
					temp -= installment;
					balanceAmount = temp;
					// Save
					saveData.setPremiumWithTax(premiumWithTax);
					saveData.setInstallmentPeriod(noOfMonth.toString());
					saveData.setInterest(interestPercent);
					saveData.setInterestAmount((Double.valueOf(Math.round(interestAmount))));
					saveData.setDueAmount((Double.valueOf(Math.round(installment))));
					insDesc="Installment Amount";
					saveData.setStatus("Y");
					saveData.setPaymentDetails(null);
					saveData.setPaymentDate(null);
					saveData.setPaymentStatus("Pending");
					saveData.setQuoteNo(quoteNo);
					saveData.setProductId(req.getProductId());
					saveData.setCompanyId(req.getCompanyId());
					saveData.setBalanceAmount(Double.valueOf(Math.round(balanceAmount)));
					saveData.setTotalLoanAmount(Double.valueOf(Math.round(totalLoanAmount)));
					saveData.setInstallmentDesc(insDesc);
					saveData.setInstalment(i.toString());
					saveData.setEntryDate(entryDate);
					saveData.setCreatedBy(req.getCreatedBy());
					saveData.setUpdatedDate(new Date());
					saveData.setUpdatedBy(createdBy);
					saveData.setDueDate(dueDate);
					
					// Endorsement Changes
					if(!(req.getEndtTypeId()==null || req.getEndtTypeId().equalsIgnoreCase("0")))
					 {
						 saveData.setOriginalPolicyNo(req.getOriginalPolicyNo());
						 saveData.setEndtDate(req.getEndtDate());
						 saveData.setEndorsementRemarks(req.getEndorsementRemarks());
						 saveData.setEndorsementEffdate(req.getEndorsementEffdate());
						 saveData.setEndtPrevPolicyNo(req.getEndtPrevPolicyNo());
						 saveData.setEndtPrevQuoteNo(req.getEndtPrevQuoteNo());
						 saveData.setEndtCount(req.getEndtCount());
						 saveData.setEndtStatus(req.getEndtStatus());
						 saveData.setIsFinacialEndt(req.getIsFinacialEndt());
						 saveData.setEndtCategDesc(req.getEndtCategDesc());
						 saveData.setEndtTypeId(req.getEndtTypeId());
						 saveData.setEndtTypeDesc(req.getEndtTypeDesc()); 
						 saveData.setEndtPremium(new BigDecimal(req.getEndtPremium()));
						 saveData.setEndtPremiumLc(new BigDecimal(req.getEndtPremium())); 
					 }
					repo.saveAndFlush(saveData);
				}
				res.setSuccessId(quoteNo);
				res.setResponse("Saved Successful");
				
			}
					
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}

		return res;
	}

	
	
}
