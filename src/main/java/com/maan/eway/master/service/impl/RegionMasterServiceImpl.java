/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.RegionMaster;
import com.maan.eway.master.req.RegionChangeStatusReq;
import com.maan.eway.master.req.RegionMasterDropDownReq;
import com.maan.eway.master.req.RegionMasterGetAllReq;
import com.maan.eway.master.req.RegionMasterGetReq;
import com.maan.eway.master.req.RegionMasterSaveReq;
import com.maan.eway.master.res.RegionMasterRes;
import com.maan.eway.master.service.RegionMasterService;
import com.maan.eway.repository.RegionMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>RegionMasterServiceimpl</h2>
*/
@Service
@Transactional
public class RegionMasterServiceImpl implements RegionMasterService {

@PersistenceContext
private EntityManager em;

@Autowired
private RegionMasterRepository repo;

@Autowired
private BasicValidationService basicvalidateService;

Gson json = new Gson();

private Logger log=LogManager.getLogger(RegionMasterServiceImpl.class);

	//************************************************INSERT/UPDATE REGION DETAILS******************************************************\\
	@Transactional
	@Override
	public SuccessRes insertRegion(RegionMasterSaveReq req) {
	    SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		RegionMaster saveData = new RegionMaster();
		List<RegionMaster> list = new ArrayList<RegionMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
		
			String regionCode="";
			
			if (StringUtils.isBlank(req.getRegionCode())) {
					// Save
					regionCode = req.getRegionShortCode() ;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					saveData.setRegionCode(regionCode.toString());
					saveData.setRegionShortCode(req.getRegionShortCode());
					res.setResponse("Saved Successfully ");
					res.setSuccessId(regionCode);
	
				} else {
					// Update
					regionCode = req.getRegionCode() ;
					// Get Less than Equal Today Record 
					// Criteria
					CriteriaBuilder cb = em.getCriteriaBuilder();
					CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
	
					// Find All
					Root<RegionMaster> b = query.from(RegionMaster.class);
	
					// Select
					query.select(b);
	
					// Order By
					List<Order> orderList = new ArrayList<Order>();
					orderList.add(cb.desc(b.get("effectiveDateStart")));
					// Where
					Predicate n1 = cb.equal(b.get("status"), "Y");
					//Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
					Predicate n3 =  cb.equal(b.get("regionCode"), req.getRegionCode() );
					Predicate n4 =  cb.equal(b.get("countryId"), req.getCountryId() );
	
					query.where(n1, n3,n4).orderBy(orderList);
	
					// Get Result
					TypedQuery<RegionMaster> result = em.createQuery(query);
					list = result.getResultList();
					
					if(list.size()>0) {
						Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
					
						if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
							amendId = list.get(0).getAmendId() + 1 ;
							entryDate = new Date() ;
							createdBy = req.getCreatedBy();
								RegionMaster lastRecord = list.get(0);
								lastRecord.setEffectiveDateEnd(oldEndDate);
								repo.saveAndFlush(lastRecord);
							
						} else {
							amendId = list.get(0).getAmendId() ;
							entryDate = list.get(0).getEntryDate() ;
							createdBy = list.get(0).getCreatedBy();
							saveData = list.get(0) ;
							if (list.size()>1 ) {
								RegionMaster lastRecord = list.get(1);
								lastRecord.setEffectiveDateEnd(oldEndDate);
								repo.saveAndFlush(lastRecord);
							}
						
					    }
					}
					res.setResponse("Updated Successfully ");
					res.setSuccessId(req.getRegionCode());
				}
				dozerMapper.map(req , saveData);
				saveData.setRegionCode(regionCode);
				saveData.setEffectiveDateStart(startDate);
				saveData.setEffectiveDateEnd(endDate);
				saveData.setCreatedBy(createdBy);
				saveData.setStatus(req.getStatus());
				saveData.setEntryDate(entryDate);
				saveData.setUpdatedDate(new Date());
				saveData.setUpdatedBy(req.getCreatedBy());
				saveData.setAmendId(amendId);
				repo.saveAndFlush(saveData);
				
//				if(list.size() > 0 ) {
//					// Update Old Record
//					RegionMaster lastRecord = list.get(0) ;
//					lastRecord.setEffectiveDateEnd(oldEndDate);
//					String startDatewithoutTime = sdformat.format(startDate);
//					String oldDatewithoutTime = sdformat.format(list.get(0).getEffectiveDateStart());
//
//					if (startDatewithoutTime.equalsIgnoreCase(oldDatewithoutTime)) {
//						lastRecord.setStatus("N");	
//					}
//					repo.saveAndFlush(lastRecord);
//				}
				
				log.info("Saved Details is ---> " + json.toJson(saveData));
				
	} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	
	@Override
	public List<String> validateRegionDetails(RegionMasterSaveReq req) {
	
		List<String> errorList = new ArrayList<String>();
	
		try {
		
			// Region Name
			if (StringUtils.isBlank(req.getRegionName())) {
//				errorList.add(new Error("01", "RegionName", "Please Select Region Name"));
				errorList.add("2140");
			}else if (req.getRegionName().length() > 100){
//				errorList.add(new Error("01","Region Name", "Please Enter Region Name within 100 Characters")); 
				errorList.add("2141");
			} else if (StringUtils.isBlank(req.getCountryId()) ) {
//				errorList.add(new Error("06", "Country Id", "Please Select Country Id  "));
				errorList.add("2147");
				
			} /*else if (StringUtils.isBlank(req.getRegionCode())) {
				List<RegionMaster> RegionList = getRegionNameExistDetails(req.getRegionName() , req.getCountryId());
				if (RegionList.size()>0 ) {
					errorList.add(new Error("01", "RegionName", "This Region Name Already Exist "));
				}
			}else  {
				List<RegionMaster> RegionList =  getRegionNameExistDetails(req.getRegionName() ,  req.getCountryId() );
				if (RegionList.size()>0 &&  (! req.getRegionCode().equalsIgnoreCase(RegionList.get(0).getRegionCode())) ) {
					errorList.add(new Error("01", "RegionName", "This Region Name Already Exist "));
				}
				
			}*/
			
			// Region Short Code
			if (StringUtils.isBlank(req.getRegionShortCode())) {
//				errorList.add(new Error("01", "RegionShortCode", "Please Select Region ShortCode"));
				errorList.add("2142");
			}else if (req.getRegionShortCode().length() > 20){
//				errorList.add(new Error("01","RegionShortCode", "Please Enter Region ShortCode within 20 Characters")); 
				errorList.add("2143");
			} else if (! req.getRegionShortCode().matches("[0-9]+") ){
//				errorList.add(new Error("01","RegionShortCode", "Please Enter Region ShortCode within 20 Characters")); 
				errorList.add("2149");
			} else if (StringUtils.isBlank(req.getRegionCode()) && StringUtils.isNotBlank(req.getCountryId())) {
				List<RegionMaster> RegionList = getRegionShortCodeExistDetails(req.getRegionShortCode() , req.getCountryId());
				if (RegionList.size()>0 ) {
//					errorList.add(new Error("01", "RegionShortCode", "This Region Short Code Already Exist "));
					errorList.add("2144");
				}
			}else if(StringUtils.isNotBlank(req.getCountryId()) )  {
				List<RegionMaster> RegionList =  getRegionShortCodeExistDetails(req.getRegionShortCode() ,  req.getCountryId() );
				if (RegionList.size()>0 &&  (! req.getRegionCode().equalsIgnoreCase(RegionList.get(0).getRegionCode())) ) {
//					errorList.add(new Error("01", "RegionShortCode", "This Region Short Code Already Exist "));
					errorList.add("2144");
				}
				
			}
	
			if (StringUtils.isNotBlank(req.getRegionCode()) && req.getRegionCode().length() > 20){
//				errorList.add(new Error("03","RegionCode", "Please Enter Region Code  within 100 Characters")); 
				errorList.add("2146");
			}
			
			if (StringUtils.isBlank(req.getRemarks())) {
//				errorList.add(new Error("08", "Remarks", "Please Enter Remarks"));
				errorList.add("2032");
			}else if (req.getRemarks().length() > 100) {
//				errorList.add(new Error("11", "Remarks", "Please Enter Remarks within 100 Characters"));
				errorList.add("2033");
			}

			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ) {
//				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("2034");
	
			} else if (req.getEffectiveDateStart().before(today)) {
//				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("2035");
			} 
			
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
//				errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("2036");
			} else if (req.getStatus().length() > 1) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("2037");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("2038");
			}
			
			
			
			if (StringUtils.isBlank(req.getCreatedBy())) {
//				errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("2039");
			}else if (req.getCreatedBy().length() > 50) {
//				errorList.add(new Error("11", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("2040");
			}
			
		
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
//				errorList.add(new Error("12", "RegulatoryCode", "Please Enter RegulatoryCode"));
				errorList.add("2041");
			}else if (req.getRegulatoryCode().length() > 20) {
//				errorList.add(new Error("12", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
				errorList.add("2042");
			}
			
			if (StringUtils.isBlank(req.getCoreAppCode())) {
//				errorList.add(new Error("12", "CoreAppCode", "Please Enter CoreAppCode"));
				errorList.add("2124");
			}else if (req.getCoreAppCode().length() > 20) {
//				errorList.add(new Error("12", "CoreAppCode", "Please Enter CoreAppCode within 20 Characters"));
				errorList.add("2125");
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	public List<RegionMaster> getRegionNameExistDetails(String regionName , String countryId ) {
		List<RegionMaster> list = new ArrayList<RegionMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
	
			// Find All
			Root<RegionMaster> b = query.from(RegionMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<RegionMaster> ocpm1 = effectiveDate.from(RegionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("regionCode"), b.get("regionCode"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			effectiveDate.where(a1,a2);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("countryId"), countryId);
			Predicate n3 = cb.equal(b.get("regionName"), regionName );	
			query.where(n1,n2,n3);
			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	public List<RegionMaster> getRegionShortCodeExistDetails(String regionShortCode , String countryId ) {
		List<RegionMaster> list = new ArrayList<RegionMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
	
			// Find All
			Root<RegionMaster> b = query.from(RegionMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<RegionMaster> ocpm1 = effectiveDate.from(RegionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("regionCode"), b.get("regionCode"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			effectiveDate.where(a1,a2);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("countryId"), countryId);
			Predicate n3 = cb.equal(b.get("regionShortCode"), regionShortCode );	
			query.where(n1,n2,n3);
			
			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	
	
	///*********************************************************************GET ALL******************************************************\\
	@Override
	public List<RegionMasterRes> getallRegionDetails(RegionMasterGetAllReq req) {
		List<RegionMasterRes> resList = new ArrayList<RegionMasterRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			List<RegionMaster> list = new ArrayList<RegionMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
	
			// Find All
			Root<RegionMaster> b = query.from(RegionMaster.class);
	
			// Select
			query.select(b);
	
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<RegionMaster> ocpm1 = amendId.from(RegionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("regionCode"), b.get("regionCode"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			amendId.where(a1,a2,a3);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("regionName")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("countryId"),req.getCountryId());
	
			query.where(n1,n2).orderBy(orderList);
	
			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRegionCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(RegionMaster :: getRegionName ));
			
			// Map
			for (RegionMaster data : list) {
				RegionMasterRes res = new RegionMasterRes();
	
				res = dozerMapper.map(data, RegionMasterRes.class);
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	
	///*********************************************************************GET BY ID******************************************************\\
	@Override
	public RegionMasterRes getByRegionCode(RegionMasterGetReq req) {
		RegionMasterRes res = new RegionMasterRes();
		ModelMapper mapper = new ModelMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
			List<RegionMaster> list = new ArrayList<RegionMaster>();
			
			// Find All
			Root<RegionMaster>    c = query.from(RegionMaster.class);		
			
			// Select
			query.select(c );
			
			// AmendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<RegionMaster> ocpm1 = amendId.from(RegionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("regionCode"),ocpm1.get("regionCode") );
			jakarta.persistence.criteria.Predicate a2 = cb.equal(c.get("countryId"),ocpm1.get("countryId") );
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			amendId.where(a1,a2,a3);
			
			
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("effectiveDateStart")));
			
		    // Where	
		
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);		
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("regionCode"),req.getRegionCode()) ;
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("countryId"),req.getCountryId()) ;
	
	
			query.where(n1 ,n2,n3).orderBy(orderList);
			
			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRegionCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(RegionMaster :: getRegionName ));
			
			res = mapper.map(list.get(0) , RegionMasterRes.class);
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<DropDownRes> getRegionMasterDropdown(RegionMasterDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
			List<RegionMaster> list = new ArrayList<RegionMaster>();

			// Find All
			Root<RegionMaster> c = query.from(RegionMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("regionName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<RegionMaster> ocpm1 = effectiveDate.from(RegionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("regionCode"), ocpm1.get("regionCode"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));

			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<RegionMaster> ocpm2 = effectiveDate2.from(RegionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("regionCode"), ocpm2.get("regionCode"));
			jakarta.persistence.criteria.Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			jakarta.persistence.criteria.Predicate a6 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("countryId"), req.getCountryId());
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);

			query.where(n12, n2, n3, n4).orderBy(orderList);

			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);
			list = result.getResultList();

			for (RegionMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getRegionCode().toString());
				res.setCodeDesc(data.getRegionName());
				res.setCodeDescLocal(data.getRegionNameLocal());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	//************************************************GET ACTIVE REGION******************************************\\
	@Override
	public List<RegionMasterRes> getActiveRegionDetails(RegionMasterGetAllReq req) {
		List<RegionMasterRes> resList = new ArrayList<RegionMasterRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			List<RegionMaster> list = new ArrayList<RegionMaster>();
			
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
	
			// Find All
			Root<RegionMaster> b = query.from(RegionMaster.class);
	
			// Select
			query.select(b);
	
			// AmendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<RegionMaster> ocpm1 = amendId.from(RegionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("regionCode"), b.get("regionCode"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"),b.get("countryId") );
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			amendId.where(a1,a2,a3);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("regionName")));
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("status"), "Y");
			Predicate n3 = cb.equal(b.get("countryId"),req.getCountryId() );
	
			query.where(n1,n2,n3).orderBy(orderList);
	
			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRegionCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(RegionMaster :: getRegionName ));
			list = result.getResultList();
	
			// Map
			for (RegionMaster data : list) {
				RegionMasterRes res = new RegionMasterRes();
	
				res = dozerMapper.map(data, RegionMasterRes.class);
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}

	@Override
	public SuccessRes changeStatusOfRegion(RegionChangeStatusReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		RegionMaster saveData = new RegionMaster();
		List<RegionMaster> list = new ArrayList<RegionMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Integer amendId = 0;
			Date startDate = req.getEffectiveDateStart();
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null;
			String createdBy = "";

			String regionCode = "";

			// Update
			regionCode = req.getRegionCode();
			// Get Less than Equal Today Record
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);

			// Find All
			Root<RegionMaster> b = query.from(RegionMaster.class);

			// Select
			query.select(b);
			//Orderby
			Subquery<Long> amendId2 = query.subquery(Long.class);
			Root<RegionMaster> ocpm1 = amendId2.from(RegionMaster.class);
			amendId2.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("regionCode"), b.get("regionCode"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			amendId2.where(a1, a2);
			//Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("effectiveDateStart")));
			//Where
			Predicate n1 =  cb.equal(b.get("regionCode"), req.getRegionCode() );
			Predicate n2 =  cb.equal(b.get("countryId"), req.getCountryId() );
			Predicate n3 = cb.equal(b.get("amendId"),amendId2);
			
			query.where(n1,n2,n3).orderBy(orderList);

			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);
			list = result.getResultList();

			if (list.size() > 0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);

				if (list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
					amendId = list.get(0).getAmendId() + 1;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					RegionMaster lastRecord = list.get(0);
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repo.saveAndFlush(lastRecord);

				} else {
					amendId = list.get(0).getAmendId();
					entryDate = list.get(0).getEntryDate();
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0);
					if (list.size() > 1) {
						RegionMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}

				}
			}
			res.setResponse("Updated Successfully ");
			res.setSuccessId(req.getRegionCode());

			dozerMapper.map(list.get(0), saveData);
			saveData.setRegionCode(regionCode);
			saveData.setRegionShortCode(list.get(0).getRegionShortCode());
			saveData.setRegionName(list.get(0).getRegionName());
			saveData.setTiraCode(list.get(0).getTiraCode());
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setRegulatoryCode(list.get(0).getRegionShortCode());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setCountryId(req.getCountryId());
			repo.saveAndFlush(saveData);

			res.setResponse("Status Changed");
			res.setSuccessId(req.getRegionCode());
		} catch (

		Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

}
