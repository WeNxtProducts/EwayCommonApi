/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.BrokerCommissionDetails;
import com.maan.eway.bean.CountryMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.master.req.CountryChangeStatusReq;
import com.maan.eway.master.req.CountryGetAllReq;
import com.maan.eway.master.req.CountryMasterGetReq;
import com.maan.eway.master.req.CountryMasterSaveReq;
import com.maan.eway.master.req.CountryPlansReq;
import com.maan.eway.master.req.LovDropDownReq;
import com.maan.eway.master.res.CountryMasterRes;
import com.maan.eway.master.service.CountryMasterService;
import com.maan.eway.repository.CountryMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>CountryMasterServiceimpl</h2>
 */
@Service
@Transactional
public class CountryMasterServiceImpl implements CountryMasterService {

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private CountryMasterRepository repo;

	@Autowired
	private BasicValidationService basicvalidateService;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(CountryMasterServiceImpl.class);

//************************************************INSERT/UPDATE COUNTRY DETAILS******************************************************\\
	@Transactional
	@Override
	public SuccessRes insertCountry(CountryMasterSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		CountryMaster saveData = new CountryMaster();
		List<CountryMaster> list = new ArrayList<CountryMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			Integer amendId = 0 ;
			String branchCode = "";
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			
			String countryId = "";

			if (StringUtils.isBlank(req.getCountryId())) {
				// Save
				countryId = req.getCountryShortCode() ;
				res.setResponse("Saved Successfully ");
				res.setSuccessId(countryId);

			} else {
				// Update
				// Get Less than Equal Today Record
				// Criteria
				countryId = req.getCountryId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);

				// Find All
				Root<CountryMaster> b = query.from(CountryMaster.class);

				// Select
				query.select(b);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
			    orderList.add(cb.desc(b.get("amendId")));
				// Where
				//Predicate n1 = cb.equal(b.get("status"), "Y");
				Predicate n3 = cb.equal(b.get("countryId"), req.getCountryId());
				Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId() );
				query.where(n2,n3).orderBy(orderList);
				

				// Get Result
				TypedQuery<CountryMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				
				list = result.getResultList();

				if (list.size() > 0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
					
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						CountryMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							CountryMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully ");
				res.setSuccessId(countryId);
			}

			dozerMapper.map(req, saveData);
			saveData.setCountryId(countryId);
			saveData.setCountryName(req.getCountryName());
			saveData.setEffectiveDateStart(req.getEffectiveDateStart());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			saveData.setTiraCode(req.getRegulatoryCode());
			saveData.setCoreAppCode(req.getCoreAppCode());
			saveData.setNationality(req.getNationality());
			saveData.setCountryNameLocal(req.getCodeDescLocal());
			repo.saveAndFlush(saveData);

			log.info("Saved Details is ---> " + json.toJson(saveData));

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<String> validateCountryDetails(CountryMasterSaveReq req) {

		List<String> errorList = new ArrayList<String>();

		try {
			String companyId=req.getCompanyId() ; 
			// Coutnry Name
			if (StringUtils.isBlank(req.getCountryName())) {
				//errorList.add(new Error("01", "CountryName", "Please Select Country Name"));
				errorList.add("1272");
			}else if (req.getCountryName().length() > 100){
				//errorList.add(new Error("01","CountryName", "Please Enter Country Name within 100 Characters")); 
				errorList.add("1273");
			}else if (StringUtils.isBlank(req.getCountryId()) && StringUtils.isNotBlank(req.getCompanyId())) {
				
				List<CountryMaster> CountryList = getCountryNameExistDetails(req.getCountryName(),companyId);
				if (CountryList.size()>0 ) {
				//	errorList.add(new Error("01", "CountryName", "This Country Name Already Exist "));
					errorList.add("1274");
				}
			}else {
				
				List<CountryMaster> CountryList =  getCountryNameExistDetails(req.getCountryName() ,companyId);
				if (CountryList.size()>0 &&  (! req.getCountryId().equalsIgnoreCase(CountryList.get(0).getCountryId().toString())) ) {
					//errorList.add(new Error("01", "CountryName", "This Country Name Already Exist "));
					errorList.add("1274");
				}
				
			}
			
		
			
			// Country Short Code
			if (StringUtils.isBlank(req.getCountryShortCode())) {
				//errorList.add(new Error("01", "CountryShortCode", "Please Select CountryShortCode"));
				errorList.add("1275");
			}else if (req.getCountryShortCode().length() > 20){
				//errorList.add(new Error("01","CountryShortCode", "Please Enter CountryShortCode within 20 Characters")); 
				errorList.add("1276");
			}else if (StringUtils.isBlank(req.getCountryId())) {
				List<CountryMaster> CountryList = getCountryShortCodeExistDetails(req.getCountryShortCode(),companyId);
				if (CountryList.size()>0 ) {
					//errorList.add(new Error("01", "CountryShortCode", "This CountryShortCode Already Exist "));
					errorList.add("1277");
				}
			}else  {
				List<CountryMaster> CountryList =  getCountryShortCodeExistDetails(req.getCountryShortCode(),companyId );
				if (CountryList.size()>0 &&  (! req.getCountryId().equalsIgnoreCase(CountryList.get(0).getCountryId().toString())) ) {
					//errorList.add(new Error("01", "CountryShortCode", "This CountryShortCode Already Exist "));
					errorList.add("1277");
				}
				
			}

			if (StringUtils.isBlank(req.getMobileCode()) || req.getMobileCode() == null) {
				//errorList.add(new Error("03", "MobileCode", "Please Select Mobile Code "));
				errorList.add("1278");
			} else if (req.getMobileCode().length() > 5) {
				//errorList.add(new Error("03", "MobileCode", "Please Enter Mobile Code within 5 Characters"));
				errorList.add("1279");
			}

			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ) {
				//errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("2034");
	
			} else if (req.getEffectiveDateStart().before(today)) {
				//errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("2035");
			}		
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
				//errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("2036");
			} else if (req.getStatus().length() > 1) {
				//errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("2037");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
				//errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("2038");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
				//errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("2039");
			}else if (req.getCreatedBy().length() > 20) {
				//errorList.add(new Error("11", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("2040");
			}
			
			if (StringUtils.isBlank(req.getCompanyId())) {
				//errorList.add(new Error("08", "InsuranceId", "Please Select InsuranceId"));
				errorList.add("2101");
			}
			
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
				//errorList.add(new Error("12", "RegulatoryCode", "Please Enter RegulatoryCode"));
				errorList.add("2041");
			}else if (req.getRegulatoryCode().length() > 20) {
				//errorList.add(new Error("12", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
				errorList.add("2042");
			}
			
			if (StringUtils.isBlank(req.getRemarks())) {
			//	errorList.add(new Error("08", "Remarks", "Please Enter Remarks"));
				errorList.add("2032");
			}else if (req.getRemarks().length() > 100) {
				//errorList.add(new Error("11", "Remarks", "Please Enter Remarks within 100 Characters"));
				errorList.add("2033");
			}
			
			if (StringUtils.isBlank(req.getNationality())) {
				//errorList.add(new Error("01", "Nationality", "Please Enter Nationality"));
				errorList.add("1280");
			}else if (req.getNationality().length() > 100){
				//errorList.add(new Error("01","Nationality", "Please Enter Nationality within 100 Characters")); 
				errorList.add("1281");
			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	public List<CountryMaster> getCountryNameExistDetails(String countryName , String companyId ) {
		List<CountryMaster> list = new ArrayList<CountryMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
	
			// Find All
			Root<CountryMaster> b = query.from(CountryMaster.class);
	
			// Select
			query.select(b);
	
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = amendId.from(CountryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1,a2);
	
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("countryName"), countryName );
			Predicate n3 = cb.equal(b.get("companyId"), companyId );
			query.where(n1,n2,n3);
			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	
	public List<CountryMaster> getCountryShortCodeExistDetails(String countryShortCode , String companyId) {
		List<CountryMaster> list = new ArrayList<CountryMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
	
			// Find All
			Root<CountryMaster> b = query.from(CountryMaster.class);
	
			// Select
			query.select(b);
	
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = amendId.from(CountryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1,a2);
	
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("countryShortCode"), countryShortCode );	
			Predicate n3 = cb.equal(b.get("companyId"), companyId );
			query.where(n1,n2,n3);
			
			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	

///*********************************************************************GET ALL******************************************************\\
	@Override
	public List<CountryMasterRes> getallCountryDetails(CountryGetAllReq req) {
		List<CountryMasterRes> resList = new ArrayList<CountryMasterRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			
			List<CountryMaster> list = new ArrayList<CountryMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);

			// Find All
			Root<CountryMaster> b = query.from(CountryMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = amendId.from(CountryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1,a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("countryName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId() );
			query.where(n1,n2).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCountryId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CountryMaster :: getCountryName ));
			
			// Map
			for (CountryMaster data : list) {
				CountryMasterRes res = new CountryMasterRes();

				res = dozerMapper.map(data, CountryMasterRes.class);
				res.setCountryId(data.getCountryId().toString());
				res.setNationality(data.getNationality()==null?"":data.getNationality());
				res.setCodeDescLocal(data.getCountryNameLocal());	
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
///*********************************************************************GET BY ID******************************************************\\
	@Override
	public CountryMasterRes getByCountryId(CountryMasterGetReq req) {
		CountryMasterRes res = new CountryMasterRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
			List<CountryMaster> list = new ArrayList<CountryMaster>();

			// Find All
			Root<CountryMaster> c = query.from(CountryMaster.class);

			// Select
			query.select(c);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = amendId.from(CountryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), c.get("companyId"));
			amendId.where(a1,a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("amendId")));

			// Where

			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("countryId"), req.getCountryId());
			Predicate n3 = cb.equal(c.get("companyId"), req.getCompanyId() );
			query.where(n1, n2,n3).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCountryId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CountryMaster :: getCountryName ));
			res = dozerMapper.map(list.get(0), CountryMasterRes.class);
			res.setCountryId(list.get(0).getCountryId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setNationality(list.get(0).getNationality()==null?"":list.get(0).getNationality());
			res.setCodeDescLocal(list.get(0).getCountryNameLocal());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
/*
//**********************************************************DROPDOWN********************************************************************\\
	@Override
	public List<DropDownRes> getCountryMasterDropdown() {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
			List<CountryMaster> list = new ArrayList<CountryMaster>();

			// Find All
			Root<CountryMaster> c = query.from(CountryMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("countryName")));

			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = effectiveDate.from(CountryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2);
			
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CountryMaster> ocpm2 = effectiveDate2.from(CountryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);

			// Where
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			
			query.where(n1, n2,n3).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();

			for (CountryMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getCountryId().toString());
				res.setCodeDesc(data.getCountryName());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}
*/
//************************************************GET ACTIVE COUNTRY******************************************\\
	@Override
	public List<CountryMasterRes> getActiveCountryDetails(CountryGetAllReq req) {
		List<CountryMasterRes> resList = new ArrayList<CountryMasterRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			
			List<CountryMaster> list = new ArrayList<CountryMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);

			// Find All
			Root<CountryMaster> b = query.from(CountryMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = amendId.from(CountryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1,a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("countryName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("status"), "Y");
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId() );
			query.where(n1,n2,n3).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCountryId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CountryMaster :: getCountryName ));
			
			// Map
			for (CountryMaster data : list) {
				CountryMasterRes res = new CountryMasterRes();

				res = dozerMapper.map(data, CountryMasterRes.class);
				res.setCountryId(data.getCountryId().toString());
				res.setNationality(data.getNationality()==null?"":data.getNationality());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public SuccessRes changeStatusOfCountry(CountryChangeStatusReq req) {
		DozerBeanMapper mapper = new DozerBeanMapper();

		SuccessRes res = new SuccessRes();
		try {
			CountryMaster updateRecord  = new CountryMaster();
			
			List<CountryMaster> list = new ArrayList<CountryMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
	
			// Find All
			Root<CountryMaster> b = query.from(CountryMaster.class);
	
			// Select
			query.select(b);
	
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = amendId.from(CountryMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			//Predicate a3 = cb.equal(b.get("companyId"), "99999");
			//Predicate a4 = cb.or(a2,a3);

			amendId.where(a1,a2);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("countryId")));
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("countryId"), req.getCountryId() );
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId() );
			Predicate n4 = cb.equal(b.get("companyId"), "99999");
			Predicate n5 = cb.or(n3,n4);

			query.where(n1,n2,n5).orderBy(orderList);
	
			// Get Result
						TypedQuery<CountryMaster> result = em.createQuery(query);
						list = result.getResultList();
						updateRecord = list.get(0);

						if(  req.getCountryId().equalsIgnoreCase(updateRecord.getCountryId())) {
							updateRecord.setStatus(req.getStatus());
							repo.save(updateRecord);
						} else {
							CountryMaster saveNew = new CountryMaster();
							mapper.map(updateRecord,saveNew);
							saveNew.setCountryId(req.getCountryId());
							saveNew.setStatus(req.getStatus());
							repo.save(saveNew);
						}
			// perform update
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getCountryId());
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
	@Override
	public List<DropDownRes> getCountryMasterDropdown(LovDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
			List<CountryMaster> list = new ArrayList<CountryMaster>();

			// Find All
			Root<CountryMaster> c = query.from(CountryMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("countryName")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CountryMaster> ocpm1 = effectiveDate.from(CountryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(ocpm1.get("companyId"), c.get("companyId"));
			effectiveDate.where(a1,a2,a5);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CountryMaster> ocpm2 = effectiveDate2.from(CountryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
//			jakarta.persistence.criteria.Predicate aa = cb.equal(c.get("countryId"), ocpm2.get("99999"));
			jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(ocpm2.get("companyId"), c.get("companyId"));
			effectiveDate2.where(a3, a4,a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = null;
			if(StringUtils.isBlank(req.getInsuranceId()))
				n4 = cb.equal(c.get("companyId"),  "99999" );
			else
				n4 = cb.equal(c.get("companyId"), req.getInsuranceId() );
		
			query.where(n12, n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();

			for (CountryMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getCountryId().toString());
				res.setCodeDesc(data.getCountryName());
				res.setCodeDescLocal(data.getCountryNameLocal());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public List<DropDownRes> getNationalityMasterDropdown(LovDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
			List<CountryMaster> list = new ArrayList<CountryMaster>();

			// Find All
			Root<CountryMaster> c = query.from(CountryMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("countryName")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CountryMaster> ocpm1 = effectiveDate.from(CountryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			effectiveDate.where(a1, a2,a5);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CountryMaster> ocpm2 = effectiveDate2.from(CountryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			jakarta.persistence.criteria.Predicate a6 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			effectiveDate2.where(a3,a4,a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			//Predicate n4 = cb.greaterThanOrEqualTo(c.get("companyId"), "99999");
			
			query.where(n12, n2,n3).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCountryName().trim() ))).collect(Collectors.toList());
			
			for (CountryMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getCountryId().toString());
				res.setCodeDesc(data.getCountryName());
				res.setCodeDescLocal(data.getCountryNameLocal());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	
	@Override
	public List<DropDownRes> getCountryPlansDropdown(CountryPlansReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			// Plan List
			if(StringUtils.isNotBlank(req.getCountryId())  ) {
				List<ProductSectionMaster> sectionlist = getPlansList(req.getCompanyId() , req.getProductId() ) ;
				
				// Country 
				CountryMaster countryRes =  getCountryDetails(req.getCountryId(),req.getCompanyId()  ) ;
				List<String> planIds = countryRes.getPlanId() !=null ? Arrays.asList(countryRes.getPlanId().split(",") ) : new ArrayList<String>() ;  
				
			//
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<BrokerCommissionDetails> query=  cb.createQuery(BrokerCommissionDetails.class);
				List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();
				Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);
				query.select(b);
				Predicate m1 = cb.equal(b.get("loginId"),req.getLoginId());
				Predicate m2 = cb.equal(b.get("productId"),req.getProductId());  //start<=sysdate<=end
				Predicate m3 = cb.equal(b.get("status"),"Y");
				Predicate m4 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"), new Date());
				Predicate m5 = cb.greaterThanOrEqualTo(b.get("effectiveDateEnd"), new Date());
				query.where(m1,m2,m3,m4,m5);
				
				TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);
				list = result.getResultList();
				List<String> newplanIds =new ArrayList<String>();
				
				if(list.size()>0) {
					for(BrokerCommissionDetails data: list) {
						List<String> newplanIdsf = 	planIds.stream().filter(o->o.equals(data.getPolicyType())).collect(Collectors.toList());
						if(newplanIdsf.size()>0)
							newplanIds.addAll(newplanIdsf);
						} 
					
				for(String id : newplanIds ) {
					// Response
					List<ProductSectionMaster> filterSection = sectionlist.stream().filter( o -> o.getSectionId()!=null && o.getSectionId().toString().equals( id) ).collect(Collectors.toList()); 
					if( filterSection.size()> 0 ) {
						ProductSectionMaster section = filterSection.get(0);
						DropDownRes res = new DropDownRes();
						res.setCode(section.getSectionId().toString());
						res.setCodeDesc(section.getSectionName());
						res.setCodeDescLocal(section.getSectionNameLocal());
						res.setStatus(section.getStatus());
						resList.add(res);
					}
				}	
				resList.sort( Comparator.comparing(DropDownRes :: getCodeDesc )) ;
			}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return resList;
		}
		return resList;
	}
	
	
	public List<ProductSectionMaster> getPlansList(String insuranceId , String productId) {
		List<ProductSectionMaster> sectionlist = new ArrayList<ProductSectionMaster>();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			
			
			// Find All
			Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("amendId")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3,a4);
			
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId") );
			
			jakarta.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6,a7,a8);

		    // Where	
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("status"),"R");
			Predicate n7 = cb.or(n1,n6);
			query.where(n7,n2,n3,n4,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
			sectionlist =  result.getResultList();  
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionlist;
	}
	

	public CountryMaster getCountryDetails(String countryId, String companyId ) {
		CountryMaster countryRes = new CountryMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
			List<CountryMaster> list = new ArrayList<CountryMaster>();

			// Find All
			Root<CountryMaster> c = query.from(CountryMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("countryName")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CountryMaster> ocpm1 = effectiveDate.from(CountryMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			effectiveDate.where(a1, a2,a5);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CountryMaster> ocpm2 = effectiveDate2.from(CountryMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			jakarta.persistence.criteria.Predicate a6 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			effectiveDate2.where(a3,a4,a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("countryId"), countryId);
			
			query.where(n12, n2,n3,n4 ,n5).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();
			countryRes =  list.size() > 0 ? list.get(0) : null ;

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return countryRes;
	}
}
