/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.BankMaster;
import com.maan.eway.master.req.BankChangeStatusReq;
import com.maan.eway.master.req.BankMasterGetAllReq;
import com.maan.eway.master.req.BankMasterGetReq;
import com.maan.eway.master.req.BankMasterSaveReq;
import com.maan.eway.master.res.BankMasterRes;
import com.maan.eway.master.service.BankMasterService;
import com.maan.eway.repository.BankMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>BankMasterServiceimpl</h2>
*/
@Service
@Transactional
public class BankMasterServiceImpl implements BankMasterService {

@PersistenceContext
private EntityManager em;

@Autowired
private BankMasterRepository repo;

@Autowired
private BasicValidationService bankValidateService;

Gson json = new Gson();

private Logger log=LogManager.getLogger(BankMasterServiceImpl.class);

//************************************************INSERT/UPDATE BANK DETAILS******************************************************\\
@Transactional
@Override
public SuccessRes insertBank(BankMasterSaveReq req) {
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	BankMaster saveData = new BankMaster();
	List<BankMaster> list  = new ArrayList<BankMaster>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId = 0;
		Date StartDate = req.getEffectiveDateStart();
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLS_IN_A_DAY = 1000*60*60*24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime()- MILLS_IN_A_DAY);
		Date entryDate = null;
		String createdBy ="";
		String bankCode = "";
		if(StringUtils.isBlank(req.getBankCode())) {
			Integer totalCount = getMasterTableCount(req.getCompanyId(),req.getBranchCode());
			bankCode = req.getBankShortName().toString();
			entryDate = new Date();
			createdBy = req.getCreatedBy();
			res.setResponse("Saved Successfully");
			res.setSuccessId(bankCode.toString());
		}
		else {
			bankCode = req.getBankCode();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);
			//Findall
			Root<BankMaster> b = query.from(BankMaster.class);
			//select
			query.select(b);
			//Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			//Where
			Predicate n1 = cb.equal(b.get("bankCode"),req.getBankCode());
			Predicate n2 = cb.equal(b.get("companyId"),req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"),req.getBranchCode());
			Predicate n4 = cb.equal(b.get("branchCode"), "99999");
			Predicate n5 = cb.or(n3,n4);
		
			query.where(n1,n2,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<BankMaster> result = em.createQuery(query);
			int limit=0, offset=2;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime()- MILLS_IN_A_DAY);
				if(list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
					amendId = list.get(0).getAmendId()+1;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					BankMaster lastRecord = list.get(0);
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repo.saveAndFlush(lastRecord);
				}
				else {
					amendId = list.get(0).getAmendId();
					entryDate = list.get(0).getEntryDate();
					createdBy = list.get(0).getCreatedBy();
				//	saveData = list.get(0);
					if(list.size()>1) {
						BankMaster lastRecord = list.get(1);	
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				}
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(bankCode.toString());
		}
		dozerMapper.map(req, saveData);
		saveData.setBankCode(bankCode.toString());
		saveData.setEffectiveDateStart(StartDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setUpdatedDate(new Date());
		saveData.setAmendId(amendId);
		saveData.setBranchCode(req.getBranchCode());
		saveData.setBankFullNameLocal(req.getCodeDescLocal());
		repo.saveAndFlush(saveData);	
		log.info("Saved Details is --> " + json.toJson(saveData));	
		}
	catch(Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
	}
	return res;
	}
	

public Integer getMasterTableCount(String companyId, String branchCode)	{

	Integer data =0;
	try {
		List<BankMaster> list = new ArrayList<BankMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);
		//Find all
		Root<BankMaster> b = query.from(BankMaster.class);
		// Select
		query.select(b);
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<BankMaster> ocpm1 = effectiveDate.from(BankMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("bankCode"),b.get("bankCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"),b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		effectiveDate.where(a1,a2,a3);
	
		//OrderBy
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("bankCode")));
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"),effectiveDate);
		Predicate n2 = cb.equal(b.get("companyId"),companyId);
		Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		query.where(n1,n2,n5).orderBy(orderList);
		
		
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ? Integer.valueOf(list.get(0).getBankCode()) : 0 ;
	}
	catch(Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
	}
	return data;
}


@Override
public List<String> validateBankDetails(BankMasterSaveReq req) {

	List<String> errorList = new ArrayList<String>();

	try {
		if (StringUtils.isBlank(req.getBankFullName())) {
			//errorList.add(new Error("02", "BankFullName", "Please Select BankFullName"));
			errorList.add("1252");
		}else if (req.getBankFullName().length() > 100){
			//errorList.add(new Error("02","BankFullName", "Please Enter BankFullName 100 Characters")); 
			errorList.add("1702");
		}else if (StringUtils.isBlank(req.getBankCode()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())) {
			List<BankMaster> BankList = getBankFullNameExistDetails(req.getBankFullName() , req.getCompanyId() , req.getBranchCode());
			if (BankList.size()>0 ) {
				//errorList.add(new Error("01", "BankFullName", "This BankFullName Already Exist "));
				errorList.add("1253");
			}
		}else if (StringUtils.isNotBlank(req.getBankCode()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getBranchCode())) {
			List<BankMaster> BankList = getBankFullNameExistDetails(req.getBankFullName() , req.getCompanyId() , req.getBranchCode());
			
			if (BankList.size()>0 &&  (! req.getBankCode().equalsIgnoreCase(BankList.get(0).getBankCode().toString())) ) {
				//errorList.add(new Error("01", "BankFullName", "This BankFullName Already Exist "));
				errorList.add("1253");
			}
			
		}
		
		
		if (StringUtils.isBlank(req.getCompanyId())) {
		//	errorList.add(new Error("02", "CompanyId", "Please Enter CompanyId"));
			errorList.add("2101");
		}
		
		if (StringUtils.isBlank(req.getBranchCode())) {
			//errorList.add(new Error("02", "BranchCode", "Please Select BranchCode"));
			errorList.add("1256");
		}
		if (StringUtils.isBlank(req.getBankShortName())) {
			//errorList.add(new Error("03", "BankShortName", "Please Select BankShortName"));
			errorList.add("1257");
		}else if (req.getBankShortName().length() > 100){
			//errorList.add(new Error("03","BankShortName", "Please Enter BankShortName 100 Characters")); 
			errorList.add("1258");
		} 
		
		if (StringUtils.isBlank(req.getRemarks())) {
			//errorList.add(new Error("04", "Remarks", "Please Enter Remarks "));
			errorList.add("2032");
		}else if (req.getRemarks().length() > 100){
		//	errorList.add(new Error("04","Remarks", "Please Enter Remarks within 100 Characters")); 
			errorList.add("2033");
		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
			//errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));
			errorList.add("2034");

		} else if (req.getEffectiveDateStart().before(today)) {
			//errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errorList.add("2035");
		}
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
		//	errorList.add(new Error("05", "Status", "Please Select Status  "));
			errorList.add("2036");
		} else if (req.getStatus().length() > 1) {
		//	errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			errorList.add("2037");
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			//errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("2038");
		}

		if (StringUtils.isBlank(req.getCoreAppCode())) {
		//	errorList.add(new Error("07", "CoreAppCode", "Please Enter CoreAppCode"));
			errorList.add("2124");
		}else if (req.getCoreAppCode().length() > 20){
			//errorList.add(new Error("07","CoreAppCode", "Please Enter CoreAppCode within 20 Characters")); 
			errorList.add("2125");
		}
		if (StringUtils.isBlank(req.getRegulatoryCode())) {
		//	errorList.add(new Error("08", "RegulatoryCode", "Please Enter RegulatoryCode"));
			errorList.add("2041");
		}else if (req.getRegulatoryCode().length() > 20){
			//errorList.add(new Error("08","RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters")); 
			errorList.add("2042");
		}
		if (StringUtils.isBlank(req.getCreatedBy())) {
			//errorList.add(new Error("09", "CreatedBy", "Please Select CreatedBy"));
			errorList.add("2039");
		}else if (req.getCreatedBy().length() > 100){
			//errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy within 100 Characters")); 
			errorList.add("2040");
		}		
	
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}



public List<BankMaster> getBankFullNameExistDetails(String BankFullName , String InsuranceId , String branchCode) {
	List<BankMaster> list = new ArrayList<BankMaster>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);

		// Find All
		Root<BankMaster> b = query.from(BankMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BankMaster> ocpm1 = amendId.from(BankMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("bankCode"), b.get("bankCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
		amendId.where(a1,a2,a3,a4,a5);

		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(cb.lower( b.get("bankFullName")), BankFullName.toLowerCase());
		Predicate n3 = cb.equal(b.get("companyId"),InsuranceId);
		Predicate n4 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n4,n5);
		query.where(n1,n2,n3,n6);
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}







///*********************************************************************GET ALL******************************************************\\
@Override
public List<BankMasterRes> getallBankDetails(BankMasterGetAllReq req) {
	List<BankMasterRes> resList = new ArrayList<BankMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<BankMaster> list = new ArrayList<BankMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);

		// Find All
		Root<BankMaster> b = query.from(BankMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BankMaster> ocpm1 = amendId.from(BankMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("bankCode"), b.get("bankCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));

		amendId.where(a1, a2,a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
//		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
//		Predicate n5 = cb.or(n3,n4);
		query.where(n1,n2,n3).orderBy(orderList);
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBankCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(BankMaster :: getBankFullName ));
		
		// Map
		for (BankMaster data : list) {
			BankMasterRes res = new BankMasterRes();

			res = mapper.map(data, BankMasterRes.class);
			res.setCoreAppCode(data.getCoreAppCode());
			res.setCodeDescLocal(data.getBankFullNameLocal());
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}
private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}
///*********************************************************************GET BY ID******************************************************\\
@Override
public BankMasterRes getByBankCode(BankMasterGetReq req) {
	BankMasterRes res = new BankMasterRes();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<BankMaster> list = new ArrayList<BankMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);

		// Find All
		Root<BankMaster> b = query.from(BankMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BankMaster> ocpm1 = amendId.from(BankMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("bankCode"), b.get("bankCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));

		amendId.where(a1, a2,a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("bankCode"), req.getBankCode());
		Predicate n6 = cb.equal(b.get("branchCode"), "99999");
		Predicate n7 = cb.or(n3,n6);
		query.where(n1,n2,n4,n7).orderBy(orderList);
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);

		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBankCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(BankMaster :: getBankFullName ));
		
		res = mapper.map(list.get(0), BankMasterRes.class);
		res.setBankCode(list.get(0).getBankCode().toString());
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		res.setCoreAppCode(list.get(0).getCoreAppCode());
		res.setCodeDescLocal(list.get(0).getBankFullNameLocal());
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}
/*
//**********************************************************DROPDOWN********************************************************************\\
@Override
public List<DropDownRes> getBankMasterDropdown() {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today   = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);
		List<BankMaster> list = new ArrayList<BankMaster>();
		
		// Find All
		Root<BankMaster>    c = query.from(BankMaster.class);		
		
		// Select
		query.select(c );
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("bankFullName")));
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<BankMaster> ocpm1 = effectiveDate.from(BankMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("bankCode"),ocpm1.get("bankCode") );
		jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2);
		
	    // Where	
		jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		
		query.where(n1,n2).orderBy(orderList);
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		
		for(BankMaster data : list ) {
			// Response
			DropDownRes res = new DropDownRes();
			res.setCode(data.getBankCode().toString());
			res.setCodeDesc(data.getBankFullName());
			resList.add(res);
		}		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}
*/
//************************************************GET ACTIVE BANK******************************************\\
@Override
public List<BankMasterRes> getActiveBankDetails(BankMasterGetAllReq req) {
	List<BankMasterRes> resList = new ArrayList<BankMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<BankMaster> list = new ArrayList<BankMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);

		// Find All
		Root<BankMaster> b = query.from(BankMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BankMaster> ocpm1 = amendId.from(BankMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("bankCode"), b.get("bankCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));

		amendId.where(a1, a2,a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("status"), "Y");
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3,n5);
		query.where(n1,n2,n4,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBankCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(BankMaster :: getBankFullName ));
		
		// Map
		for (BankMaster data : list) {
			BankMasterRes res = new BankMasterRes();

			res = mapper.map(data, BankMasterRes.class);
			res.setCoreAppCode(data.getCoreAppCode());

			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


@Override
public SuccessRes changeStatusOfBank(BankChangeStatusReq req) {
	SuccessRes res = new SuccessRes();
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	List<BankMaster> list = new ArrayList<BankMaster>(); 
	BankMaster saveData = new BankMaster(); 
	try {
		Integer amendId = 0;
		Date StartDate = req.getEffectiveDateStart();
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLS_IN_A_DAY = 1000*60*60*24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime()- MILLS_IN_A_DAY);
		Date entryDate = null;
		String createdBy ="";
		String bankCode = "";
		
		bankCode = req.getBankCode();
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query = cb.createQuery(BankMaster.class);
		//Findall
		Root<BankMaster> b = query.from(BankMaster.class);
		//select
		query.select(b);
		//Orderby
		Subquery<Long> amendId2 = query.subquery(Long.class);
		Root<BankMaster> ocpm1 = amendId2.from(BankMaster.class);
		amendId2.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("bankCode"), b.get("bankCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		amendId2.where(a1, a2,a3);
		//Orderby
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));
		//Where
		Predicate n1 = cb.equal(b.get("bankCode"),req.getBankCode());
		Predicate n2 = cb.equal(b.get("companyId"),req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"),req.getBranchCode());
		Predicate n4 = cb.equal(b.get("branchCode"),"99999");
		Predicate n5 = cb.or(n3,n4);
		Predicate n6 = cb.equal(b.get("amendId"),amendId2);
		
		query.where(n1,n2,n5,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);
		int limit=0, offset=2;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		if(req.getBranchCode().equalsIgnoreCase(list.get(0).getBranchCode() ) &&  list.size()>0) {
			Date beforeOneDay = new Date(new Date().getTime()- MILLS_IN_A_DAY);
			if(list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
				amendId = list.get(0).getAmendId()+1;
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				BankMaster lastRecord = list.get(0);
				lastRecord.setEffectiveDateEnd(oldEndDate);
				repo.saveAndFlush(lastRecord);
			}
			else  {
				amendId = list.get(0).getAmendId();
				entryDate = list.get(0).getEntryDate();
				createdBy = list.get(0).getCreatedBy();
				saveData = list.get(0);
				if(req.getBranchCode().equalsIgnoreCase(list.get(0).getBranchCode() ) &&  list.size()>1) {
					BankMaster lastRecord = list.get(1);	
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repo.saveAndFlush(lastRecord);
				}
			}
		}
		res.setResponse("Updated Successfully");
		res.setSuccessId(bankCode.toString());
			
		dozerMapper.map(list.get(0), saveData);
		saveData.setBankCode(bankCode.toString());
		saveData.setEffectiveDateStart(StartDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setUpdatedDate(new Date());
		saveData.setAmendId(amendId);
		saveData.setStatus(req.getStatus());
		saveData.setBranchCode(req.getBranchCode());
		repo.saveAndFlush(saveData);	
		log.info("Saved Details is --> " + json.toJson(saveData));	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getBankCode());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;
}

@Override
public List<DropDownRes> getBankMasterDropdown( BankChangeStatusReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);;
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BankMaster> query=  cb.createQuery(BankMaster.class);
		List<BankMaster> list = new ArrayList<BankMaster>();
		// Find All
		Root<BankMaster> c = query.from(BankMaster.class);
		//Select
		query.select(c);
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<BankMaster> ocpm1 = effectiveDate.from(BankMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("bankCode"),ocpm1.get("bankCode"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
		effectiveDate.where(a1,a2,a5,a6);
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<BankMaster> ocpm2 = effectiveDate2.from(BankMaster.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("bankCode"),ocpm2.get("bankCode"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
		effectiveDate2.where(a3,a4,a7,a8);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n11 = cb.equal(c.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);
		Predicate n4 = cb.equal(c.get("companyId"), req.getCompanyId());
		Predicate n5 = cb.equal(c.get("branchCode"), req.getBranchCode());
		Predicate n6 = cb.equal(c.get("branchCode"), "99999");
		Predicate n7 = cb.or(n5,n6);
		query.where(n12,n2,n3,n4,n7).orderBy(orderList);
		
		// Get Result
		TypedQuery<BankMaster> result = em.createQuery(query);
		list = result.getResultList(); 
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getBankCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(BankMaster :: getBankFullName ));
		
		for(BankMaster data : list ) {
			// Response
			DropDownRes res = new DropDownRes();
			res.setCode(data.getBankCode().toString());
			res.setCodeDesc(data.getBankFullName());
			res.setCodeDescLocal(data.getBankFullNameLocal());
			res.setStatus(data.getStatus());
			resList.add(res);
		}		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}





}
