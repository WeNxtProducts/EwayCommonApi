/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:27 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.admin.controller;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

import javax.imageio.ImageIO;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.maan.eway.admin.req.BrokerActiveGridReq;
import com.maan.eway.admin.req.BrokerCreationReq;
import com.maan.eway.admin.req.BrokerDetailsGetReq;
import com.maan.eway.admin.req.BrokerLoginGridReq;
import com.maan.eway.admin.req.InsertUserLoginReq;
import com.maan.eway.admin.req.IssuerActiveGridReq;
import com.maan.eway.admin.req.IssuerCraeationReq;
import com.maan.eway.admin.req.IssuerDetailsGetReq;
import com.maan.eway.admin.req.IssuerLoginGridReq;
import com.maan.eway.admin.req.MenuIdGetReq;
import com.maan.eway.admin.req.MenuIdSaveReq;
import com.maan.eway.admin.req.MenuListReq;
import com.maan.eway.admin.req.UserActiveGridReq;
import com.maan.eway.admin.req.UserCreationReq;
import com.maan.eway.admin.req.UserDetailsGetReq;
import com.maan.eway.admin.req.UserLoginGridReq;
import com.maan.eway.admin.res.BrokerDatailsGetRes;
import com.maan.eway.admin.res.IssuerDatailsGetRes;
import com.maan.eway.admin.res.LoginBrokerDetailsGetRes;
import com.maan.eway.admin.res.LoginBrokerDetailsGridRes;
import com.maan.eway.admin.res.LoginCreationRes;
import com.maan.eway.admin.res.LoginIssuerGridRes;
import com.maan.eway.admin.res.LoginUserGridRes;
import com.maan.eway.admin.res.MenuIdGetRes;
import com.maan.eway.admin.res.UserDetailsGetRes;
import com.maan.eway.admin.service.LoginDetailsService;
import com.maan.eway.admin.service.LoginValidationService;
import com.maan.eway.auth.dto.Menu;
import com.maan.eway.common.req.CommonErrorModuleReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.Error;
import com.maan.eway.jasper.res.JasperDocumentRes;
import com.maan.eway.master.req.BrokerDropdownReq;
import com.maan.eway.res.BrokerDropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>LoginMasterController</h2>
*/
@RestController
@Api(tags = "ADMIN : Login Details ", description = "API's")
@RequestMapping("/admin")
public class LoginDetailsController {

	@Autowired
	private  LoginDetailsService entityService;
	
	@Autowired
	private LoginValidationService validationService ;

	@Autowired
	private PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;
	
/*
	private static final String ENTITY_TITLE = "LoginMaster";


 	public LoginMasterController (LoginMasterService entityService) {
		this.entityService = entityService;
	}
*/
	
//*************************************** Login Creation Apis **********************************************************//

	@PostMapping("/createbroker")
	@ApiOperation(value="This method is to Create Broker Login")
	public ResponseEntity<CommonRes> createBrokerLogin(@RequestParam(value = "brokerLogo",required = false) MultipartFile brokerLogo,@RequestParam ("Req") String jsonReq) throws IOException {
	
		BrokerCreationReq req = new ObjectMapper().readValue(jsonReq, BrokerCreationReq.class);
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes = validationService.validateBrokerCreation(req);
		List<Error> validation = null;
		String msg=null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
			comErrDescReq.setInsuranceId(StringUtils.isBlank(req.getLoginInformation().getCompanyId())?"99999": req.getLoginInformation().getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			// password pattern dynamic error response
			{
			for (String a : validationCodes) {
					if (a.contains("555-")) {
						msg=a.replaceAll("^\\d{3}-", "");
					    validationCodes.remove(a);
					    break;
					}}
			 }
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}

        if(msg!=null) {validation.add(new Error("555", "New Password", msg));  }
		  
		if(brokerLogo != null) {
			if(!brokerLogo.getContentType().equals("image/jpeg") && !brokerLogo.getContentType().equals("image/png")) {
				validation.add(new Error("500", "BrokerLogo", "Only Image files (JPEG or PNG) are allowed"));
			}else {
				BufferedImage image = ImageIO.read(brokerLogo.getInputStream());
				Integer width = image.getWidth();
				Integer height = image.getHeight();
				if(width>300 && width<=350 && height>100 && height<=150) {
					validation.add(new Error("500", "BrokerLogo", "Image Size must be 335x111 pixels."));
				}
			}
		}
		
		//// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			/////// save
			LoginCreationRes res = entityService.createBroker(req,brokerLogo);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

	@PostMapping("/createissuer")
	@ApiOperation(value="This method is to Create Issuer Login")
	public ResponseEntity<CommonRes> createIssuerLogin(@RequestBody  IssuerCraeationReq req) {
	
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes = validationService.validateIssuerCreation(req);
		List<Error> validation = null;
		String msg=null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
		//	comErrDescReq.setInsuranceId(req.getLoginInformation().getCompanyId());
			comErrDescReq.setInsuranceId(StringUtils.isBlank(req.getLoginInformation().getCompanyId())?"99999": req.getLoginInformation().getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			// password pattern dynamic error response
						{
						for (String a : validationCodes) {
								if (a.contains("555-")) {
									msg=a.replaceAll("^\\d{3}-", "");
								    validationCodes.remove(a);
								    break;
								}}
						 }
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}
		  if(msg!=null) {validation.add(new Error("555", "New Password", msg));  }
		
		//// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			/////// save
			LoginCreationRes res = entityService.createIssuerLogin(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}


	@PostMapping("/createuser")
	@ApiOperation(value="This method is to Create BrokerEmployees Login")
	public ResponseEntity<CommonRes> createIssuerLogin(@RequestBody  UserCreationReq req) {
	
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes = validationService.validateUserCreation(req);
		List<Error> validation = null;
		String msg=null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
			comErrDescReq.setInsuranceId(StringUtils.isBlank(req.getLoginInformation().getCompanyId())?"99999": req.getLoginInformation().getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			// password pattern dynamic error response
			{
			for (String a : validationCodes) {
					if (a.contains("555-")) {
						msg=a.replaceAll("^\\d{3}-", "");
					    validationCodes.remove(a);
					    break;
					}}
			 }
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}
		 if(msg!=null) {validation.add(new Error("555", "New Password", msg));  }
		//// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			/////// save
			LoginCreationRes res = entityService.createUserLogin(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

//*************************************** Login GetAll Apis **********************************************************//	

	@PostMapping("/getallbrokers")
	@ApiOperation(value="This method is to Get All Brokers")
	public ResponseEntity<CommonRes> getBrokerLoginDetailsByUserType(@RequestBody  BrokerLoginGridReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// grid
		List<LoginBrokerDetailsGridRes> res = entityService.getBrokerLoginDetailsByUserType(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/getbrokers")
	@ApiOperation(value="This method is to Get Brokers")
	public ResponseEntity<CommonRes> getBrokerLoginDetailsSubUserType(@RequestBody  BrokerLoginGridReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// grid
		List<LoginBrokerDetailsGetRes> res = entityService.getBrokerLoginDetailsSubUserType(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/getallusers")
	@ApiOperation(value="This method is to Get All Brokers Employees")
	public ResponseEntity<CommonRes> getUserLoginDetailsByUserType(@RequestBody  UserLoginGridReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// grid
		List<LoginUserGridRes> res = entityService.getUserLoginDetailsByUserType(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/getallissuers")
	@ApiOperation(value="This method is to Get All Issuers")
	public ResponseEntity<CommonRes> getIssuerLoginDetailsByUserType(@RequestBody  IssuerLoginGridReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		/////// grid
		List<LoginIssuerGridRes> res = entityService.getIssuerLoginDetailsByUserType(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	
//*************************************** Login Activers Apis **********************************************************//

	@PostMapping("/getactivebrokers")
	@ApiOperation(value="This method is to Get Active Brokers")
	public ResponseEntity<CommonRes> getBrokerActiveDetailsByUserType(@RequestBody  BrokerActiveGridReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// grid
		List<LoginBrokerDetailsGridRes> res = entityService.getBrokerActiveDetailsByUserType(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/getactiveusers")
	@ApiOperation(value="This method is to Get Active BrokersEmployees")
	public ResponseEntity<CommonRes> getUserActiveDetailsByUserType(@RequestBody  UserActiveGridReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// grid
		List<LoginUserGridRes> res = entityService.getUserActiveDetailsByUserType(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/getactiveissuers")
	@ApiOperation(value="This method is to Get Active Issuers")
	public ResponseEntity<CommonRes> getIssuerActiveDetailsByUserType(@RequestBody  IssuerActiveGridReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		/////// grid
		List<LoginIssuerGridRes> res = entityService.getIssuerActiveDetailsByUserType(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	
//***************************************  Login GetById Apis **********************************************************//

	@PostMapping("/getbrokerbyid")
	@ApiOperation(value="This method is to Get Broker By Id ")
	public ResponseEntity<CommonRes> getBrokerDetailsById(@RequestBody  BrokerDetailsGetReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		/////// get
		BrokerDatailsGetRes res = entityService.getBrokerDetailsById(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/getissuerbyid")
	@ApiOperation(value="This method is to Get Issuer By Id ")
	public ResponseEntity<CommonRes> getIssuerDetailsById(@RequestBody  IssuerDetailsGetReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// get
		IssuerDatailsGetRes res = entityService.getIssuerDetailsById(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping("/getuserbyid")
	@ApiOperation(value="This method is to Get User By Id ")
	public ResponseEntity<CommonRes> getUserDetailsById(@RequestBody  UserDetailsGetReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// get
		UserDetailsGetRes res = entityService.getUserDetailsById(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/getmenulist")
	@ApiOperation(value="This method is to Get Brokers")
	public ResponseEntity<CommonRes> getBrokerLoginDetailsSubUserType(@RequestBody  MenuListReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// grid
		List<Menu>  res = entityService.getMenuList(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/insertuserlogin")
	@ApiOperation(value="This method is to Insert User Login")
	public ResponseEntity<CommonRes> insertUserLogin(@RequestBody  InsertUserLoginReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		/////// save
		LoginCreationRes res = entityService.insertUserLogin(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}


//	@GetMapping("/dropdown/brokerids")
//	@ApiOperation(value = "This method is to BrokerIds  Drop Down")
//	public ResponseEntity<CommonRes> getBrokerIds() {
//		CommonRes data = new CommonRes();
//
//		// Save
//		List<BrokerDropDownRes> res = entityService.getBrokerIds();
//		data.setCommonResponse(res);
//		data.setIsError(false);
//		data.setErrorMessage(Collections.emptyList());
//		data.setMessage("Success");
//
//		if (res != null) {
//			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
//		} else {
//			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
//		}
//
//	}

	@PostMapping("/dropdown/brokerids")
	@ApiOperation(value = "This method is to BrokerIds  Drop Down")
	public ResponseEntity<CommonRes> getBrokerIdsByCompany(@RequestBody  BrokerDropdownReq req) {
		CommonRes data = new CommonRes();

		// Save
		List<BrokerDropDownRes> res = entityService.getBrokerIdsByCompany(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}

	@PostMapping("/savemenuids")
	@ApiOperation(value="This method is to save menu ids")
	public ResponseEntity<CommonRes> savemenuids(@RequestBody MenuIdSaveReq  req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
			/////// save
			SuccessRes res = entityService.savemenuids(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	@PostMapping("/getmenuids")
	@ApiOperation(value="This method is to Get menu ids")
	public ResponseEntity<CommonRes> getmenuids(@RequestBody MenuIdGetReq  req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
			/////// save
			MenuIdGetRes res = entityService.getmenuids(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	@GetMapping("/getBrokerLogo/{loginId}")
	public ResponseEntity<?> GetBrokerLogo(@PathVariable ("loginId") String loginId){
		JasperDocumentRes res = entityService.getBrokerLogo(loginId);
		if(res != null) {
			return new ResponseEntity<JasperDocumentRes>(res,HttpStatus.ACCEPTED);
		}else {
			return new ResponseEntity<>(null,HttpStatus.NO_CONTENT);
		}
	}
	
}