/*
*  Copyright (c) 2019. All right reserved
* Created on 2021-08-31 ( Date ISO 2021-08-31 - Time 20:19:31 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.integration.service.impl;

import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Iterator;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;


import com.maan.eway.integration.req.InsertCreditLimitDetailReq;
import com.maan.eway.integration.req.InsertYiPolicyApprovalReq;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.maan.eway.bean.CreditLimitDetail;
import com.maan.eway.bean.EmiTransactionDetails;
import com.maan.eway.bean.MotCommDiscountDetail;
import com.maan.eway.bean.MotDriverDetail;
import com.maan.eway.bean.PgithPolRiskAddlInfo;
import com.maan.eway.bean.PtIntgFlexTran;
import com.maan.eway.bean.YiChargeDetail;
import com.maan.eway.bean.YiCoverDetail;
import com.maan.eway.bean.YiPolicyApproval;
import com.maan.eway.bean.YiPolicyDetail;
import com.maan.eway.bean.YiPremCal;
import com.maan.eway.bean.YiSectionDetail;
import com.maan.eway.bean.YiVatDetail;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.res.PremiaCommonRes;
import com.maan.eway.integration.req.InsertCreditLimitDetailReq;
import com.maan.eway.integration.req.InsertYiPolicyApprovalReq;
import com.maan.eway.integration.req.InsertYiPremCalReq;
import com.maan.eway.integration.req.InsertYiSectionDetailReq;
import com.maan.eway.integration.req.InsertYiVatDetailReq;
import com.maan.eway.integration.req.MotDriverDetailReq;
import com.maan.eway.integration.req.MotcommDiscountDetailReq;
import com.maan.eway.integration.req.PgitPolRiskAddlInfoReq;
import com.maan.eway.integration.req.PtIntgFlexTranReq;
import com.maan.eway.integration.req.YiChargeDetailReq;
import com.maan.eway.integration.req.YiCoverDetailReq;
import com.maan.eway.integration.req.YiPolicyDetailReq;
import com.maan.eway.integration.res.IntegrationSaveRes;
import com.maan.eway.integration.service.FrameReqService;
import com.maan.eway.repository.CreditLimitDetailRepository;
import com.maan.eway.repository.MotDriverDetailRepository;
import com.maan.eway.repository.MotcommDiscountDetailRepository;
import com.maan.eway.repository.PgitPolRiskAddlInfoRepository;
import com.maan.eway.repository.PtintgFlexTransRepository;
import com.maan.eway.repository.YiChargeDetailRepository;
import com.maan.eway.repository.YiCoverDetailRepository;
import com.maan.eway.repository.YiPolicyApprovalRepository;
import com.maan.eway.repository.YiPolicyDetailRepository;
import com.maan.eway.repository.YiPremCalRepository;
import com.maan.eway.repository.YiSectionDetailRepository;
import com.maan.eway.repository.YiVatDetailRepository;

@Service

public class FrameReqServiceImpl implements FrameReqService {
	@Autowired
	private YiCoverDetailRepository yiCoverDetailRepo;
	@Autowired
	private PgitPolRiskAddlInfoRepository pgitPolRiskRepo;
	@Autowired
	private YiChargeDetailRepository yiChargeDetailRepo;
	@Autowired
	private MotDriverDetailRepository motDrivDetailsRepo;
	@Autowired
	private MotcommDiscountDetailRepository motComRepo;
	@Autowired
	private YiPolicyDetailRepository yiPolicyReo;
	@Autowired
	private CreditLimitDetailRepository creditRepo;
	
	@Autowired
	private YiPolicyApprovalRepository yipolicyRepo;
	
	@Autowired
	private YiPremCalRepository yipremRepo;
	
	@Autowired
	private YiSectionDetailRepository yisecRepo;
	
	@Autowired
	private YiVatDetailRepository yivatRepo;
	
	@Autowired
	private PtintgFlexTransRepository ptintgFlexTransRepo;

	@Value(value = "${BasicAuthPass}")
	private String BasicAuthPass;
	
	@Value(value = "${BasicAuthName}")
	private String BasicAuthName;

	@Value(value = "${MotCommDiscountDetail}")
	private String MotCommDiscountDetailCall;

	@Value(value = "${MotDriverDetail}")
	private String MotDriverDetailCall;

	@Value(value = "${PgitPolRiskAddlInfo}")
	private String PgitPolRiskAddlInfoCall;

	@Value(value = "${YiCoverdetail}")
	private String YiCoverdetailCall;

	@Value(value = "${YiChargeDetail}")
	private String YiChargeDetailCall;

	@Value(value = "${YiPolicyDetail}")
	private String YiPolicyDetailCall;
	
	@Value(value = "${CreditLimitDetail}")
	private String CreditLimitDetailCall;

	@Value(value = "${YiPolicyApproval}")
	private String YiPolicyApprovalCall;

	@Value(value = "${YiPremCal}")
	private String YiPremCalCall;

	@Value(value = "${YiSectionDetail}")
	private String YiSectionDetailCall;

	@Value(value = "${YiVatDetail}")
	private String YiVatDetailCall;
	
	@Value(value = "${PtIntgFlexTran}")
	private String PtIntgFlexTranCall;
	
	
	SimpleDateFormat sdfFormat = new SimpleDateFormat("dd/MM/yyyy");
	SimpleDateFormat dbFormat = new SimpleDateFormat("yyyy-dd-MM");
	private Logger log = LogManager.getLogger(FrameReqServiceImpl.class);
	ModelMapper dozerMapper = new ModelMapper();
	//*****************************************Push**********************************************************************
	@Override
	public Object pushMotCommDiscountDetail(String policyNo) {

		String url = MotCommDiscountDetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
        List<MotcommDiscountDetailReq> reqlist = new ArrayList<MotcommDiscountDetailReq>();
		List<MotCommDiscountDetail> list = motComRepo.findByQuotationPolicyNo(policyNo);
		MotCommDiscountDetail saveData=new MotCommDiscountDetail();
		if (list != null && list.size() > 0) {
			for(MotCommDiscountDetail  reqData:list) {
				MotcommDiscountDetailReq req = new MotcommDiscountDetailReq();
				req = dozerMapper.map(reqData, MotcommDiscountDetailReq.class);
				reqlist.add(req);
			}
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<List<MotcommDiscountDetailReq>> entityReq = new HttpEntity<List<MotcommDiscountDetailReq>>(reqlist, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(MotCommDiscountDetail data1:list) {
				saveData=dozerMapper.map(data1, MotCommDiscountDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
				saveData.setCommercialDiscount(data1.getCommercialDiscount()==null?"0":data1.getCommercialDiscount().toString());
//				list.add(saveData);
			}
			motComRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(MotCommDiscountDetail data1:list) {
				saveData=dozerMapper.map(data1, MotCommDiscountDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
				saveData.setCommercialDiscount(data1.getCommercialDiscount()==null?"0":data1.getCommercialDiscount().toString());
//				list.add(saveData);
			}
			motComRepo.saveAndFlush(saveData);
		}
		}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return response;
	}
	@Override
	public Object pushMotDriverDetail(String policyNo) {
		String url = MotDriverDetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
        List<MotDriverDetailReq> reqlist = new ArrayList<MotDriverDetailReq>();
		List<MotDriverDetail> list = motDrivDetailsRepo.findByQuotationPolicyNo(policyNo);
		MotDriverDetail saveData = new MotDriverDetail();
		if (list != null && list.size() > 0) {
			
			for(MotDriverDetail data:list) {
				MotDriverDetailReq req1 = new MotDriverDetailReq();
				req1 = dozerMapper.map(data, MotDriverDetailReq.class);
				reqlist.add(req1);
			}
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<List<MotDriverDetailReq>> entityReq = new HttpEntity<List<MotDriverDetailReq>>(reqlist, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(MotDriverDetail data1:list) {
				saveData=dozerMapper.map(data1, MotDriverDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
			motDrivDetailsRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(MotDriverDetail data1:list) {
				saveData=dozerMapper.map(data1, MotDriverDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
			motDrivDetailsRepo.saveAndFlush(saveData);
		}
		}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return response;
	}

	@Override
	public Object pushYiCoverDetail(String policyNo) {
		String url = YiCoverdetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
        List<YiCoverDetailReq> reqlist = new ArrayList<YiCoverDetailReq>();
		List<YiCoverDetail> list = yiCoverDetailRepo.findByQuotationPolicyNo(policyNo);
		YiCoverDetail saveData=new YiCoverDetail();
		if (list != null && list.size() > 0) {
			for (YiCoverDetail data : list) {
				YiCoverDetailReq req1 = new YiCoverDetailReq();
				req1 = dozerMapper.map(data, YiCoverDetailReq.class);
				reqlist.add(req1);
			}
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<List<YiCoverDetailReq>> entityReq = new HttpEntity<List<YiCoverDetailReq>>(reqlist, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(YiCoverDetail data1:list) {
				saveData=dozerMapper.map(data1, YiCoverDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
			yiCoverDetailRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(YiCoverDetail data1:list) {
				saveData=dozerMapper.map(data1, YiCoverDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
			yiCoverDetailRepo.saveAndFlush(saveData);
		}
		}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return response;
	}
	@Override
	public Object pushYiChargeDetail(String policyNo) {
		String url = YiChargeDetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
        List<YiChargeDetailReq> reqlist = new ArrayList<YiChargeDetailReq>();
		List<YiChargeDetail> list = yiChargeDetailRepo.findByQuotationPolicyNo(policyNo);
		YiChargeDetail saveData=new YiChargeDetail();
		if (list != null && list.size() > 0) {
			for (YiChargeDetail data : list) {
				YiChargeDetailReq req1 = new YiChargeDetailReq();
				req1 = dozerMapper.map(data, YiChargeDetailReq.class);
				reqlist.add(req1);
			}
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<List<YiChargeDetailReq>> entityReq = new HttpEntity<List<YiChargeDetailReq>>(reqlist, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(YiChargeDetail data1:list) {
				saveData=dozerMapper.map(data1, YiChargeDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
			yiChargeDetailRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(YiChargeDetail data1:list) {
				saveData=dozerMapper.map(data1, YiChargeDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
			yiChargeDetailRepo.saveAndFlush(saveData);
		}
		}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return response;
	}
	@Override
	public Object pushYiPolicyDetail(String policyNo) {
		
		String url = YiPolicyDetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
        List<YiPolicyDetailReq> reqlist = new ArrayList<YiPolicyDetailReq>();
		List<YiPolicyDetail> list = yiPolicyReo.findByQuotationPolicyNo(policyNo);
		YiPolicyDetail saveData=new YiPolicyDetail();
		if (list != null && list.size() > 0) {
			YiPolicyDetailReq req1 = new YiPolicyDetailReq();
			for (YiPolicyDetail data : list) {
				req1 = dozerMapper.map(data, YiPolicyDetailReq.class);
				reqlist.add(req1);
			}
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<List<YiPolicyDetailReq>> entityReq = new HttpEntity<List<YiPolicyDetailReq>>(reqlist, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("Success".equalsIgnoreCase(res1.getResponse())){
			for(YiPolicyDetail data:list) {
				saveData=dozerMapper.map(data, YiPolicyDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");			
//				list.add(saveData);
			}
			yiPolicyReo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(YiPolicyDetail data:list) {
				saveData=dozerMapper.map(data, YiPolicyDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
				}
				yiPolicyReo.saveAndFlush(saveData);
		}
		}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return response;
	}
	////////////////////////////////////////////////////////////////
	@Override
	public Object pushCreditLimitDetail(String reqRefNo) {
		
		String url = CreditLimitDetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
        List<InsertCreditLimitDetailReq> reqList = new ArrayList<InsertCreditLimitDetailReq>();
      
		List<CreditLimitDetail> list =creditRepo.findByRequestreferenceno(reqRefNo); 
		CreditLimitDetail saveData=new CreditLimitDetail();
		if (list != null && list.size() > 0) {
			for(CreditLimitDetail data : list) {
				  InsertCreditLimitDetailReq req1 = new InsertCreditLimitDetailReq();
				  req1 = dozerMapper.map(data,  InsertCreditLimitDetailReq.class);
				  reqList.add(req1);
				  }
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.set("Authorization",authHeader);
		HttpEntity< List<InsertCreditLimitDetailReq>> entityReq = new HttpEntity< List<InsertCreditLimitDetailReq>>(reqList, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(CreditLimitDetail data1:list) {
				saveData=dozerMapper.map(data1, CreditLimitDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
			creditRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(CreditLimitDetail data1:list) {
				saveData=dozerMapper.map(data1, CreditLimitDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
			creditRepo.saveAndFlush(saveData);
		}
		}
			
		
		}catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return response;
		
	}
	@Override
	public Object pushYiPolicyApproval(String policyNo) {
		
		String url = YiPolicyApprovalCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
       
		List<YiPolicyApproval> list =yipolicyRepo.findByQuotationPolicyNo(policyNo);
		YiPolicyApproval saveData=new YiPolicyApproval();
		List<InsertYiPolicyApprovalReq> reqList = new ArrayList<InsertYiPolicyApprovalReq>();
		if (list != null && list.size() > 0) {
			
			for(YiPolicyApproval data : list) {
				 InsertYiPolicyApprovalReq req1 = new InsertYiPolicyApprovalReq();
				  req1 = dozerMapper.map(data,   InsertYiPolicyApprovalReq.class);
				  reqList.add(req1);
				  }
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<   List<InsertYiPolicyApprovalReq>> entityReq = new HttpEntity<   List<InsertYiPolicyApprovalReq>>(reqList, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(YiPolicyApproval data1:list) {
				saveData=dozerMapper.map(data1, YiPolicyApproval.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
				}
			yipolicyRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(YiPolicyApproval data1:list) {
				saveData=dozerMapper.map(data1, YiPolicyApproval.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
		yipolicyRepo.saveAndFlush(saveData);
		}
		}

	
		}catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return response;
	}
	@Override
	public Object pushYiPremCal(String policyNo) {
		
		String url = YiPremCalCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
       
		List<YiPremCal> list =yipremRepo.findByQuotationPolicyNo(policyNo);
		YiPremCal saveData =new YiPremCal();
		List<InsertYiPremCalReq> reqList = new ArrayList<InsertYiPremCalReq>();
		if (list != null && list.size() > 0) {
		
			for(YiPremCal data : list) {
				 InsertYiPremCalReq req1 = new   InsertYiPremCalReq();
				 req1 = dozerMapper.map(data,     InsertYiPremCalReq.class);
				  reqList.add(req1);
				  }
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity< List<InsertYiPremCalReq>> entityReq = new HttpEntity<List<InsertYiPremCalReq>>(reqList, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(YiPremCal data1:list) {
				saveData=dozerMapper.map(data1, YiPremCal.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
		yipremRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(YiPremCal data1:list) {
				saveData=dozerMapper.map(data1, YiPremCal.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
		yipremRepo.saveAndFlush(saveData);
		}
		}
		}catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return response;
	}
	@Override
	public Object pushYiVatDetail(String policyNo) {
		
		String url = YiVatDetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
		List<YiVatDetail> list =yivatRepo.findByQuotationPolicyNo(policyNo);
		YiVatDetail saveData=new YiVatDetail();
		List<InsertYiVatDetailReq> reqList = new ArrayList<InsertYiVatDetailReq>();
		if (list != null && list.size() > 0) {

			for(YiVatDetail data : list) {
				InsertYiVatDetailReq req1 = new   InsertYiVatDetailReq();
				 req1 = dozerMapper.map(data,  InsertYiVatDetailReq.class);
				  reqList.add(req1);
				  }
			
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity< List<InsertYiVatDetailReq>> entityReq = new HttpEntity<List<InsertYiVatDetailReq>>(reqList, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(YiVatDetail data1:list) {
				saveData=dozerMapper.map(data1, YiVatDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
		yivatRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(YiVatDetail data1:list) {
				saveData=dozerMapper.map(data1, YiVatDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
		yivatRepo.saveAndFlush(saveData);
		}
		}
	
		}catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return response;
	}
	@Override
	public Object pushYiSectionDetail(String policyNo) {
		
		String url = YiSectionDetailCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
      
		List<YiSectionDetail> list =yisecRepo.findByQuotationPolicyNo(policyNo);
		YiSectionDetail saveData=new YiSectionDetail();
		List<InsertYiSectionDetailReq> reqList = new ArrayList<InsertYiSectionDetailReq>();
		if (list != null && list.size() > 0) {
		
			for(YiSectionDetail data : list) {
				  InsertYiSectionDetailReq req1 = new     InsertYiSectionDetailReq();
				req1 = dozerMapper.map(data, InsertYiSectionDetailReq.class);
				  reqList.add(req1);
				  }
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.set("Authorization",authHeader);
		HttpEntity<List<InsertYiSectionDetailReq>> entityReq = new HttpEntity<List<InsertYiSectionDetailReq>>(reqList, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(YiSectionDetail data1:list) {
				saveData=dozerMapper.map(data1, YiSectionDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
		yisecRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(YiSectionDetail data1:list) {
				saveData=dozerMapper.map(data1, YiSectionDetail.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
		yisecRepo.saveAndFlush(saveData);
		}
		}
	} catch (Exception e) {
		e.printStackTrace();
		return null;
	}
	return response;
	}
	
	@Override
	public Object pushPgitPolRiskAddlInfo(String policyNo) {
		String url = PgitPolRiskAddlInfoCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
     
		List<PgithPolRiskAddlInfo> list = pgitPolRiskRepo.findByQuotationPolicyNo(policyNo);
		PgithPolRiskAddlInfo saveData=new PgithPolRiskAddlInfo();
		List<PgitPolRiskAddlInfoReq> reqList = new ArrayList<PgitPolRiskAddlInfoReq>();
		
		if (list != null && list.size() > 0) {
			
			for(PgithPolRiskAddlInfo data : list) {
				PgitPolRiskAddlInfoReq req1 = new PgitPolRiskAddlInfoReq();
				   req1 = dozerMapper.map(data, PgitPolRiskAddlInfoReq.class);
				   reqList.add(req1);
				  }
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<List<PgitPolRiskAddlInfoReq>> entityReq = new HttpEntity<List<PgitPolRiskAddlInfoReq>>(reqList, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
		try {
		if("success".equalsIgnoreCase(res1.getResponse())) {
			for(PgithPolRiskAddlInfo data1:list) {
				saveData=dozerMapper.map(data1, PgithPolRiskAddlInfo.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError("");
//				list.add(saveData);
			}
			pgitPolRiskRepo.saveAndFlush(saveData);
		}else {
			if(list.size()>0 && list!=null) {
			for(PgithPolRiskAddlInfo data1:list) {
				saveData=dozerMapper.map(data1, PgithPolRiskAddlInfo.class);
				saveData.setPWsResponseType(res1.getResponse());
				saveData.setPWsError(res1.getErrorMessage());
//				list.add(saveData);
			}
			pgitPolRiskRepo.saveAndFlush(saveData);
		}
		}

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return response;
	}
//Madison-------------------------------------------------------------------------------------------------------------------------------
	@Override
	public Object pushPtIntgFlexTran(String policyNo) {
		
		String url = PtIntgFlexTranCall;
		String auth = BasicAuthName +":"+ BasicAuthPass;
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")) );
        String authHeader = "Basic " + new String( encodedAuth );
        List<PtIntgFlexTranReq> reqlist = new ArrayList<PtIntgFlexTranReq>();
		List<PtIntgFlexTran> list = ptintgFlexTransRepo.findByPiftPolicyNo(policyNo);
		PtIntgFlexTran saveData=new PtIntgFlexTran();
		if (list != null && list.size() > 0) {
			PtIntgFlexTranReq req1 = new PtIntgFlexTranReq();
			for (PtIntgFlexTran data : list) {
				req1 = dozerMapper.map(data, PtIntgFlexTranReq.class);
				reqlist.add(req1);
			}
		}
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.set("Authorization",authHeader);
		HttpEntity<List<PtIntgFlexTranReq>> entityReq = new HttpEntity<List<PtIntgFlexTranReq>>(reqlist, headers);

		ResponseEntity<PremiaCommonRes> response = restTemplate.postForEntity(url, entityReq, PremiaCommonRes.class);
		System.out.println(response.getBody());
		IntegrationSaveRes res1= new IntegrationSaveRes();
		res1.setResponse(response.getBody().getCommonResponse().getResponse());
		res1.setErrorMessage(response.getBody().getCommonResponse().getErrorMessage());
//		try {
//		if("Success".equalsIgnoreCase(res1.getResponse())){
//			for(PtIntgFlexTran data:list) {
//				saveData=dozerMapper.map(data, PtIntgFlexTran.class);
//				saveData.setPiftIntgStatus(res1.getResponse());
//				saveData.setPiftErrorMessage("");
//				ptintgFlexTransRepo.saveAndFlush(saveData);
//			}
//			
//		}else {
//			for(PtIntgFlexTran data:list) {
//				saveData=dozerMapper.map(data, PtIntgFlexTran.class);
//				saveData.setPiftIntgStatus(res1.getResponse());
//				saveData.setPiftErrorMessage(res1.getErrorMessage());
//				ptintgFlexTransRepo.saveAndFlush(saveData);
//				}
//			
//		}
//		} catch (Exception e) {
//			e.printStackTrace();
//			log.info("Log Details" + e.getMessage());
//			return null;
//		}
		return response;
	}	
	
	
}
